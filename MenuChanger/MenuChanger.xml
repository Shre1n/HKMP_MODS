<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MenuChanger</name>
    </assembly>
    <members>
        <member name="T:MenuChanger.Attributes.DynamicBoundAttribute">
            <summary>
            Attribute which indicates that the member it is applied to is bounded above or below by the value of the named member.
            </summary>
        </member>
        <member name="F:MenuChanger.Attributes.DynamicBoundAttribute.memberName">
            <summary>
            The name of the field, property, or parameterless method which bounds the attribute target.
            </summary>
        </member>
        <member name="F:MenuChanger.Attributes.DynamicBoundAttribute.upper">
            <summary>
            True if the attribute describes an upper bound, False if a lower bound.
            </summary>
        </member>
        <member name="M:MenuChanger.Attributes.DynamicBoundAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Indicates that the member is bounded above or below by the value of the named member.
            </summary>
        </member>
        <member name="T:MenuChanger.Attributes.MenuIgnoreAttribute">
            <summary>
            Attribute which indicates that a public member should be ignored in autogenerated menus, such as MenuElementFactory.
            </summary>
        </member>
        <member name="T:MenuChanger.Attributes.MenuIncludeAttribute">
            <summary>
            Attribute which indicates that a private member should be included in autogenerated menus, such as MenuElementFactory.
            </summary>
        </member>
        <member name="T:MenuChanger.Attributes.MenuLabelAttribute">
            <summary>
            Attribute which contains the appropriate name of a member for menu display.
            </summary>
        </member>
        <member name="T:MenuChanger.Attributes.MenuRangeAttribute">
            <summary>
            Attribute which indicates that a member should be constrained to a fixed range. Use with members bound to a numeric entry field.
            </summary>
        </member>
        <member name="M:MenuChanger.Attributes.MenuRangeAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Indicates that the member should be contrained between min and max.
            </summary>
        </member>
        <member name="T:MenuChanger.Attributes.TriggerValidationAttribute">
            <summary>
            Attribute which indicates that changes to this member should cause validation of another member's value.
            </summary>
        </member>
        <member name="F:MenuChanger.Attributes.TriggerValidationAttribute.memberNames">
            <summary>
            The members which should be validated when this member is changed, in the order that validation should occur.
            </summary>
        </member>
        <member name="M:MenuChanger.Attributes.TriggerValidationAttribute.#ctor(System.String)">
            <summary>
            Indicates that changes to this member should cause validation of another member's value.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MemberInfoExtensions.IsValidForMenu(System.Reflection.MemberInfo)">
            <summary>
            Tests whether the member is a field or property which allows read and write operations, and also is either public with no MenuIgnoreAttribute or has a MenuIncludeAttribute.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MemberInfoExtensions.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the value from the field or property of the member.
            </summary>
            <exception cref="T:System.NotImplementedException">The MemberInfo is not a FieldInfo or a PropertyInfo.</exception>
        </member>
        <member name="M:MenuChanger.Extensions.MemberInfoExtensions.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value of the field or property of the member.
            </summary>
            <exception cref="T:System.NotImplementedException">The MemberInfo is not a FieldInfo or a PropertyInfo.</exception>
        </member>
        <member name="M:MenuChanger.Extensions.MemberInfoExtensions.GetValueType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of the field or property of the member.
            </summary>
            <exception cref="T:System.NotImplementedException">The MemberInfo is not a FieldInfo or a PropertyInfo</exception>
        </member>
        <member name="M:MenuChanger.Extensions.MemberInfoExtensions.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is one of the primitive numeric types.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.AddHideMenuPageEvent(MenuChanger.MenuElements.BaseButton)">
            <summary>
            Causes the button to hide its MenuPage on click.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.AddHideMenuPageEvent(MenuChanger.MenuElements.BaseButton,MenuChanger.MenuPage)">
            <summary>
            Causes the button to hide the given MenuPage on click.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.AddHideAllMenuPagesEvent(MenuChanger.MenuElements.BaseButton)">
            <summary>
            Causes the button to hide all MenuPages on click.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.AddShowMenuPageEvent(MenuChanger.MenuElements.BaseButton,MenuChanger.MenuPage)">
            <summary>
            Causes the button to show the given MenuPage on click.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.AddHideAndShowEvent(MenuChanger.MenuElements.BaseButton,MenuChanger.MenuPage)">
            <summary>
            Causes the button to transition from its MenuPage to another on click.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.AddHideAndShowEvent(MenuChanger.MenuElements.BaseButton,MenuChanger.MenuPage,MenuChanger.MenuPage)">
            <summary>
            Causes the button to transition from one MenuPage to another on click.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.AddSetResumeKeyEvent(MenuChanger.MenuElements.BaseButton,System.String)">
            <summary>
            Saves the string to local settings. MenuChanger will subsequently allow a ResumeMenu subscribed to the matching key to take control upon clicking the save slot button.
            </summary>
        </member>
        <member name="M:MenuChanger.Extensions.MenuElementExtensions.SymSetNeighbor(MenuChanger.ISelectable,MenuChanger.Neighbor,MenuChanger.ISelectable)">
            <summary>
            Calls SetNeighbor with the given parameters, and then calls the reverse SetNeighbor to ensure symmetric navigation.
            </summary>
        </member>
        <member name="T:MenuChanger.ISelectable">
            <summary>
            Interface used by MenuChanger types which manage one or more Selectables.
            </summary>
        </member>
        <member name="M:MenuChanger.ISelectable.SetNeighbor(MenuChanger.Neighbor,MenuChanger.ISelectable)">
            <summary>
            Sets the neighbor in the specified direction to be the given ISelectable.
            <br/>Often used recursively: e.g. setting a panel as a neighbor of a panel calls SetNeighbor on ISelectable elements of each panel.
            </summary>
        </member>
        <member name="M:MenuChanger.ISelectable.GetISelectable(MenuChanger.Neighbor)">
            <summary>
            Returns the most extreme ISelectable subelement in the specified direction.
            <br/>For example, on a button, this would return itself. On a VerticalItemPanel, this would return the first item if called with Neighbor.Up.
            </summary>
        </member>
        <member name="M:MenuChanger.ISelectable.GetSelectable(MenuChanger.Neighbor)">
            <summary>
            Returns the most extreme Selectable subelement in the specified direction.
            <br/>For example, on a button, this would return its Selectable. On a VerticalItemPanel, this would be equivalent to GetISelectable composed with GetSelectable.
            </summary>
        </member>
        <member name="T:MenuChanger.ISelectableGroup">
            <summary>
            Interface used by MenuChanger types which manage one or more ISelectables.
            </summary>
        </member>
        <member name="M:MenuChanger.ISelectableGroup.ResetNavigation">
            <summary>
            Resets the internal navigation of the group.
            </summary>
        </member>
        <member name="T:MenuChanger.ModeMenuConstructor">
            <summary>
            Base class for inserting custom mode menus.
            </summary>
        </member>
        <member name="M:MenuChanger.ModeMenuConstructor.OnEnterMainMenu(MenuChanger.MenuPage)">
            <summary>
            Called during UIManager.EditUI to allow the menu to be built.
            </summary>
        </member>
        <member name="M:MenuChanger.ModeMenuConstructor.OnExitMainMenu">
            <summary>
            Called during activeSceneChanged away from Menu_Title to allow any menu resources to be disposed.
            </summary>
        </member>
        <member name="M:MenuChanger.ModeMenuConstructor.TryGetModeButton(MenuChanger.MenuPage,MenuChanger.MenuElements.BigButton@)">
            <summary>
            Called after OnEnterMainMenu. Returns true if the out parameter should be used as a button in the mode menu.
            </summary>
        </member>
        <member name="T:MenuChanger.ResumeMenuConstructor">
            <summary>
            Base class for inserting custom resume menus.
            </summary>
        </member>
        <member name="M:MenuChanger.ResumeMenuConstructor.OnEnterMainMenu">
            <summary>
            Called during UIManager.EditUI to allow the menu to be built.
            </summary>
        </member>
        <member name="M:MenuChanger.ResumeMenuConstructor.OnExitMainMenu">
            <summary>
            Called during activeSceneChanged away from Menu_Title to allow any menu resources to be disposed.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.BaseButton">
            <summary>
            The base class for MenuChanger buttons such as SmallButton or BigButton.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.BigButton">
            <summary>
            MenuElement which manages a "Mode Select" style button.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.BigButton.#ctor(MenuChanger.MenuPage,System.String)">
            <summary>
            Creates a button on the page with the specified title text.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.BigButton.#ctor(MenuChanger.MenuPage,System.String,System.String)">
            <summary>
            Creates a button on the page with the specified title and subtitle.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.BigButton.#ctor(MenuChanger.MenuPage,UnityEngine.Sprite,System.String,System.String)">
            <summary>
            Creates a button on the page with the specified title, subtitle, and sprite background.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.BigButton.#ctor(MenuChanger.MenuPage,UnityEngine.Sprite,System.String)">
            <summary>
            Creates a button on the page with the specified title and sprite background.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.BigButton.#ctor(MenuChanger.MenuPage,UnityEngine.Sprite)">
            <summary>
            Creates a button on the page with the specified sprite background.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.BigButton.#ctor(MenuChanger.MenuPage,MenuChanger.Mode,System.Boolean)">
            <summary>
            Creates a button on the page with the same style as the corresponding mode select button.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.CounterLabel">
            <summary>
            Object which manages a text box displaying a counter that can be incremented.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.CounterLabel.#ctor(MenuChanger.MenuPage,System.String,System.Int32)">
            <summary>
            Creates a label on the page with the specified prefix and initial counter value.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.EntryField">
            <summary>
            The base class of MenuChanger input fields.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.EntryField`1">
            <summary>
            An EntryField of a specified type. EntryFields such as NumericEntryField and TextEntryField derive from this class.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.CustomEntryField`1">
            <summary>
            An EntryField which allows the Read and Write methods to be overriden by delegate fields.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.TextEntryField">
            <summary>
            An EntryField for multiline text.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.NumericEntryField`1">
            <summary>
            An EntryField for numeric types, which supports operations that clamp the input to a given range.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MenuChanger.MenuElements.IMenuElement">
            <summary>
            The common interface for MenuChanger types which are attached to a MenuPage, and have the abilities to be shown, hidden, and moved around.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.IMenuElement.Destroy">
            <summary>
            Destroys the GameObject(s) attached to the element.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.IMenuElement.MoveTo(UnityEngine.Vector2)">
            <summary>
            Moves the element to the specified position in standard MenuPage coordinates: approximately (-960, 960) x (-540, 540) scaled to the screen.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.IMenuElement.Translate(UnityEngine.Vector2)">
            <summary>
            Translates the element by the specified amount in standard MenuPage coordinates: approximately (-960, 960) x (-540, 540) scaled to the screen.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.IValueElement">
            <summary>
            A MenuElement which represents a value that can be modified and bound to the field or property of an object.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.IValueElement.Value">
            <summary>
            The boxed value of the element.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.IValueElement.ValueType">
            <summary>
            The type of Value.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.IValueElement.SetValue(System.Object)">
            <summary>
            Sets Value. The result may be modified or interrupted by validation and events.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.IValueElement.Bind(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Changes to Value will subsequently set the value of the field or property MemberInfo.
            </summary>
        </member>
        <member name="E:MenuChanger.MenuElements.IValueElement.SelfChanged">
            <summary>
            An event invoked when Value is changed, passing in the current instance as the parameter.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.IValueElement`1">
            <summary>
            A strongly typed IValueElement. A MenuElement which represents a value that can be modified and bound to the field or property of an object.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.IValueElement`1.Value">
            <summary>
            The value of the element.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.IValueElement`1.SetValue(`0)">
            <summary>
            Sets Value. The result may be modified or interrupted by validation and events.
            </summary>
        </member>
        <member name="E:MenuChanger.MenuElements.IValueElement`1.ValueChanged">
            <summary>
            An event invoked when Value is changed, passing in the new value as the parameter.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.MenuElementFactory.TryGetValueElement(MenuChanger.MenuPage,System.Reflection.MemberInfo,MenuChanger.MenuElements.IValueElement@)">
            <summary>
            Returns true if an IValueElement was successfully created for the given field or property.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.MenuElementFactory`1">
            <summary>
            Class which converts an object to a menu representation, consisting of MenuItems and EntryFields that access and modify its fields and properties.
            <br/>Can be easily used to automatically generate a menu by first creating a MenuElementFactory, and then passing its Elements array to a MenuPanel.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.MenuElementFactory`1.#ctor(MenuChanger.MenuPage,`0)">
            <summary>
            Creates an MEF with elements on the given page and bound to the specified object.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.MenuElementFactory`1.SetMenuValues(`0)">
            <summary>
            For each member tracked by the MEF, fetches the value from source and applies it to the corresponding element.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.MenuItem">
            <summary>
            Base class for buttons which allow selecting an item from a fixed set of values.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.MenuItem.Formatter">
            <summary>
            The object which formats the MenuItem's label. Setting this property triggers a text refresh. Must not be null.
            </summary>
        </member>
        <member name="E:MenuChanger.MenuElements.MenuItem.InterceptChanged">
            <summary>
            Event called before the MenuItem's value is updated.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.MenuItem`1">
            <summary>
            Button which allows selecting an item from a fixed set of values of the generic type.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.MenuItem`1.#ctor(MenuChanger.MenuPage,System.String,`0[])">
            <summary>
            Creates a MenuItem with given array of values. The current value will be displayed with the button's name as a prefix.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.MenuItem`1.#ctor(MenuChanger.MenuPage,System.String,System.Collections.Generic.List{`0})">
            <summary>
            Creates a MenuItem with given list of values. The current value will be displayed with the button's name as a prefix.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.MenuEnum`1">
            <summary>
            A MenuItem of the Enum type, which has the Enum's values as its items.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.MenuItemFormatter">
            <summary>
            Class used to control the text displayed by a MenuItem.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.MenuItemFormatter.GetText(System.String,System.Object)">
            <summary>
            Returns the text which should be displayed by the MenuItem parent.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.DefaultMenuItemFormatter">
            <summary>
            Class used to control the text displayed by a MenuItem. Formats text as "{name}: {item}"
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.ToggleButtonFormatter">
            <summary>
            Class used to control the text displayed by a ToggleButton. Formats text as "{name}", and does not use the value of the button.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.MenuItemEnumFormatter">
            <summary>
            Class used to control the text displayed by a MenuEnum. Formats text as "{name}: {display(item)}" where display converts the enum value to readable text by assuming a camel-case value.
            <br/>Supports MenuLabelAttribute on enum members.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.MenuLabel">
            <summary>
            MenuElement which manages a Text component. Supports title and paragraph styles.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.RadioSwitch">
            <summary>
            A control for managing a group of ToggleButtons, with modes to allow selecting only one at a time or selecting multiple toggles.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.RadioSwitch.ToggleGroupMode">
            <summary>
            Unused enum. ToggleGroupMode.RadioSwitch corresponds to when the Active property of RadioSwitch is true.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.RadioSwitch.CurrentButton">
            <summary>
            The currently selected ToggleButton, or null.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.RadioSwitch.Active">
            <summary>
            Determines whether the RadioSwitch event is called when its buttons are clicked.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.RadioSwitch.CurrentSelection">
            <summary>
            The name of the currently selected ToggleButton, or null.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.RadioSwitch.#ctor(MenuChanger.MenuPage,System.String[])">
            <summary>
            Creates a RadioSwitch on the specified page, with new ToggleButtons for each string in the array.
            <br/>The RadioSwitch does not control the layout of its buttons; it is recommended to use the Elements field with a panel.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.RadioSwitch.SelectFirst">
            <summary>
            Selects the first element in the Elements array.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.RadioSwitch.TrySelect(System.String)">
            <summary>
            If a ToggleButton exists with the given name and is unlocked, and the CurrentButton is not locked, selects the new button and returns true.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.RadioSwitch.MatchPredicateAndLock(System.Func{MenuChanger.MenuElements.ToggleButton,System.Boolean})">
            <summary>
            Use with MultiSelect mode to select a subset of buttons, and lock the result.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.RadioSwitch.DeselectAll(System.Func{MenuChanger.MenuElements.ToggleButton,System.Boolean})">
            <summary>
            Unlocks and deselects all of the ToggleButtons in the switch. For each button, if lockPredicate is not null and evaluates true, then the button is locked afterwards.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.RadioSwitch.DeselectCurrent">
            <summary>
            Deselects the current button, if not null. In RadioSwitch mode, this leaves the RadioSwitch with no buttons selected.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.RadioSwitch.SetActive(System.Boolean)">
            <summary>
            If true, the RadioSwitch will act in RadioSwitch mode, ensuring that at most one button can be selected at a time, and the selected button cannot be deselected.
            <br/>Otherwise, the toggles can be modified freely.
            <br/>Note that SetActive changes how the RadioSwitch updates, but if going from MultiSelect to RadioSwitch, the buttons must be deselected separately.
            </summary>
        </member>
        <member name="E:MenuChanger.MenuElements.RadioSwitch.Changed">
            <summary>
            Invoked in RadioSwitch mode when the current selection is changed, with the new selection.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.SmallButton">
            <summary>
            MenuElement which manages a standard button.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuElements.SmallButton.Text">
            <summary>
            The Text component on the button.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.SmallButton.#ctor(MenuChanger.MenuPage,System.String)">
            <summary>
            Creates a button on the page with the specified text.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.TimerLabel">
            <summary>
            MenuElement which manages a text box displaying a timer tied to a Stopwatch.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.TimerLabel.#ctor(MenuChanger.MenuPage,System.String,System.String)">
            <summary>
            Creates a new TimerLabel. The optional rest label will be used until the timer is started, or else the label will be blank.
            <br/>When the timer is started, the label will display the prefix, followed by the current time.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.TimerLabel.Start">
            <summary>
            Resets and starts the timer.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.TimerLabel.StopInternal">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.TimerLabel.Split(System.String)">
            <summary>
            Stops the timer, sets the prefix to a new value, and restarts the timer. Returns the final time as a string, without prefix.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuElements.ToggleButton">
            <summary>
            MenuItem&lt;bool&gt; which indicates its state using colors instead of displaying the value as text.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuElements.ToggleButton.#ctor(MenuChanger.MenuPage,System.String)">
            <summary>
            Creates a toggle button displaying the given text and initialized to false.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuPage">
            <summary>
            Wrapper for the standard root object used by most MenuElements. MenuPages are fullscreen pages which can be shown and hidden independently.
            </summary>
        </member>
        <member name="F:MenuChanger.MenuPage.backTo">
            <summary>
            The MenuPage which the GoBack method and the back button directs to. Can be modified after creation. If null, defaults to going back to the profile menu.
            </summary>
        </member>
        <member name="F:MenuChanger.MenuPage.backButton">
            <summary>
            The MenuPage's back button. A back button is always created by the constructor, but can be safely destroyed if desired.
            </summary>
        </member>
        <member name="F:MenuChanger.MenuPage.isShowing">
            <summary>
            Set true while the MenuPage is displayed.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.#ctor(System.String)">
            <summary>
            Creates a MenuPage with the given name, equipped with a back button that returns to the profile menu.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.#ctor(System.String,MenuChanger.MenuPage)">
            <summary>
            Creates a MenuPage with the given name, equipped with a back button that returns to the given page.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.Show">
            <summary>
            Displays the MenuPage, and selects its default element.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.Hide">
            <summary>
            Hides the MenuPage.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.GoBack">
            <summary>
            The method invoked by the back button. Returns to the backTo page, or if backTo is null returns to the profile menu.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.TransitionTo(MenuChanger.MenuPage)">
            <summary>
            Hides this MenuPage and shows the next page.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.AddToNavigationControl(MenuChanger.ISelectable)">
            <summary>
            Adds the selectable to be managed directly by the page's navigation.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPage.ReplaceNavigation(MenuChanger.MenuPageNavigation)">
            <summary>
            Replaces the page's navigation control with a new one, migrates all the selectable elements
            corrently controlled by the page's navigation into the new one, and recursively resets navigation
            for the page.
            </summary>
            <param name="newNav">The new navigation to use</param>
        </member>
        <member name="M:MenuChanger.MenuPage.ResetNavigation">
            <summary>
            Resets navigation for each selectable managed directly by the page's navigation.
            Note that this acts recursively on any ISelectableGroups.        
            </summary>
        </member>
        <member name="P:MenuChanger.MenuPage.BlockGoBack">
            <summary>
            If true, GoBack calls have no effect.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuPageNavigation">
            <summary>
            Class used to handle navigation between root level elements of a MenuPage.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPageNavigation.Add(MenuChanger.ISelectable)">
            <summary>
            Adds the ISelectable to navigation control.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPageNavigation.Remove(MenuChanger.ISelectable)">
            <summary>
            Removes the ISelectable from navigation control.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPageNavigation.SelectDefault">
            <summary>
            Selects an element of the MenuPage by default. Called when the MenuPage is showed.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPageNavigation.ResetNavigation">
            <summary>
            Resets navigation on each ISelectableGroup attached to the MPN, and then applies its navigation control to each item.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuPanels.GridItemPanel">
            <summary>
            A MenuPanel which groups its items in a grid with a fixed number of columns and fixed horizontal and vertical spacing.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.GridItemPanel.#ctor(MenuChanger.MenuPage,UnityEngine.Vector2,System.Int32,System.Single,System.Single,System.Boolean,MenuChanger.MenuElements.IMenuElement[])">
            <summary>
            Creates a panel which groups its elements in a grid with a fixed number of columns.
            </summary>
            <param name="page">The page containing the panel.</param>
            <param name="localTopCenter">The center of the top row of the panel, in MenuPage coordinates.</param>
            <param name="columns">The number of columns in the grid.</param>
            <param name="vspace">The vertical space between consecutive rows.</param>
            <param name="hspace">The horizontal space between consecutive columns.</param>
            <param name="rootLevel">True if the panel's navigation should be controlled by the MenuPage. False if it will be nested within another panel.</param>
            <param name="children">The items of the panel.</param>
        </member>
        <member name="M:MenuChanger.MenuPanels.GridItemPanel.Reposition">
            <summary>
            Reapplies the panel layout to its items.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.GridItemPanel.Respace(System.Single)">
            <summary>
            Updates the panel with the new spacing between rows.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.GridItemPanel.Insert(System.Int32,MenuChanger.MenuElements.IMenuElement)">
            <summary>
            Inserts the item into the specified row-major index of the panel.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.GridItemPanel.Insert(System.Int32,System.Int32,MenuChanger.MenuElements.IMenuElement)">
            <summary>
            Inserts the item into the specified row and column of the panel.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuPanels.IMenuPanel">
            <summary>
            The common interface for MenuChanger types which arrange or display IMenuElements. IMenuPanel implements IMenuElement, and so panels can often be nested to some degree.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.IMenuPanel.Add(MenuChanger.MenuElements.IMenuElement)">
            <summary>
            Adds the IMenuElement to the panel.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.IMenuPanel.Remove(MenuChanger.MenuElements.IMenuElement)">
            <summary>
            Removes the IMenuElement from the panel.
            </summary>
        </member>
        <member name="P:MenuChanger.MenuPanels.IMenuPanel.Items">
            <summary>
            The collection of IMenuElements managed by the panel.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuPanels.MultiGridItemPanel">
            <summary>
            An ordered item viewer containing grid panels. Allows a grid panel to take an arbitrary number of elements without overflowing.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.MultiGridItemPanel.#ctor(MenuChanger.MenuPage,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Vector2,MenuChanger.MenuElements.IMenuElement[])">
            <summary>
            Creates a panel which can group an arbitrary number of elements on paginated grids.
            </summary>
            <param name="page">The page containing the panel.</param>
            <param name="rows">The number of rows to allow in the grid before starting a new page.</param>
            <param name="columns">The number of columns in the grid.</param>
            <param name="vspace">The vertical space between consecutive rows.</param>
            <param name="hspace">The horizontal space between consecutive columns.</param>
            <param name="topCenter">The center of the top row of the panel, in MenuPage coordinates.</param>
            <param name="children">The items of the panel.</param>
        </member>
        <member name="M:MenuChanger.MenuPanels.MultiGridItemPanel.#ctor(MenuChanger.MenuPage,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MenuChanger.MenuElements.IMenuElement[])">
            <summary>
            Creates a panel which can group an arbitrary number of elements on paginated grids.
            </summary>
            <param name="page">The page containing the panel.</param>
            <param name="rows">The number of rows to allow in the grid before starting a new page.</param>
            <param name="columns">The number of columns in the grid.</param>
            <param name="vspace">The vertical space between consecutive rows.</param>
            <param name="hspace">The horizontal space between consecutive columns.</param>
            <param name="topCenter">The center of the top row of the panel, in MenuPage coordinates.</param>
            <param name="prevPos">The position of the previous button.</param>
            <param name="nextPos">The position of the next button.</param>
            <param name="indexPos">The position of the index label.</param>
            <param name="children">The items of the panel.</param>
        </member>
        <member name="T:MenuChanger.MenuPanels.OrderedItemViewer">
            <summary>
            A panel which shows one element at a time, managed by arrow buttons.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.OrderedItemViewer.#ctor(MenuChanger.MenuPage,MenuChanger.MenuElements.IMenuElement[])">
            <summary>
            Creates a panel which shows one element at a time, managed by arrow buttons placed on either side of the back button.
            </summary>
            <param name="page">The page containing the panel.</param>
            <param name="items">The items of the panel.</param>
        </member>
        <member name="M:MenuChanger.MenuPanels.OrderedItemViewer.#ctor(MenuChanger.MenuPage,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MenuChanger.MenuElements.IMenuElement[])">
            <summary>
            Creates a panel which shows one element at a time, managed by arrow buttons placed at the specified positions.
            </summary>
            <param name="page">The page containing the panel.</param>
            <param name="prevPos">The position of the previous button.</param>
            <param name="nextPos">The position of the next button.</param>
            <param name="indexLabelPos">The position of the label showing the current page index.</param>
            <param name="items">The items of the panel.</param>
        </member>
        <member name="M:MenuChanger.MenuPanels.OrderedItemViewer.ToPrevious">
            <summary>
            Hides the current item of the OrderedItemViewer and shows the item at the previous index, wrapping around if necessary.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.OrderedItemViewer.ToNext">
            <summary>
            Hides the current item of the OrderedItemViewer and shows the item at the next index, wrapping around if necessary.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.OrderedItemViewer.JumpTo(System.Int32)">
            <summary>
            Hides the current item of the OrderedItemViewer and shows the item at the given index.
            </summary>
        </member>
        <member name="T:MenuChanger.MenuPanels.Subpage">
            <summary>
            A panel which does not arrange its elements. Includes an optional title label. Essentially behaves like a MenuPage, including in how it handles navigation.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.Subpage.#ctor(MenuChanger.MenuPage,System.String,UnityEngine.Vector2)">
            <summary>
            Creates a Subpage with a title label at the specified position.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.Subpage.#ctor(MenuChanger.MenuPage,System.String)">
            <summary>
            Creates a Subpage with a title label at (0, 400).
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.Subpage.#ctor(MenuChanger.MenuPage)">
            <summary>
            Creates a Subpage with an empty title label at (0, 400).
            </summary>
        </member>
        <member name="T:MenuChanger.MenuPanels.VerticalItemPanel">
            <summary>
            A MenuPanel which arranges its elements in a column with a fixed spacing between elements.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.VerticalItemPanel.#ctor(MenuChanger.MenuPage,UnityEngine.Vector2,System.Single,System.Boolean,MenuChanger.MenuElements.IMenuElement[])">
            <summary>
            Creates a panel which groups its elements in a column.
            </summary>
            <param name="page">The page containing the panel.</param>
            <param name="localTopCenter">The center of the top item of the panel, in MenuPage coordinates.</param>
            <param name="vspace">The space between consecutive elements.</param>
            <param name="rootLevel">True if the panel's navigation should be controlled by the MenuPage. False if it will be nested within another panel.</param>
            <param name="children">The items of the panel.</param>
        </member>
        <member name="M:MenuChanger.MenuPanels.VerticalItemPanel.Reposition">
            <summary>
            Reapplies the panel layout to its items.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.VerticalItemPanel.Respace(System.Single)">
            <summary>
            Updates the panel with the new spacing between rows.
            </summary>
        </member>
        <member name="M:MenuChanger.MenuPanels.VerticalItemPanel.Insert(System.Int32,MenuChanger.MenuElements.IMenuElement)">
            <summary>
            Inserts the item into the specified row of the panel.
            </summary>
        </member>
        <member name="T:MenuChanger.ModeMenu">
            <summary>
            Static class which manages the MenuChanger mode menu.
            </summary>
        </member>
        <member name="M:MenuChanger.ModeMenu.AddMode(MenuChanger.ModeMenuConstructor)">
            <summary>
            The main entry point for adding to the mode menu. Stores the menu constructor to be invoked when the mode menu is built.
            </summary>
        </member>
        <member name="F:MenuChanger.NavigationTypes.SimpleHorizontalNavigation.Selectables">
            <summary>
            A list of selectables. Note: Prefer to use <see cref="P:MenuChanger.NavigationTypes.SimpleHorizontalNavigation.Items"/> and the add/remove methods instead
            of modifying this list directly
            </summary>
        </member>
        <member name="T:MenuChanger.SpaceParameters">
            <summary>
            Static class with various constants for positioning and spacing elements in the (-960, 960) x (-540, 540) MenuPage coordinates
            </summary>
        </member>
        <member name="F:MenuChanger.SpaceParameters.VSPACE_SMALL">
            <summary>
            Recommended minimum vertical spacing for SmallButtons.
            </summary>
        </member>
        <member name="F:MenuChanger.SpaceParameters.VSPACE_MEDIUM">
            <summary>
            Recommended minimum vertical spacing for SmallButtons and/or labelled EntryFields.
            </summary>
        </member>
        <member name="F:MenuChanger.SpaceParameters.VSPACE_LARGE">
            <summary>
            Recommended minimum vertical spacing for BigButtons.
            </summary>
        </member>
        <member name="F:MenuChanger.SpaceParameters.HSPACE_SMALL">
            <summary>
            Recommended minimum horizontal spacing for SmallButtons or EntryFields with short (1-2 word) labels.
            </summary>
        </member>
        <member name="F:MenuChanger.SpaceParameters.HSPACE_MEDIUM">
            <summary>
            Recommended horizontal spacing between three large columns.
            </summary>
        </member>
        <member name="F:MenuChanger.SpaceParameters.HSPACE_LARGE">
            <summary>
            Recommended horizontal spacing between two large columns.
            </summary>
        </member>
        <member name="P:MenuChanger.SpaceParameters.TOP_CENTER">
            <summary>
            Recommended positioning for a centered title. Value is (0, 400), but there is room to increase y if space is needed.
            </summary>
        </member>
        <member name="P:MenuChanger.SpaceParameters.TOP_CENTER_UNDER_TITLE">
            <summary>
            Recommended positioning for a centered panel or element just below a page title. Value is (0, 300).
            </summary>
        </member>
        <member name="T:MenuChanger.ThreadSupport">
            <summary>
            Utility which helps side threads interact with the main Unity thread.
            </summary>
        </member>
        <member name="M:MenuChanger.ThreadSupport.BeginInvoke(System.Action)">
            <summary>
            Enqueues the action to be invoked during the next Unity update.
            <br/>If the action raises an exception, the exception is caught and logged.
            </summary>
        </member>
        <member name="M:MenuChanger.ThreadSupport.BlockUntilInvoked(System.Action)">
            <summary>
            Enqueues the action to be invoked during the next Unity update. Blocks the requesting thread until the action has been invoked.
            <br/>If the action raises an exception, the exception is caught and rethrown on the requester's thread as a <see cref="T:MenuChanger.ThreadSupportException"/>.
            </summary>
            <exception cref="T:MenuChanger.ThreadSupportException"></exception>
        </member>
        <member name="M:MenuChanger.ThreadSupport.BlockUntilInvoked``1(System.Func{``0})">
            <summary>
            Enqueues the function to be invoked during the next Unity update. Blocks the requesting thread until the function has been invoked, and returns its result.
            <br/>If the function raises an exception, the exception is caught and rethrown on the requester's thread as a <see cref="T:MenuChanger.ThreadSupportException"/>.
            </summary>
            <exception cref="T:MenuChanger.ThreadSupportException"></exception>
        </member>
    </members>
</doc>
