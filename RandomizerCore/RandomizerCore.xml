<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RandomizerCore</name>
    </assembly>
    <members>
        <member name="T:RandomizerCore.Logic.HashQueue`1">
            <summary>
            A queue of distinct items.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.DNFLogicDef">
            <summary>
            A <see cref="T:RandomizerCore.Logic.LogicDef"/> which stores its contents in disjunctive normal form.
            <br/>Preferred for operations which need to inspect the successful subexpression after evaluation, such as most state operations.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.ILocationWaypoint">
            <summary>
            Interface for locations which have waypoint-like behavior, in that they modify the ProgressionManager when they become reachable.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILocationWaypoint.GetReachableEffect">
            <summary>
            Returns a logic item which applies an effect when the location becomes reachable.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicFormatExtentions.LoadFile(RandomizerCore.Logic.ILogicFormat,RandomizerCore.Logic.LogicFileType,System.IO.Stream)">
            <summary>
            Returns the result of the ILogicFormat method corresponding to the LogicFileType.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicFormatExtentions.LoadFile(RandomizerCore.Logic.ILogicFormat,RandomizerCore.Logic.LogicFileType,System.String)">
            <summary>
            Converts the string to a stream, and returns the result of the ILogicFormat method corresponding to the LogicFileType.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.ILogicFormat">
            <summary>
            Interface describing a strategy for loading a specific file format into a <see cref="T:RandomizerCore.Logic.LogicManagerBuilder"/>.
            </summary>
            <seealso cref="M:RandomizerCore.Logic.LogicManagerBuilder.DeserializeFile(RandomizerCore.Logic.LogicFileType,RandomizerCore.Logic.ILogicFormat,System.IO.Stream)"/>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadTerms(System.IO.Stream)">
            <summary>
            Loads a collection of terms from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadWaypoints(System.IO.Stream)">
            <summary>
            Loads a collection of waypoints from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadTransitions(System.IO.Stream)">
            <summary>
            Loads a collection of transitions from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadMacros(System.IO.Stream)">
            <summary>
            Loads a collection of macros from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadItems(System.IO.Stream)">
            <summary>
            Loads a collection of items from a file. In general, some items cannot be constructed with a <see cref="T:RandomizerCore.Logic.LogicManager"/>. 
            <br/>It is the repsonsibility of format implementations to forbid such items or wrap them in an appropriate template.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadLocations(System.IO.Stream)">
            <summary>
            Loads a collection of locations from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadLogicEdits(System.IO.Stream)">
            <summary>
            Loads a collection of logic edits from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadMacroEdits(System.IO.Stream)">
            <summary>
            Loads a collection of macro edits from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadLogicSubstitutions(System.IO.Stream)">
            <summary>
            Loads a collection of logic substitutions from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadItemTemplates(System.IO.Stream)">
            <summary>
            Loads a collection of item templates from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadItemStrings(System.IO.Stream)">
            <summary>
            Loads a collection of item strings from a file.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ILogicFormat.LoadStateData(System.IO.Stream)">
            <summary>
            Loads state data from a file.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.LogicDef">
            <summary>
            Class representing a logic clause, which can be evaluated with a <see cref="T:RandomizerCore.Logic.ProgressionManager"/>.
            </summary>
        </member>
        <member name="P:RandomizerCore.Logic.LogicDef.Name">
            <summary>
            An identifier for the LogicDef. May not be unique.
            </summary>
        </member>
        <member name="P:RandomizerCore.Logic.LogicDef.InfixSource">
            <summary>
            The string logic from which the LogicDef was constructed.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicDef.CanGet(RandomizerCore.Logic.ProgressionManager)">
            <summary>
            Evaluates the logic, for the given progression data input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicDef.GetTerms">
            <summary>
            The sequence of terms on which the LogicDef depends. Terms not included in the sequence must not affect the value of CanGet.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicDef.ToTokenSequence">
            <summary>
            Converts the LogicDef to its equivalent sequence of LogicTokens in RPN format.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicDef.ToLogicClauseBuilder">
            <summary>
            Creates a LogicClauseBuilder equivalent to the LogicDef using <see cref="M:RandomizerCore.Logic.LogicDef.ToTokenSequence"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicDef.ToLogicClause">
            <summary>
            Creates a LogicClause equivalent to the LogicDef using <see cref="M:RandomizerCore.Logic.LogicDef.ToTokenSequence"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicDef.ToInfix">
            <summary>
            The string representation of the LogicDef. Must be logically equivalent to InfixSource, but generally does not contain macros and may be expanded or simplified in other ways.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.LogicFileType">
            <summary>
            Enum used for identifying data for the <see cref="T:RandomizerCore.Logic.LogicManagerBuilder"/>.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.LogicInt">
            <summary>
            A <see cref="T:RandomizerCore.Logic.LogicVariable"/> which produces an int value.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.ConstantInt">
            <summary>
            A <see cref="T:RandomizerCore.Logic.LogicInt"/> which produces a constant value.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetLogicDef(System.String)">
            <summary>
            Fetches the logic def by name. Returns null if not defined.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetLogicDefStrict(System.String)">
            <summary>
            Fetches the logic def by name.
            </summary>
            <exception cref="T:System.ArgumentException">The logic def is not defined.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetTerm(System.String)">
            <summary>
            Fetches the term by name. Returns null if not defined.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetTermStrict(System.String)">
            <summary>
            Fetches the term by name.
            </summary>
            <exception cref="T:System.ArgumentException">The tern is not defined.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetTerm(System.Int32)">
            <summary>
            Fetches the term by its id.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetVariable(System.Int32)">
            <summary>
            Fetches the variable by its id.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetVariable(System.String)">
            <summary>
            Fetches the variable by name. If the variable has not yet been instantiated, caches it and gives it an id. Returns null if the name cannot be resolved to a variable.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetVariableStrict(System.String)">
            <summary>
            Fetches the variable by name. If the variable has not yet been instantiated, caches it and gives it an id.
            </summary>
            <exception cref="T:System.ArgumentException">The name cannot be resolved to a variable.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetItem(System.String)">
            <summary>
            Fetches the logic item by name. Returns null if not defined.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetItemStrict(System.String)">
            <summary>
            Fetches the logic item by name.
            </summary>
            <exception cref="T:System.ArgumentException">The logic item is not defined.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetTransition(System.String)">
            <summary>
            Fetches the logic transition by name. Returns null if not defined.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.GetTransitionStrict(System.String)">
            <summary>
            Fetches the logic transition by name.
            </summary>
            <exception cref="T:System.ArgumentException">The logic transition is not defined.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManager.CreateSingleStateLogic(RandomizerCore.Logic.RawLogicDef)">
            <summary>
            Parses infix logic which should take progression data and a single state as input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.IsTerm(System.String)">
            <summary>
            Returns whether the string is a key in the term lookup.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.GetOrAddTerm(System.String)">
            <summary>
            If the string is a key in the term lookup, returns the corresponding term. Otherwise, creates, saves, and returns a new term, of Byte type.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.GetOrAddTerm(System.String,RandomizerCore.Logic.TermType)">
            <summary>
            If the string is a key in the term lookup, returns the corresponding term. Otherwise, creates, saves, and returns a new term of the given type.
            </summary>
            <exception cref="T:System.InvalidOperationException">The term has been defined with a different type.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.AddItem(RandomizerCore.LogicItems.ILogicItemTemplate)">
            <summary>
            Adds the item template to the builder's dictionary. Overwrites any existing item with the same name.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.AddWaypoint(RandomizerCore.Logic.RawWaypointDef)">
            <summary>
            Adds the RawLogicDef as a new waypoint. Overwrites any existing logic with the same name.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.AddTransition(RandomizerCore.Logic.RawLogicDef)">
            <summary>
            Adds the RawLogicTransition as a new transition. Overwrites any existing logic with the same name.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.AddLogicDef(RandomizerCore.Logic.RawLogicDef)">
            <summary>
            Adds the RawLogicDef for general use. Overwrites any existing logic with the same name.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.DoLogicEdit(RandomizerCore.Logic.RawLogicDef)">
            <summary>
            If the input contains the ORIG token and the logic def is already defined, substitutes the old value for ORIG in the input, and overwrites the old logic.
            <br/>If the input does not contain the ORIG token, is equivalent to AddLogicDef.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.DoMacroEdit(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            If the input contains the ORIG token and the macro is already defined, substitutes the old value for ORIG in the input, and overwrites the old macro.
            <br/>If the input does not contain the ORIG token, is equivalent to LP.SetMacro.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.DoSubst(RandomizerCore.Logic.RawSubstDef)">
            <summary>
            Performs the requested substitution on the named logic def or macro.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicManagerBuilder.LoadData(RandomizerCore.Logic.LogicFileType,System.Object)">
            <summary>
            Applies the data to the LMB. The type of the data should match the output of ILogicFormat for the given LogicFileType.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.LogicVariable">
            <summary>
            Terms in logic which require external computation. Cast to a derived class to evaluate.
            Main subclasses are currently <see cref="T:RandomizerCore.Logic.LogicInt"/> and <see cref="T:RandomizerCore.Logic.StateLogic.StateModifier"/>.
            </summary>
        </member>
        <member name="P:RandomizerCore.Logic.LogicVariable.Name">
            <summary>
            The name of the variable. Should match its usage in logic.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.LogicVariable.GetTerms">
            <summary>
            The terms which could possibly alter the evaluation of the variable.
            </summary>
            <returns></returns>
        </member>
        <member name="F:RandomizerCore.Logic.LogicVariable.FALSE">
            <summary>
            Return this to implement bool-like behavior in a <see cref="T:RandomizerCore.Logic.LogicVariable"/> constrained to returning int.
            </summary>
        </member>
        <member name="F:RandomizerCore.Logic.LogicVariable.TRUE">
            <summary>
            Return this to implement bool-like behavior in a <see cref="T:RandomizerCore.Logic.LogicVariable"/> constrained to returning int.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ProgressionManager.Has(System.Int32)">
            <summary>
            Returns true if the value at the index is positive.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ProgressionManager.Has(System.Int32,System.Int32)">
            <summary>
            Returns true if the value at the index is greater than or equal to the threshold.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ProgressionManager.Has(RandomizerCore.TermValue)">
            <summary>
            Returns true if the value at the index is greater than or equal to the threshold.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ProgressionManager.Add(RandomizerCore.ILogicItem)">
            <summary>
            Applies the effect of the item, then invokes AfterAddItem.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ProgressionManager.Add(RandomizerCore.ILogicItem,RandomizerCore.Logic.ILogicDef)">
            <summary>
            Applies the effect of the item, and any location-dependent effects, then invokes AfterAddItem.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ProgressionManager.AddLocationDependentEffect(RandomizerCore.ILocationDependentItem,RandomizerCore.Logic.ILogicDef)">
            <summary>
            Applies only the location-dependent effects of the item, then invokes AfterAddItem.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.ProgressionManager.Add(System.Collections.Generic.IEnumerable{RandomizerCore.ILogicItem})">
            <summary>
            Applies the effects of all items in the sequence, then invokes AfterAddRange.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.RPNLogicDef">
            <summary>
            A <see cref="T:RandomizerCore.Logic.LogicDef"/> which stores its contents in reverse Polish notation.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.RPNLogicDef.GetTerms">
            <summary>
            Enumerates the terms of the LogicDef, excluding operators and combinators. May contain duplicates.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.ConstantStateProvider">
            <summary>
            A <see cref="T:RandomizerCore.Logic.StateLogic.StateProvider"/> which provides a fixed state union.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.LazyStateBuilder">
            <summary>
            Struct wrapper for a <see cref="T:RandomizerCore.Logic.StateLogic.State"/> or <see cref="T:RandomizerCore.Logic.StateLogic.StateBuilder"/>, which delays creating a <see cref="T:RandomizerCore.Logic.StateLogic.StateBuilder"/> until a mutating operation is requested.
            Note that this is a mutable struct. Pass it by ref to or return it from methods which perform mutating operations to ensure the effects of those operations are not lost.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.#ctor(RandomizerCore.Logic.StateLogic.State)">
            <summary>
            Wraps the State as a LazyStateBuilder, which delays creating a StateBuilder until a mutating operation is requested.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.#ctor(RandomizerCore.Logic.StateLogic.StateBuilder)">
            <summary>
            Clones the StateBuilder and wraps it as a LazyStateBuilder.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.#ctor(RandomizerCore.Logic.StateLogic.LazyStateBuilder)">
            <summary>
            Clones the other LazyStateBuilder. If the other wraps a StateBuilder, then the inner StateBuilder is also cloned.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.SetBool(System.Int32,System.Boolean)">
            <summary>
            Sets the specified field.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.SetInt(System.Int32,System.Int32)">
            <summary>
            Sets the specified field.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.Increment(System.Int32,System.Int32)">
            <summary>
            Increments the specified field.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.TrySetBoolTrue(System.Int32)">
            <summary>
            If the field is false, sets it true and returns true. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.TryIncrement(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns false if the increment would cause the field to exceed the max value. Otherwise, performs <see cref="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.Increment(System.Int32,System.Int32)"/> and returns true.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.TrySetIntToValue(System.Int32,System.Int32)">
            <summary>
            Returns false if <paramref name="value"/> is less than the field value. Otherwise, performs <see cref="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.SetInt(System.Int32,System.Int32)"/> and returns true.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.LazyStateBuilder.GetState">
            <summary>
            If the instance wraps a <see cref="T:RandomizerCore.Logic.StateLogic.StateBuilder"/>, creates a <see cref="T:RandomizerCore.Logic.StateLogic.State"/> from the builder. If the instance wraps a <see cref="T:RandomizerCore.Logic.StateLogic.State"/>, returns that state.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.PreState">
            <summary>
            Class which acts as a string-based StateBuilder before the StateManager exists.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.RawStateData">
            <summary>
            Serializable form of StateManager/StateManagerBuilder.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.SingleStateLogic">
            <summary>
            Base class for logic which can be evaluated with a <see cref="T:RandomizerCore.Logic.ProgressionManager"/> and a state as input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.CanGet``1(RandomizerCore.Logic.ProgressionManager,``0)">
            <summary>
            Evaluates the logic, for the given progression data and state.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.GetTerms">
            <summary>
            The sequence of terms on which the LogicDef depends. Terms not included in the sequence must not affect the value of CanGet.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.ToTokenSequence">
            <summary>
            Converts the LogicDef to its equivalent sequence of LogicTokens in RPN format.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.ToLogicClauseBuilder">
            <summary>
            Creates a LogicClauseBuilder equivalent to the LogicDef using <see cref="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.ToTokenSequence"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.ToLogicClause">
            <summary>
            Creates a LogicClause equivalent to the LogicDef using <see cref="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.ToTokenSequence"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.SingleStateLogic.ToInfix">
            <summary>
            The string representation of the LogicDef. Must be logically equivalent to InfixSource, but generally does not contain macros and may be expanded or simplified in other ways.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.SingleStateRPNLogic.GetTerms">
            <summary>
            Enumerates the terms of the LogicDef, excluding operators and combinators. May contain duplicates.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.State">
            <summary>
            Immutable representation of path-dependent accessibility constraints. Consists of bool fields and nonnegative integer fields.
            <br/>States are partially ordered via the bool and integer orderings for each field.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateAccessVariable">
            <summary>
            A LogicVariable which produces an int depending on progression data and a state input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateAccessVariable.GetStateFields">
            <summary>
            Enumerates the state fields which the variable depends on.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateBuilder">
            <summary>
            Object used to create <see cref="T:RandomizerCore.Logic.StateLogic.State"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateBuilder.SetBool(System.Int32,System.Boolean)">
            <summary>
            Sets the specified field.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateBuilder.SetInt(System.Int32,System.Int32)">
            <summary>
            Sets the specified field.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateBuilder.TrySetBoolTrue(System.Int32)">
            <summary>
            If the field is false, sets it true and returns true. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateBuilder.TryIncrement(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns false if the increment would cause the field to exceed the max value. Otherwise, performs <see cref="M:RandomizerCore.Logic.StateLogic.StateBuilder.Increment(System.Int32,System.Int32)"/> and returns true.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateBuilder.Increment(System.Int32,System.Int32)">
            <summary>
            Increments the specified field.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateBuilder.TrySetIntToValue(System.Int32,System.Int32)">
            <summary>
            Returns false if <paramref name="value"/> is less than the field value. Otherwise, performs <see cref="M:RandomizerCore.Logic.StateLogic.StateBuilder.SetInt(System.Int32,System.Int32)"/> and returns true.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateBuilder.Destruct(RandomizerCore.Collections.RCBitArray@,System.Int32[]@)">
            <summary>
            Exposes the data of the <see cref="T:RandomizerCore.Logic.StateLogic.StateBuilder"/>, and renders it incapable of further modification.
            </summary>
            <exception cref="T:System.InvalidOperationException">The StateBuilder has already been destructed.</exception>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateLogicDef">
            <summary>
            A LogicDef which also supports state calculation.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateLogicDef.EvaluateState(RandomizerCore.Logic.ProgressionManager,System.Collections.Generic.List{RandomizerCore.Logic.StateLogic.State})">
            <summary>
            Uses the current progression data to determine under what state(s) the logic is satisfiable.
            <br/>Appends a (possibly empty, non-reduced) sequence of result states to the input list. Returns true if the result is nonempty, or the result is empty but represents a nonnull indeterminate result.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateLogicDef.CheckForUpdatedState(RandomizerCore.Logic.ProgressionManager,RandomizerCore.Logic.StateLogic.StateUnion,System.Collections.Generic.List{RandomizerCore.Logic.StateLogic.State},RandomizerCore.Logic.StateLogic.StateUnion@)">
            <summary>
            Runs EvaluateState, and returns true if any new states are added to the state union, or if current is null and the result is empty.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateLogicDef.CheckForUpdatedState(RandomizerCore.Logic.ProgressionManager,RandomizerCore.Logic.StateLogic.StateUnion,System.Collections.Generic.List{RandomizerCore.Logic.StateLogic.State},System.Int32,RandomizerCore.Logic.StateLogic.StateUnion@)">
            <summary>
            Runs EvaluateState, and returns true if any new states are added to the state union.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateManager">
            <summary>
            Object which manages the list of fields which <see cref="T:RandomizerCore.Logic.StateLogic.State"/> should represent.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManager.GetBool(System.String)">
            <summary>
            Fetches the state bool by name. Returns null if not defined.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManager.GetBoolStrict(System.String)">
            <summary>
            Fetches the state bool by name.
            </summary>
            <exception cref="T:System.ArgumentException">The state bool is not defined.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManager.GetInt(System.String)">
            <summary>
            Fetches the state int by name. Returns null if not defined.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManager.GetIntStrict(System.String)">
            <summary>
            Fetches the state int by name.
            </summary>
            <exception cref="T:System.ArgumentException">The state int is not defined.</exception>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManager.GetProperty(System.String,System.String)">
            <summary>
            Returns the value of the property for the field, if defined, or else null.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManager.HasProperty(System.String,System.String)">
            <summary>
            Returns true if the property for the field is defined and not null.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateManagerBuilder">
            <summary>
            Object used to create <see cref="T:RandomizerCore.Logic.StateLogic.StateManager"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManagerBuilder.SetProperty``1(System.String,System.String,``0)">
            <summary>
            Sets the field's property to the specified value.
            <br/>Data on the StateManager is expected to be immutable. The generic constraints are to encourage only using primitive types and enums as property values through this overload.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateManagerBuilder.SetProperty(System.String,System.String,System.String)">
            <summary>
            Sets the field's property to the specified value.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateModifier">
            <summary>
            Variable which acts on a state and yields a sequence of result states. Can also produce input-independent state.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateModifier.ModifyState(System.Object,RandomizerCore.Logic.ProgressionManager,RandomizerCore.Logic.StateLogic.LazyStateBuilder)">
            <summary>
            Modifies the state, producing a sequence of results.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateModifier.ProvideState(System.Object,RandomizerCore.Logic.ProgressionManager)">
            <summary>
            Returns a sequence of states produced by the modifier, independent of input state.
            <br/>If the modifier succeeds independently of input state, but does not have input-independent output, it should return empty.
            <br/>If the modifier does not succeed independently of input state, it should return null. The default implementation is to always return null.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateModifier.ModifyAll(System.Object,RandomizerCore.Logic.ProgressionManager,System.Collections.Generic.List{RandomizerCore.Logic.StateLogic.LazyStateBuilder})">
            <summary>
            Performs ModifyState on each element of the list, then ProvideState, and puts the results in the list. Removes the original elements of the list.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateProvider">
            <summary>
            A LogicInt which can provide an input state to its logic branch, if not preceded by any state-valued terms.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateProvider.GetInputState(System.Object,RandomizerCore.Logic.ProgressionManager)">
            <summary>
            Gets the collection of states which should be fed into the conjunction containing this variable.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateResetter">
            <summary>
            Modifier which outputs a specified state, with options to conditionally leave some fields unmodified.
            </summary>
        </member>
        <member name="P:RandomizerCore.Logic.StateLogic.StateResetter.ResetState">
            <summary>
            The state which the resetter resets toward.
            </summary>
        </member>
        <member name="P:RandomizerCore.Logic.StateLogic.StateResetter.ResetLogicProperty">
            <summary>
            If not null, the name of a state field property which stores infix logic, which evaluates to true when the state field should be modified by the resetter.
            </summary>
        </member>
        <member name="P:RandomizerCore.Logic.StateLogic.StateResetter.OptIn">
            <summary>
            By default, is false, and fields which do not declare reset logic are reset. If true, fields which do not declare reset logic are not reset.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateResetter.ProvideState(System.Object,RandomizerCore.Logic.ProgressionManager)">
            <summary>
            For a StateResetter, returns the empty sequence, unless overridden by a derived class.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateResetter.ModifyState(System.Object,RandomizerCore.Logic.ProgressionManager,RandomizerCore.Logic.StateLogic.LazyStateBuilder)">
            <summary>
            For a StateResetter, returns a singleton containing the result of ResetSingle, unless overridden by a derived class.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateResetter.ResetSingle(RandomizerCore.Logic.ProgressionManager,RandomizerCore.Logic.StateLogic.LazyStateBuilder)">
            <summary>
            Applies the result of resetting the state towards the ResetState, accounting for the OptIn and conditional reset properties for this resetter.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.StateLogic.StateUnion">
            <summary>
            A collection of mutually incomparable states, representing a disjunction of possible states.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateUnion.IsProgressivelyLE(RandomizerCore.Logic.StateLogic.StateUnion,RandomizerCore.Logic.StateLogic.StateUnion)">
            <summary>
            A partial ordering which holds if the right union represents equal or better progression than the left union.
            Returns true if left is null, or else both are not null and there is a map from left to right which takes each state in left to a <see cref="M:RandomizerCore.Logic.StateLogic.State.IsComparablyLE(RandomizerCore.Logic.StateLogic.State,RandomizerCore.Logic.StateLogic.State)"/> state in right.
            Note: this ordering is reversed from the natural ordering induced by the ordering on State.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateUnion.IsProgressivelyEqual(RandomizerCore.Logic.StateLogic.StateUnion,RandomizerCore.Logic.StateLogic.StateUnion)">
            <summary>
            Returns true if the two state unions are equivalent under the partial order of <see cref="M:RandomizerCore.Logic.StateLogic.StateUnion.IsProgressivelyLE(RandomizerCore.Logic.StateLogic.StateUnion,RandomizerCore.Logic.StateLogic.StateUnion)"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.StateLogic.StateUnion.TryUnion(RandomizerCore.Logic.StateLogic.StateUnion,RandomizerCore.Logic.StateLogic.StateUnion,RandomizerCore.Logic.StateLogic.StateUnion@)">
            <summary>
            Returns true and outputs a result if the union operation would not result in the left argument.
            </summary>
        </member>
        <member name="F:RandomizerCore.Logic.Term.Id">
            <summary>
            A unique int identifier for the term. The index and type of the term can be recovered from the id using static methods on Term.
            </summary>
        </member>
        <member name="F:RandomizerCore.Logic.Term.Name">
            <summary>
            The name of the term.
            </summary>
        </member>
        <member name="F:RandomizerCore.Logic.Term.Type">
            <summary>
            The type of the term.
            </summary>
        </member>
        <member name="F:RandomizerCore.Logic.Term.Index">
            <summary>
            The index of the term, among terms of its type. Terms of different type may share the same index.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.VariableResolver">
            <summary>
            Class which parses terms in logic as LogicVariables.
            </summary>
        </member>
        <member name="P:RandomizerCore.Logic.VariableResolver.Inner">
            <summary>
            A nested VariableResolver, which runs after the parent VariableResolver in TryMatch.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.VariableResolver.CanMatch(RandomizerCore.Logic.LogicManager,System.String)">
            <summary>
            Returns true if the term can be matched to a LogicVariable.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.VariableResolver.TryMatch(RandomizerCore.Logic.LogicManager,System.String,RandomizerCore.Logic.LogicVariable@)">
            <summary>
            Returns true if the term can be matched to a LogicVariable, and outputs the variable.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.VariableResolver.TryMatchPrefix(System.String,System.String,System.String[]@)">
            <summary>
            Matches a variable identified via a prefix. The input must either equal the prefix exactly, or consist of the prefix, followed by square brackets enclosing a comma-separated list. Subexpressions within square brackets will not be split.
            <br/>Outputs the comma-separated parameters list.
            </summary>
        </member>
        <member name="T:RandomizerCore.Logic.MainUpdater">
            <summary>
            Class which indexes subscribers by their dependency on progression terms to optimize updating in response to new progression.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.MainUpdater.RevertLong">
            <summary>
            Resets the MU and rolls back entry list to the long term revert point.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.MainUpdater.AddWaypoints(System.Collections.Generic.IEnumerable{RandomizerCore.Logic.LogicWaypoint})">
            <summary>
            Adds entries with default waypoint behavior, inferring bool- or state-behavior based on term type.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.MainUpdater.AddTransitions(System.Collections.Generic.IEnumerable{RandomizerCore.Logic.LogicTransition})">
            <summary>
            Adds entries which manage state for each transition.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.MainUpdater.AddManagedStates(System.Collections.Generic.IEnumerable{System.ValueTuple{RandomizerCore.Logic.Term,RandomizerCore.Logic.StateLogic.StateLogicDef}})">
            <summary>
            Adds entries which manage the state term according to its paired logic.
            <br/>Nonstate terms in the sequence are ignored.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.MainUpdater.Reset">
            <summary>
            Resets each update entry in the updater.
            </summary>
        </member>
        <member name="M:RandomizerCore.Logic.MainUpdater.Clear">
            <summary>
            Removes all update entries from the updater, and clears its events.
            </summary>
        </member>
        <member name="T:RandomizerCore.Collections.PriorityQueue`2">
            <summary>
            Stable binary min-heap (equal priorities -> first-in first-out)
            </summary>
        </member>
        <member name="P:RandomizerCore.Collections.PriorityQueue`2.UnorderedItems">
            <summary>
            Gets a collection that enumerates the elements of the queue in an unordered manner.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.PriorityQueue`2.GetConsumingEnumerable">
            <summary>
            Returns an enumerable which, when enumerated, extracts and returns the elements of the priority queue in order.
            </summary>
        </member>
        <member name="T:RandomizerCore.Collections.RCBitArray">
            <summary>
            A BitArray with efficient partial order comparison.
            </summary>
        </member>
        <member name="T:RandomizerCore.Collections.ReferenceEqualityComparer`1">
            <summary>
            EqualityComparer which checks equality and generates hash codes according to reference equality.
            </summary>
        </member>
        <member name="T:RandomizerCore.Collections.SortedArrayList`1">
            <summary>
            A sorted list which maintains its sort through binary search during list operations.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.Add(`0)">
            <summary>
            Inserts the item into the sorted list using binary search. Item will appear after all elements which compare equal.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.CountLE(`0)">
            <summary>
            Counts the number of elements less than or equal to the input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.CountLT(`0)">
            <summary>
            Counts the number of elements less than the input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.CountGE(`0)">
            <summary>
            Counts the number of elements greater than or equal to the input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.CountGT(`0)">
            <summary>
            Counts the number of elements greater than the input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.FindInclusiveLowerBound(`0)">
            <summary>
            Returns the least index such that its entry is greater than or equal to the input, or 0.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.FindInclusiveLowerBound(`0,System.Int32,System.Int32)">
            <summary>
            Returns the least index in the range such that its entry is greater than or equal to the input, or lb.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.FindExclusiveUpperBound(`0)">
            <summary>
            Returns the least index such that its entry is strictly greater than the input, or Count.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.FindExclusiveUpperBound(`0,System.Int32,System.Int32)">
            <summary>
            Returns the least index in the range such that its entry is strictly greater than the input, or ub.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.Contains(`0)">
            <summary>
            Uses binary search to find the range in which the element could be found, and then tests each element in the range for equality.
            </summary>
        </member>
        <member name="M:RandomizerCore.Collections.SortedArrayList`1.Remove(`0)">
            <summary>
            Uses binary search to find the range in which the element could be found, and then removes the first element in the range which gives equality, if it exists.
            </summary>
        </member>
        <member name="T:RandomizerCore.Exceptions.CommutativityFailureException">
            <summary>
            Exception which indicates that changing the order in which items were added to progression resulted in unexpected loss of progress.
            </summary>
        </member>
        <member name="T:RandomizerCore.Exceptions.OutOfLocationsException">
            <summary>
            Exception which indicates that an operation was performed without sufficient available locations.
            </summary>
        </member>
        <member name="T:RandomizerCore.Exceptions.ReferenceCycleException">
            <summary>
            Exception thrown when a cyclic reference is detected in logic. Prevents computations that would lead to infinite recursion/stack overflow.
            </summary>
        </member>
        <member name="T:RandomizerCore.Exceptions.UnreachableLocationException">
            <summary>
            Exception which indicates that a location was unreachable after all items were placed.
            </summary>
        </member>
        <member name="T:RandomizerCore.Exceptions.ValidationException">
            <summary>
            Exception raised during the validation stage of the randomizer.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.ArgMin``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first minimal element of the sequence.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.ArgMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the first minimal element of the transformed sequence.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.ArgMax``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first maximal element of the sequence.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.ArgMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the first maximal element of the transformed sequence.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.IndexMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the index of the first minimal element of the transformed sequence.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.TryPop``1(System.Collections.Generic.Stack{``0},``0@)">
            <summary>
            If the stack is nonempty, pops the stack, outputting the result, and returns true. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.TryPeek``1(System.Collections.Generic.Stack{``0},``0@)">
            <summary>
            If the stack is nonempty, peeks the stack, outputting the result, and returns true. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.TryDequeue``1(System.Collections.Generic.Queue{``0},``0@)">
            <summary>
            If the queue is nonempty, dequeues an element, outputting the result, and returns true. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.TryPeek``1(System.Collections.Generic.Queue{``0},``0@)">
            <summary>
            If the queue is nonempty, peeks the queue, outputting the result, and returns true. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.StableSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts the list according to the default comparer for its elements, preserving the order of elements which compare equal.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.StableSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the list according to the provided comparer for its elements, preserving the order of elements which compare equal.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.CollectionExtensions.StableSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the list according to the provided comparison for its elements, preserving the order of elements which compare equal.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Pop``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes and returns the last element of the list.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Pop``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Removes and returns the element of the list at the requested index.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Pop``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Removes and returns the first element of the list which satisfies the predicate.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Slice``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
            Returns the segment of the list starting at the specified index, with the specified count.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns the segment of the array starting at the specified index, with the specified count.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.TryPop``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0@)">
            <summary>
            Searches for the first element of the list which satisfies the predicate. If found, returns true, and removes and outputs that element. Otherwise, returns false.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Next``1(System.Random,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Selects an element of the list uniformly at random.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Next``1(System.Random,System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Selects an element of the list randomly according to the provided weights.
            <br/>If cumulative, weights should be an increasing sequence of positive numbers with last entry 1. Probability of selecting element i for i>0 is weights[i] - weights[i-1], and weights[0] for i=0.
            <br/>If noncumulative, weights should be a sequence of nonnegative numbers. Probability of selecting element i is weights[i] / total, where total is the sum of the weights.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.PopNext``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Removes and returns an element of the list, selected uniformly at random.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.PopNext``1(System.Random,System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Removes and returns an element of the list, selected randomly according to the provided weights.
            <br/>If cumulative, weights should be an increasing sequence of positive numbers with last entry 1. Probability of selecting element i for i>0 is weights[i] - weights[i-1], and weights[0] for i=0.
            <br/>If noncumulative, weights should be a sequence of nonnegative numbers. Probability of selecting element i is weights[i] / total, where total is the sum of the weights.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Permute(System.Random,System.Int32)">
            <summary>
            Returns a new array containing a random permutation of the integers from 0 to n-1.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Permute``1(System.Random,``0[])">
            <summary>
            Returns a new array containing a random permutation of the elements of the input.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.PermuteInPlace``1(System.Random,``0[])">
            <summary>
            Randomly permutes the input array.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Permute``1(System.Random,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list containing a random permutation of the output of the enumerable.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.PermuteInPlace``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Randomly permutes the input list.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.PermuteInPlace``1(System.Random,System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Randomly permutes the input list, and performs an action on each element and its new index.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swaps array elements at two indices.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.NextBool(System.Random)">
            <summary>
            Returns a random bool.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.PowerLaw(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Returns a random double within the requested interval, according to a power distribution.
            <br/>Equivalent to scaling the interval by the reciprocal power, selecting a double within that interval uniformly, and rescaling the result by the power.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.ClampToMultipleOf(System.Double,System.Int32)">
            <summary>
            Rounds toward 0 to the largest integer multiple of the divisor which is less than the double in magnitude.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.RandomExtensions.NextWhere``1(System.Random,System.Collections.Generic.IReadOnlyList{``0},System.Predicate{``0})">
            <summary>
            Creates a list of elements which satisfy the predicate, and returns one of the elements of the list uniformly at random.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.StringExtensions.GetStableHashCode(System.String)">
            <summary>
            Returns a consistent platform-independent hash code for the string.
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.StringExtensions.FromCamelCase(System.String)">
            <summary>
            Converts a "camelCase" string to "Camel Case".
            </summary>
        </member>
        <member name="M:RandomizerCore.Extensions.StringExtensions.TryToEnum``1(System.String,``0@)">
            <summary>
            If the string can be parsed to a value of the enum type, ignoring case, returns true and outputs the value. Otherwise, returns false.
            </summary>
        </member>
        <member name="T:RandomizerCore.IRandoCouple">
            <summary>
            Interface for objects which are simultaneously items and locations, for the purposes of randomization.
            </summary>
        </member>
        <member name="T:RandomizerCore.IRandoItem">
            <summary>
            Interface for items to be managed by the randomizer.
            </summary>
        </member>
        <member name="P:RandomizerCore.IRandoItem.Priority">
            <summary>
            Property managed by the randomizer and certain events. Lower priorities are placed first.
            </summary>
        </member>
        <member name="P:RandomizerCore.IRandoItem.Placed">
            <summary>
            Property managed by the randomizer for internal tracking.
            </summary>
        </member>
        <member name="P:RandomizerCore.IRandoItem.Sphere">
            <summary>
            Property managed by the randomizer. Set to the index of the sphere in which the item is placed.
            </summary>
        </member>
        <member name="P:RandomizerCore.IRandoItem.Required">
            <summary>
            Property managed by the randomizer. Set true if the item is not placed in the last sphere.
            </summary>
        </member>
        <member name="T:RandomizerCore.IRandoLocation">
            <summary>
            Interface for locations to be managed by the randomizer.
            </summary>
        </member>
        <member name="P:RandomizerCore.IRandoLocation.Priority">
            <summary>
            Property managed by the randomizer and certain events. Lower priorities are filled first.
            </summary>
        </member>
        <member name="P:RandomizerCore.IRandoLocation.Reachable">
            <summary>
            Property managed by the randomizer for internal tracking.
            </summary>
        </member>
        <member name="P:RandomizerCore.IRandoLocation.Sphere">
            <summary>
            Property managed by the randomizer. Set to the index of the sphere in which the location is first reachable.
            </summary>
        </member>
        <member name="T:RandomizerCore.ILogicItem">
            <summary>
            Interface used by items and itemlikes (transitions, waypoints).
            </summary>
        </member>
        <member name="M:RandomizerCore.ILogicItem.AddTo(RandomizerCore.Logic.ProgressionManager)">
            <summary>
            Directly adds the item to the pm. This does not invoke the pm events, so it is best to implement this explicitly and use pm.Add instead.
            </summary>
        </member>
        <member name="M:RandomizerCore.ILogicItem.GetAffectedTerms">
            <summary>
            Returns the pm indices potentially modified by the item.
            </summary>
        </member>
        <member name="T:RandomizerCore.ILocationDependentItem">
            <summary>
            Interface which indicates the item has an action once its location is determined.
            <r/>The terms modified by the action should be reported in GetAffectedTerms.
            </summary>
        </member>
        <member name="M:RandomizerCore.ILocationDependentItem.Place(RandomizerCore.Logic.ProgressionManager,RandomizerCore.Logic.ILogicDef)">
            <summary>
            Directly performs the action of the location-dependent item on the pm.
            This does not invoke pm events, so consumers should invoke the corresponding method on the pm.
            </summary>
        </member>
        <member name="T:RandomizerCore.IConditionalItem">
            <summary>
            Interface representing an item which may not have any effect. Items which do not implement this interface
            are assumed to unconditionally have an effect.
            </summary>
        </member>
        <member name="M:RandomizerCore.IConditionalItem.CheckForEffect(RandomizerCore.Logic.ProgressionManager)">
            <summary>
            Returns false if <see cref="M:RandomizerCore.LogicItem.AddTo(RandomizerCore.Logic.ProgressionManager)"/> will not modify the ProgressionManager, otherwise returns true.
            </summary>
        </member>
        <member name="M:RandomizerCore.IConditionalItem.TryAddTo(RandomizerCore.Logic.ProgressionManager)">
            <summary>
            Equivalent to calling <see cref="M:RandomizerCore.IConditionalItem.CheckForEffect(RandomizerCore.Logic.ProgressionManager)"/>, then <see cref="M:RandomizerCore.LogicItem.AddTo(RandomizerCore.Logic.ProgressionManager)"/>, and returning the result of the former.
            </summary>
        </member>
        <member name="M:RandomizerCore.LogicItem.GetAffectedTerms">
            <summary>
            Returns the terms potentially modified by the item.
            </summary>
        </member>
        <member name="T:RandomizerCore.LogicItems.ILogicItemTemplate">
            <summary>
            Interface for building items which cannot be instantiated until the LogicManager is available.
            </summary>
        </member>
        <member name="T:RandomizerCore.LogicItems.LogicItemTemplate`1">
            <summary>
            Base class for convenience with implementing ILogicItemTemplate.
            </summary>
        </member>
        <member name="M:RandomizerCore.LogicItems.LogicItemTemplate`1.#ctor(System.String)">
            <summary>
            Base class for convenience with implementing ILogicItemTemplate.
            </summary>
        </member>
        <member name="T:RandomizerCore.LogicItems.Templates.PolymorphicItemTemplate">
            <summary>
            A reflection-based item template.
            </summary>
        </member>
        <member name="P:RandomizerCore.LogicItems.Templates.PolymorphicItemTemplate.Name">
            <summary>
            The "Name" entry in Properties.
            </summary>
        </member>
        <member name="P:RandomizerCore.LogicItems.Templates.PolymorphicItemTemplate.Properties">
            <summary>
            A case-insenstive collection of properties for the item.
            </summary>
        </member>
        <member name="P:RandomizerCore.LogicItems.Templates.PolymorphicItemTemplate.ItemType">
            <summary>
            The type of item to instantiate.
            </summary>
        </member>
        <member name="P:RandomizerCore.LogicItems.Templates.PolymorphicItemTemplate.Constructor">
            <summary>
            The constructor to use to instantiate the item. Can be omitted if ItemType is set, in which case the template will look for a constructor which takes a single string parameter.
            </summary>
        </member>
        <member name="M:RandomizerCore.Profiling.Reset">
            <summary>
            Fully resets all committed, uncommitted, and reverted datapoints.
            </summary>
        </member>
        <member name="M:RandomizerCore.Profiling.EmitMetric(System.String,System.Double)">
            <summary>
            Emits a datapoint for the specified metric
            </summary>
            <param name="name">The metric name. Should be unique to the code being profiled.</param>
            <param name="value">The value to emit.</param>
        </member>
        <member name="M:RandomizerCore.Profiling.Commit">
            <summary>
            Commits all staged emitted metrics.
            </summary>
        </member>
        <member name="M:RandomizerCore.Profiling.Revert">
            <summary>
            Reverts all staged emitted metrics.
            </summary>
        </member>
        <member name="M:RandomizerCore.Profiling.Log(System.Boolean)">
            <summary>
            Aggregates and logs metrics in a tabular format. Staged (uncommitted) metrics are not included.
            </summary>
            <param name="includeReverted">Whether to include reverted metrics in the aggregation.</param>
        </member>
        <member name="T:RandomizerCore.Randomization.CombinedItemSelector">
            <summary>
            Selector which manages multiple GroupItemSelectors, with the goal of proposing lowest priority items from available RandomizationGroups.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.CombinedItemSelector.GetTestItems">
            <summary>
            Enumerates all proposed or accepted items, except for the current proposed item.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.CombinedItemSelector.FinishAccepting(System.Collections.Generic.List{RandomizerCore.IRandoItem}[]@)">
            <summary>
            Outputs list of accepted items. Restores all rejected items and starts new acccepted item list.
            </summary>
            <exception cref="T:System.InvalidOperationException">There are unhandled proposed items.</exception>
        </member>
        <member name="M:RandomizerCore.Randomization.CombinedItemSelector.Finish(System.Collections.Generic.List{RandomizerCore.IRandoItem}[]@)">
            <summary>
            Outputs all items which have not yet been accepted.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.CombinedLocationTracker">
            <summary>
            Class which manages GroupLocationTrackers for each RandomizationGroup to detect when new locations become reachable.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.CoupledRandomizationGroup">
            <summary>
            Class which represents a RandomizationGroup of coupled elements. All items and locations of a CoupledRandomizationGroup must implement IRandoCouple.
            <br/>It is expected that the Items of this group coincide with the Locations of Dual, and vice versa. Both groups must be in the same RandomizationGroup. A group may be self-dual.
            <br/>The effect of coupling is that during randomization, Items of the group may be discarded and used as Locations of the dual group, and vice versa. For each placement, the symmetric placement will be generated.
            </summary>
            <example>
            A group of left transition Locations and right transition Items. 
            Its dual is the group of right transition Locations and left transition Items, and coupling ensures the transitions will be paired in a reversible manner.
            </example>
        </member>
        <member name="T:RandomizerCore.Randomization.DefaultGroupPlacementStrategy">
            <summary>
            A simple placement strategy. Provides support for standard and coupled groups, along with a field which allows weighting placements according to logical depth.
            </summary>
        </member>
        <member name="P:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraint.Test">
            <summary>
            Delegate for <see cref="M:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraint.IsSatisfied(RandomizerCore.IRandoItem,RandomizerCore.IRandoLocation)"/>
            </summary>
        </member>
        <member name="P:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraint.Fail">
            <summary>
            Delegate for <see cref="M:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraint.OnViolated(RandomizerCore.IRandoItem,RandomizerCore.IRandoLocation)"/>
            </summary>
        </member>
        <member name="P:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraint.Label">
            <summary>
            Optional identifying label
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraint.IsSatisfied(RandomizerCore.IRandoItem,RandomizerCore.IRandoLocation)">
            <summary>
            Return false to indicate that the item cannot be placed with the location, unless no constraint-satisfying alternatives exist.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraint.OnViolated(RandomizerCore.IRandoItem,RandomizerCore.IRandoLocation)">
            <summary>
            Called when the constraint is not satisfied, but no constraint-satisfying alternatives exist. 
            Exit normally to accept the placement, or throw OutOfLocationsException to trigger a new attempt.
            Throw other exceptions to halt randomization.
            </summary>
            
        </member>
        <member name="F:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.depthPriorityTransform">
            <summary>
            Invoked on the minimum priority locations of each sphere to modify the priority used to select the location for item.
            <br/>Item priority depth is the number of spheres such that the average priority of their forced progression items is less than the priority of item.
            </summary>
        </member>
        <member name="P:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.ConstraintList">
            <summary>
            If any of the constraints in this list are not satisfied, then the placement will be rejected unless no alternatives exist.
            </summary>
        </member>
        <member name="E:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.Constraints">
            <summary>
            If any of the subscribers to this event return false, then the placement will be rejected unless no alternatives exist.
            </summary>
        </member>
        <member name="E:RandomizerCore.Randomization.DefaultGroupPlacementStrategy.OnConstraintViolated">
            <summary>
            Event for when no reachable locations satisfy the constraint for item.
            <br/>Raise OutOfLocationsException to trigger rerandomization. Raise other exceptions to halt randomization.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.GroupItemSelector">
            <summary>
            Selector which proposes items from a RandomizationGroup by priority order.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.GroupItemSelector.ShouldDiscard(RandomizerCore.IRandoItem)">
            <summary>
            Detects coupled items which must be discarded.
            <br/>An element of a coupled group has item and location behavior. If it becomes reachable before it is placed, it is slated into the locations of a sphere of the dual group, and can no longer be placed.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.GroupItemSelector.FinishAccepting(System.Collections.Generic.List{RandomizerCore.IRandoItem}@)">
            <summary>
            Outputs list of accepted items. Restores all rejected items and starts new acccepted item list.
            </summary>
            <exception cref="T:System.InvalidOperationException">There are unhandled proposed items.</exception>
        </member>
        <member name="M:RandomizerCore.Randomization.GroupItemSelector.Finish(System.Collections.Generic.List{RandomizerCore.IRandoItem}@)">
            <summary>
            Outputs all items which have not yet been accepted.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.GroupItemSelector.CollectDiscardedTransitions(System.Collections.Generic.List{RandomizerCore.IRandoItem}@)">
            <summary>
            Returns decoupled targets which are reachable but not placed.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.GroupLocationTracker">
            <summary>
            Tracker which works with the MainUpdater to observe when locations from its RandomizationGroup become reachable.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.GroupPlacementStrategy">
            <summary>
            Base class for creating placements for a group.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.GroupPlacementStrategy.Reset">
            <summary>
            Called before rerandomization, or if the randomizer resets for subsequent attempts.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.GroupPlacementStrategy.Clone">
            <summary>
            Creates a copy of the strategy that can be used for another group.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.IndeterminateLocation">
            <summary>
            Location which indicates that the items of the group are assumed to be available for the purposes of randomization.
            <br/>Used with ILocationDependentItem effects under such circumstances.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.PriorityTransformUtil">
            <summary>
            Utility class for creating Depth Priority Transforms that do simple mathematical operations.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.PriorityTransformUtil.TransformType">
            <summary>
            Parameter which determines the function applied to the location depth.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.PriorityTransformUtil.ItemPriorityDepthEffect">
            <summary>
            Parameter which determines how location depth should be adjusted according to item priority depth.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.PriorityTransformUtil.ItemPriorityDepthEffect.Cliff">
            <summary>
            Cancel priority transform if item priority depth exceeds location depth.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.PriorityTransformUtil.ItemPriorityDepthEffect.Fade">
            <summary>
            Adjust location depth to fade linearly to 0 when greater than item priority depth.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.PriorityTransformUtil.ItemPriorityDepthEffect.Cap">
            <summary>
            Clamp location depth to item priority depth as an upper bound.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.PriorityTransformUtil.ItemPriorityDepthEffect.Ignore">
            <summary>
            Item priority depth has no effect.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.RandomizationGroup">
            <summary>
            A group of Items and Locations matched in length, for the randomizer to output in RandoPlacement pairs.
            </summary>
        </member>
        <member name="E:RandomizerCore.Randomization.RandomizationGroup.OnPermute">
            <summary>
            An event invoked after the items and locations of the group are permuted and have their priorities set.
            <br/>It is expected that the subscriber may modify the priorities of entries, and the arrays are resorted after the event is invoked.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.RandomizationGroup.OnNewAttempt">
            <summary>
            Called on each new attempt of the randomizer.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.RandomizationStage">
            <summary>
            A collection of RandomizationGroups which should be randomized concurrently by the randomizer, and placed according to the stage's strategy.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.RandomizationStage.OnNewAttempt">
            <summary>
            Called on each new attempt of the randomizer. Base calls OnNewAttempt on each group in the stage.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.Randomizer.Validate">
            <summary>
            Tests the randomizer output and sends an exception if it is invalid.
            </summary>
            <exception cref="T:RandomizerCore.Exceptions.ValidationException"></exception>
        </member>
        <member name="T:RandomizerCore.Randomization.Sphere">
            <summary>
            The computational result of a step of the randomizer.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.Sphere.depth">
            <summary>
            The depth of the sphere.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.Sphere.groupIndex">
            <summary>
            The index of the randomization group of the sphere.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.Sphere.groupLabel">
            <summary>
            The label of the randomization group of the sphere.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.Sphere.final">
            <summary>
            Indicates whether this is the result of the final step of the stage.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.Sphere.Items">
            <summary>
            Items to be placed in the current sphere or earlier.
            </summary>
        </member>
        <member name="F:RandomizerCore.Randomization.Sphere.Locations">
            <summary>
            Locations unlocked after placing Items.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.SphereBuilder">
            <summary>
            Class which manages stepping the randomizer: selecting sets of items which unlock new locations until all locations are reachable. Spheres record the result of each step.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.SphereBuilder.#ctor(RandomizerCore.Randomization.RandomizationStage,RandomizerCore.Logic.ProgressionManager,RandomizerCore.TempState)">
            <summary>
            Creates a new SphereBuilder, using the ProgressionManager to monitor reachable locations.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.SphereBuilder.Advance">
            <summary>
            Steps the SphereBuilder to completion, putting the results into the Placements list.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.SphereBuilder.AddItemlessSphere">
            <summary>
            Creates a sphere with the newest reachable locations and no items. Exits if the request was empty.
            </summary>
            <exception cref="T:System.InvalidOperationException">There are no reachable locations, and the request was nonempty.</exception>
        </member>
        <member name="M:RandomizerCore.Randomization.SphereBuilder.AddNextSphere">
            <summary>
            Steps the builder and creates a sphere with the forced items and unlocked locations.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.StagePlacementStrategy">
            <summary>
            Base class for stage-level placement strategy. Manages the placement of each group.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.StagePlacementStrategy.PlaceItems(RandomizerCore.Randomization.RandomizationStage,RandomizerCore.Randomization.Sphere[],RandomizerCore.TempState)">
            <summary>
            Places the items of the stage according to the spheres. It is expected that the output array contains a full list of placements for each RandomizationGroup of the stage in sequence.
            </summary>
            <param name="stage">The current RandomizationStage.</param>
            <param name="spheres">The list of spheres of the randomizer. Each sphere array has a sphere for each RandomizationGroup, containing the items which must be placed at that depth, and the locations unlocked as a result.</param>
            <param name="placementState">The current state. Temporary indicates that the placement will be eventually overwritten. Permanent indicates that it is final. Otherwise, the placement may or may not be final.</param>
            <returns></returns>
        </member>
        <member name="M:RandomizerCore.Randomization.StagePlacementStrategy.Reset">
            <summary>
            Called before rerandomization, or if the randomizer resets for subsequent attempts.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.StagePlacementStrategy.Clone">
            <summary>
            Creates a copy of the strategy that can be used for another stage.
            </summary>
        </member>
        <member name="T:RandomizerCore.Randomization.Validator">
            <summary>
            Base class which handles determining whether errors exist in the randomizer output for a group.
            <br/>By default, checks that the placement list has the right counts by name, and that all locations are reachable.
            </summary>
        </member>
        <member name="M:RandomizerCore.Randomization.Validator.Validate(RandomizerCore.Randomization.RandomizationGroup,RandomizerCore.Logic.ProgressionManager,System.Collections.Generic.List{RandomizerCore.RandoPlacement},System.Collections.Generic.List{RandomizerCore.Logic.PrePlacedItemUpdateEntry})">
            <summary>
            Tests the randomizer output for the given group and sends an exception if it is invalid.
            </summary>
            <exception cref="T:RandomizerCore.Exceptions.ValidationException"></exception>
        </member>
        <member name="T:RandomizerCore.Randomization.WeakTransitionValidator">
            <summary>
            Validator which assumes that its group is composed of RandoTransitions, and only checks that their terms are obtained, rather than that they are reachable.
            </summary>
        </member>
        <member name="T:RandomizerCore.RandoMonitor">
            <summary>
            Class which handles events for the Randomizer class.
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemExpressionFactory.EmptyEffect">
            <summary>
            Atom expression which produces a no-op item effect.
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.AdditionAssignment">
            <summary>
            Term, Int -> Effect. Adds the provided value to the term
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.MaxAssignment">
            <summary>
            Term, Int -> Effect. Sets the term to the maximum of the provided value and its current value
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.Conditional">
            <summary>
            Bool, Effect -> Effect. If the condition is met, applies the effect
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.ShortCircuitChaining">
            <summary>
            Effect, Effect -> Effect. Applies the right-hand effect if and only if the left-hand effect produces an empty item
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.Chaining">
            <summary>
            Effect, Effect -> Effect. Applies the 
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.Reference">
            <summary>
            Where a bool is expected, the string is interpreted as the name of a logic def and its value is used as a bool.
            Where an item effect is expected, the string is interpreted as the name of an item and its effect is copied
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.Negation">
            <summary>
            Bool -> Bool. Negates the bool
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.TermCoalescing">
            <summary>
            If the associated term does not correspond to a term in the LogicManager, any effect that would be applied to that term is ignored
            </summary>
        </member>
        <member name="F:RandomizerCore.StringItems.ItemOperatorProvider.Increment">
            <summary>
            Term -> Effect. Adds 1 to the term.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringItems.StringItemEffect.ToExpression">
            <summary>
            Converts the effect to an expression tree, with standardized formatting. May differ from the expression implied by <see cref="P:RandomizerCore.StringItems.StringItem.EffectString"/>.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringItems.StringItemEffect.ToEffectString">
            <summary>
            Converts the effect to an effect string. By default, this prints the result of <see cref="M:RandomizerCore.StringItems.StringItemEffect.ToExpression"/>, and may differ from <see cref="P:RandomizerCore.StringItems.StringItem.EffectString"/>.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.DictPM">
            <summary>
            Object which evaluates tokenized logic using a dictionary of recognized terms and their values.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.DNF">
            <summary>
            Utility methods for dealing with logic in DNF form.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.DNFConverter">
            <summary>
            Class for converting RPN logic to DNF logic, which uses pooled lists to reduce memory usage.
            </summary>
        </member>
        <member name="P:RandomizerCore.StringLogic.DNFConverter.Result">
            <summary>
            The output of Convert. Is recycled 
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.DNFConverter.Trim">
            <summary>
            Reduces the number of pooled lists.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.LogicClause">
            <summary>
            An immutable representation of a boolean circuit, consisting of tokens in RPN order.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.#ctor">
            <summary>
            Initializes an empty LCB. The only valid operation on an empty LCB is Append with a TermToken.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.Simpl">
            <summary>
            Reduces ConstTokens from the expression.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.Unfold">
            <summary>
            Replaces MacroTokens with the clauses they represent. Acts recursively on the inserted clauses.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.Unfold(System.Func{System.String,RandomizerCore.StringLogic.LogicClause})">
            <summary>
            Replaces MacroTokens and ReferenceTokens with the clauses they represent. Acts recursively on the inserted clauses.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.Coalesce(System.Func{RandomizerCore.StringLogic.TermToken,System.Boolean})">
            <summary>
            Replaces CoalescingTokens with their result as determined by the delegate. Acts recursively on nested coalescing expressions.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.PartialCoalesce(System.Func{RandomizerCore.StringLogic.TermToken,System.Nullable{System.Boolean}})">
            <summary>
            Replaces CoalescingTokens with their result as determined by the delegate. If the delegate returns null, the CoalescingToken is left in place. 
            Acts recursively on nested coalescing expressions, provided the delegate returns nonnull.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.Transform(System.Func{RandomizerCore.StringLogic.TermToken,RandomizerCore.StringLogic.TermToken})">
            <summary>
            Applies the delegate to each term in the expression. If the result of the delegate is not null, replaces the term at that position with the result.
            <br/>Returns the number of modified tokens.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.PushOut``1(RandomizerCore.StringLogic.OperatorToken)">
            <summary>
            Distributes nested occurences of the inner operation acting on tokens of the type parameter.
            <br/>That is, if innerOp is OperatorToken.OR, then the result will decompose as a disjunction of clauses, such that within each clause, any disjunction does not contain any specified tokens.
            <br/>For example, if we push out token D, operator OR in "A | B + (C | D + (E | F) | G) | H", the result is "A | B + (C | G) | B + D + (E | F) | H".
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.PushOut(System.Func{RandomizerCore.StringLogic.TermToken,System.Boolean},RandomizerCore.StringLogic.OperatorToken)">
            <summary>
            Distributes nested occurences of the inner operation acting on the specified tokens.
            <br/>That is, if innerOp is OperatorToken.OR, then the result will decompose as a disjunction of clauses, such that within each clause, any disjunction does not contain any specified tokens.
            <br/>For example, if we push out token D, operator OR in "A | B + (C | D + (E | F) | G) | H", the result is "A | B + (C | G) | B + D + (E | F) | H".
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.Subst(RandomizerCore.StringLogic.TermToken,RandomizerCore.StringLogic.TermToken)">
            <summary>
            Replaces all occurences that match the old token with the new token.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.LogicClauseBuilder.Subst(RandomizerCore.StringLogic.TermToken,RandomizerCore.StringLogic.LogicClause)">
            <summary>
            Replaces all occurences that match the old token with the new clause. Is not recursive--it is safe to reference the old token inside the new clause.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.LogicToken">
            <summary>
            The fundamental unit of tokenized logic, used throughout the StringLogic namespace.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.OperatorToken">
            <summary>
            LogicToken representing one of the binary boolean operators, | or +.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.OperatorToken.#ctor(RandomizerCore.StringLogic.OperatorType,System.Int32,System.String)">
            <summary>
            LogicToken representing one of the binary boolean operators, | or +.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.TermToken">
            <summary>
            LogicToken which evaluates to a bool.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.SimpleToken">
            <summary>
            TermToken which represents a simple named variable.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.SimpleToken.#ctor(System.String)">
            <summary>
            TermToken which represents a simple named variable.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.ComparisonToken">
            <summary>
            TermToken which represents a simple comparison of two named integer variables.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.ComparisonToken.#ctor(RandomizerCore.StringLogic.ComparisonType,System.String,System.String)">
            <summary>
            TermToken which represents a simple comparison of two named integer variables.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.MacroToken">
            <summary>
            TermToken which represents a nested LogicClause, provided through the IMacroSource, usually a LogicProcessor.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.MacroToken.#ctor(System.String,RandomizerCore.StringLogic.IMacroSource)">
            <summary>
            TermToken which represents a nested LogicClause, provided through the IMacroSource, usually a LogicProcessor.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.ReferenceToken">
            <summary>
            TermToken which represents a nested LogicClause by name.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.ReferenceToken.#ctor(System.String)">
            <summary>
            TermToken which represents a nested LogicClause by name.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.CoalescingToken">
            <summary>
            TermToken which is parsed as its left argument if defined, otherwise as its right argument.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.CoalescingToken.#ctor(RandomizerCore.StringLogic.TermToken,RandomizerCore.StringLogic.TermToken)">
            <summary>
            TermToken which is parsed as its left argument if defined, otherwise as its right argument.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.ConstToken">
            <summary>
            TermToken which represents a constant bool.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.ConstToken.#ctor(System.Boolean)">
            <summary>
            TermToken which represents a constant bool.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.ProjectedToken">
            <summary>
            TermToken which wraps a state-valued TermToken, indicating that its state should be projected to a bool.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.RPN">
            <summary>
            Utility methods for dealing with logic in RPN form.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.RPN.GetOperationBoundToTerm(System.Collections.Generic.IReadOnlyList{RandomizerCore.StringLogic.LogicToken},System.Int32,System.Range@,System.Int32@)">
            <summary>
            Given the index of a term, finds the index of the operator it is bound to, and the range of indices corresponding to the other argument of the operator.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.RPN.GetEnclosingClause(System.Collections.Generic.IReadOnlyList{RandomizerCore.StringLogic.LogicToken},System.Int32,System.Int32)">
            <summary>
            Given an index and a subsequent operator index, returns the range corresponding to the argument of the operator containing the first index.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.RPN.GetBoundOperatorAlt(System.Collections.Generic.IReadOnlyList{RandomizerCore.StringLogic.LogicToken},System.Int32)">
            <summary>
            Returns the index of the operator bound to the term or clause ending at startIndex.
            If startIndex points to the final token of the list, returns -1.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.RPN.GetBoundOperator(System.Collections.Generic.IReadOnlyList{RandomizerCore.StringLogic.LogicToken},System.Int32)">
            <summary>
            Returns the index of the operator bound to the term at startIndex,
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.RPN.GetClauseRangeFromEnd(System.Collections.Generic.IReadOnlyList{RandomizerCore.StringLogic.LogicToken},System.Int32)">
            <summary>
            Returns the range of indices such that the corresponding tokens form a closed expression, ending at the specified index.
            <br/>If the token at the index is a term, the range will only contain that index.
            <br/>If the token is an operator, the range will contain the operator and its operands.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringLogic.RPN.GetDNF(System.Collections.Generic.IReadOnlyList{RandomizerCore.StringLogic.LogicToken})">
            <summary>
            Returns the disjunctive normal form of the expression. That is,
            <br/>ORing together the results of ANDing the terms in each list results in an expression equivalent to the input.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringLogic.StringPM">
            <summary>
            Base class for an object which can evaluate tokenized logic.
            </summary>
        </member>
        <member name="F:RandomizerCore.StringLogic.StringPM.LP">
            <summary>
            The logic processor and macro source tied to the PM.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.ExpressionParser`1">
            <summary>
            Parses <see cref="T:RandomizerCore.StringParsing.IExpression`1"/>s from a stream of <see cref="T:RandomizerCore.StringParsing.Token"/>s.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.ExpressionParser`1.#ctor(RandomizerCore.StringParsing.IOperatorProvider,RandomizerCore.StringParsing.IExpressionFactory{`0},System.Collections.Generic.IReadOnlyList{RandomizerCore.StringParsing.Token})">
            <summary>
            Constructs a parser
            </summary>
            <param name="operatorProvider">The operator definition provider to use while parsing</param>
            <param name="expressionFactory">The expression factory to use while parsing</param>
            <param name="tokenStream">The token stream to parse from</param>
        </member>
        <member name="M:RandomizerCore.StringParsing.ExpressionParser`1.Parse">
            <summary>
            Parses an expression
            </summary>
            <exception cref="T:RandomizerCore.StringParsing.ParsingException">When an unrecoverable parsing error occurs</exception>
        </member>
        <member name="T:RandomizerCore.StringParsing.ExpressionValidator`1">
            <summary>
            Provides typing validation and error aggregation for <see cref="T:RandomizerCore.StringParsing.IExpression`1"/>s
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.ExpressionValidator`1.Expect(System.Func{System.Boolean},System.Int32,System.Int32,System.String)">
            <summary>
            Assert/validate a custom condition holds.
            </summary>
            <param name="predicate">The condition to evaluate</param>
            <param name="startChar">The starting character index where the error is present</param>
            <param name="endChar">The ending character index where the error is present</param>
            <param name="message">The error message</param>
            <returns>Whether the condition was met (i.e. the result of predicate)</returns>
        </member>
        <member name="M:RandomizerCore.StringParsing.ExpressionValidator`1.ExpectType(RandomizerCore.StringParsing.IExpression{`0},`0)">
            <summary>
            Assert/validate that an expression evaluates to the expected type
            </summary>
            <param name="expression">The expression to check</param>
            <param name="expectedType">The expected type</param>
        </member>
        <member name="M:RandomizerCore.StringParsing.ExpressionValidator`1.ExpectOperator(RandomizerCore.StringParsing.OperatorToken,System.String)">
            <summary>
            Assert/validate that the correct operator was used
            </summary>
            <param name="op">The operator to </param>
            <param name="expectedOp">The expected operator</param>
        </member>
        <member name="M:RandomizerCore.StringParsing.ExpressionValidator`1.ExpectAllSequential(System.Func{System.Boolean}[])">
            <summary>
            Performs a series of expectations in series - if one expectation fails then this expectation will fail and short-circuit.
            Useful for expectations dependent on each other, ie given 2 rules A and B, B's error message is not useful if A fails.
            </summary>
            <param name="predicates">
            A group of expectations to evaluate. Technically this can be any producer but it's generally expected
            for them to be wrappers for calls to Expect* or calls to <see cref="M:RandomizerCore.StringParsing.IExpression`1.Validate(RandomizerCore.StringParsing.ExpressionValidator{`0})"/>
            </param>
        </member>
        <member name="M:RandomizerCore.StringParsing.ExpressionValidator`1.ExpectAllParallel(System.Func{System.Boolean}[])">
            <summary>
            Performs multiple expectations in parallel - if one expectation fails then this expectation will fail, but will not short-circuit.
            Useful for expectations not dependent on each other, ie given 2 rules A and B, both A and B can independently produce useful error messages.
            </summary>
            <param name="predicates">
            A group of expectations to evaluate. Technically this can be any producer but it's generally expected
            for them to be wrappers for calls to Expect*.
            </param>
        </member>
        <member name="T:RandomizerCore.StringParsing.IExpression`1">
            <summary>
            An expression with results constrained by the set T
            </summary>
            <typeparam name="T">The set of valid types for the expression (usually an enum).</typeparam>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpression`1.Evaluate">
            <summary>
            Speculates possible types for an expression. If the result { T.A, T.B } is returned, then the result
            is to be interpreted as "A or B".
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpression`1.Validate(RandomizerCore.StringParsing.ExpressionValidator{`0})">
            <summary>
            Validates whether the expression is structurally and semantically valid and aggregates any errors
            using the provided expression validator.
            </summary>
            <param name="validator">The validator to use to aggregate errors.</param>
            <returns>Whether the expression is valid or not.</returns>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpression`1.Print">
            <summary>
            Reconstructs the original string representation of the expression
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.GroupingExpression`1">
            <summary>
            A parenthesized nested expression.
            </summary>
            <param name="OpenParenthesis">The open parenthesis token</param>
            <param name="Nested">The nested expression</param>
            <param name="CloseParenthesis">The close parenthesis token</param>
        </member>
        <member name="M:RandomizerCore.StringParsing.GroupingExpression`1.#ctor(RandomizerCore.StringParsing.StructuralToken,RandomizerCore.StringParsing.IExpression{`0},RandomizerCore.StringParsing.StructuralToken)">
            <summary>
            A parenthesized nested expression.
            </summary>
            <param name="OpenParenthesis">The open parenthesis token</param>
            <param name="Nested">The nested expression</param>
            <param name="CloseParenthesis">The close parenthesis token</param>
        </member>
        <member name="P:RandomizerCore.StringParsing.GroupingExpression`1.OpenParenthesis">
            <summary>The open parenthesis token</summary>
        </member>
        <member name="P:RandomizerCore.StringParsing.GroupingExpression`1.Nested">
            <summary>The nested expression</summary>
        </member>
        <member name="P:RandomizerCore.StringParsing.GroupingExpression`1.CloseParenthesis">
            <summary>The close parenthesis token</summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.GroupingExpression`1.Evaluate">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.GroupingExpression`1.Validate(RandomizerCore.StringParsing.ExpressionValidator{`0})">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.GroupingExpression`1.Print">
            <inheritdoc/>
        </member>
        <member name="T:RandomizerCore.StringParsing.PrefixExpression`1">
            <summary>
            A prefix expression (prefix operator applied to a nested expression)
            </summary>
            <param name="Operator">The operator token</param>
            <param name="Operand">The operand expression</param>
        </member>
        <member name="M:RandomizerCore.StringParsing.PrefixExpression`1.#ctor(RandomizerCore.StringParsing.OperatorToken,RandomizerCore.StringParsing.IExpression{`0})">
            <summary>
            A prefix expression (prefix operator applied to a nested expression)
            </summary>
            <param name="Operator">The operator token</param>
            <param name="Operand">The operand expression</param>
        </member>
        <member name="P:RandomizerCore.StringParsing.PrefixExpression`1.Operator">
            <summary>The operator token</summary>
        </member>
        <member name="P:RandomizerCore.StringParsing.PrefixExpression`1.Operand">
            <summary>The operand expression</summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.PrefixExpression`1.Evaluate">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.PrefixExpression`1.Validate(RandomizerCore.StringParsing.ExpressionValidator{`0})">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.PrefixExpression`1.Print">
            <inheritdoc/>
        </member>
        <member name="T:RandomizerCore.StringParsing.PostfixExpression`1">
            <summary>
            A postfix expression (postfix operator applied to a nested expression)
            </summary>
            <param name="Operand">The operand expression</param>
            <param name="Operator">The operator token</param>
        </member>
        <member name="M:RandomizerCore.StringParsing.PostfixExpression`1.#ctor(RandomizerCore.StringParsing.IExpression{`0},RandomizerCore.StringParsing.OperatorToken)">
            <summary>
            A postfix expression (postfix operator applied to a nested expression)
            </summary>
            <param name="Operand">The operand expression</param>
            <param name="Operator">The operator token</param>
        </member>
        <member name="P:RandomizerCore.StringParsing.PostfixExpression`1.Operand">
            <summary>The operand expression</summary>
        </member>
        <member name="P:RandomizerCore.StringParsing.PostfixExpression`1.Operator">
            <summary>The operator token</summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.PostfixExpression`1.Evaluate">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.PostfixExpression`1.Validate(RandomizerCore.StringParsing.ExpressionValidator{`0})">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.PostfixExpression`1.Print">
            <inheritdoc/>
        </member>
        <member name="T:RandomizerCore.StringParsing.InfixExpression`1">
            <summary>
            An infix expression (infix operator applied between 2 nested expressions)
            </summary>
            <param name="Left">The left-hand operand</param>
            <param name="Operator"></param>
            <param name="Right">The right-hand operand</param>
        </member>
        <member name="M:RandomizerCore.StringParsing.InfixExpression`1.#ctor(RandomizerCore.StringParsing.IExpression{`0},RandomizerCore.StringParsing.OperatorToken,RandomizerCore.StringParsing.IExpression{`0})">
            <summary>
            An infix expression (infix operator applied between 2 nested expressions)
            </summary>
            <param name="Left">The left-hand operand</param>
            <param name="Operator"></param>
            <param name="Right">The right-hand operand</param>
        </member>
        <member name="P:RandomizerCore.StringParsing.InfixExpression`1.Left">
            <summary>The left-hand operand</summary>
        </member>
        <member name="P:RandomizerCore.StringParsing.InfixExpression`1.Operator">
            <summary></summary>
        </member>
        <member name="P:RandomizerCore.StringParsing.InfixExpression`1.Right">
            <summary>The right-hand operand</summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.InfixExpression`1.Evaluate">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.InfixExpression`1.Validate(RandomizerCore.StringParsing.ExpressionValidator{`0})">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.InfixExpression`1.Print">
            <inheritdoc/>
        </member>
        <member name="M:RandomizerCore.StringParsing.InfixExpression`1.FlattenAssoc``1(``0)">
            <summary>
            For the given associative infix expression type, recursively unfolds that type and any intermediate grouping expressions, returning a sequence of expressions on which the infix operator acts left to right.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.IExpressionFactory`1">
            <summary>
            Factory to produce domain specific expressions during parsing. Should support operators as defined
            by a paired <see cref="T:RandomizerCore.StringParsing.IOperatorProvider"/>
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpressionFactory`1.IsAtom(RandomizerCore.StringParsing.Token)">
            <summary>
            Determines whether a token is a valid atomic expression
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpressionFactory`1.CreateAtomExpression(RandomizerCore.StringParsing.Token)">
            <summary>
            Creates an atom expression from a token
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpressionFactory`1.CreatePrefixExpression(RandomizerCore.StringParsing.OperatorToken,RandomizerCore.StringParsing.IExpression{`0})">
            <summary>
            Creates the appropriate prefix expression for the provided operator
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpressionFactory`1.CreatePostfixExpression(RandomizerCore.StringParsing.IExpression{`0},RandomizerCore.StringParsing.OperatorToken)">
            <summary>
            Creates the appropriate postfix expression for the provided operator
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IExpressionFactory`1.CreateInfixExpression(RandomizerCore.StringParsing.IExpression{`0},RandomizerCore.StringParsing.OperatorToken,RandomizerCore.StringParsing.IExpression{`0})">
            <summary>
            Creates the appropriate infix expression for the provided operator
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.IOperatorProvider">
             <summary>
             Defines domain-specific operator definitions.
             </summary>
             <remarks>
             The "binding power" concept was borrowed from this explainer of Pratt Parsing:
             https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html.
             It is essentially an alternative way to think about precedence, but gives a natural
             way to explain biased associativity.
            
             In short, each operator has a distinct left and right binding power. When looking at B
             in the expression `A &lt;op1&gt; B &lt;op2&gt; C`, you see whether the right BP of op1 is higher or
             lower than the left BP of op2 to see which operator has the stronger ability to "pull" or "bind"
             B into its expression. Left and right BP can be (and should be) asymmetric to give a well-defined
             preference for the case where op1 and op2 are the same operator (or 2 operators at the same precedence level).
             </remarks>
        </member>
        <member name="M:RandomizerCore.StringParsing.IOperatorProvider.GetAllOperators">
            <summary>
            Get all operators defined by this provider.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IOperatorProvider.PrefixBindingPower(System.String)">
            <summary>
            Get the binding power of the operator if that operator is a known prefix operator, otherwise null
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IOperatorProvider.PostfixBindingPower(System.String)">
            <summary>
            Get the binding power of the operator if that operator is a known postfix operator, otherwise null
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.IOperatorProvider.InfixBindingPower(System.String)">
            <summary>
            Get the left and right binding powers of the operator if that operator is a known infix operator, otherwise null
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.NameToken">
            <summary>
            Token representing a named symbol, e.g. a term, logic variable, item name, etc.
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.NumberToken">
            <summary>
            Token representing a number literal
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.StringToken">
            <summary>
            Token representing a string literal
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.StructuralToken">
            <summary>
            Token representing a structural element, e.g. parentheses or braces
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.OperatorToken">
            <summary>
            Token representing a unary or binary operator
            </summary>
        </member>
        <member name="T:RandomizerCore.StringParsing.Tokenizer">
            <summary>
            Converts a raw input string to a <see cref="T:RandomizerCore.StringParsing.Token"/> stream.
            </summary>
        </member>
        <member name="M:RandomizerCore.StringParsing.Tokenizer.#ctor(RandomizerCore.StringParsing.IOperatorProvider,System.String,System.Nullable{System.Char})">
            <summary>
            Constructs a tokenizer
            </summary>
            <param name="operatorProvider">The operator definition provider to use when tokenizing</param>
            <param name="input">The input string</param>
            <param name="stringDelimiter">
            If the grammar supports strings, the delimiting character that appears around strings otherwise null.
            </param>
        </member>
        <member name="M:RandomizerCore.StringParsing.Tokenizer.Tokenize">
            <summary>
            Tokenizes the input
            </summary>
            <exception cref="T:RandomizerCore.StringParsing.TokenizingException">When an unrecoverable tokenization error occurs</exception>
        </member>
        <member name="T:RandomizerCore.TempState">
            <summary>
            An enum which tracks whether an operation has been completed, and whether its result will be permanent or not.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
