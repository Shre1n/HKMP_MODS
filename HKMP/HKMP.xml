<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HKMP</name>
    </assembly>
    <members>
        <member name="T:Hkmp.Animation.AnimationClip">
            <summary>
            Enumeration of all possible animation clip names.
            </summary>
        </member>
        <member name="T:Hkmp.Animation.AnimationEffect">
            <summary>
            Abstract base class for animation effects.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationEffect.ServerSettings">
            <summary>
            The current <see cref="F:Hkmp.Animation.AnimationEffect.ServerSettings"/> instance.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.AnimationEffect.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.AnimationEffect.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.AnimationEffect.SetServerSettings(Hkmp.Game.Settings.ServerSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.AnimationEffect.ChangeAttackTypeOfFsm(UnityEngine.GameObject)">
            <summary>
            Locate the damages_enemy FSM and change the attack type to generic. This will avoid the local
            player taking knock back from remote players hitting shields etc.
            </summary>
            <param name="targetObject">The target GameObject to change.</param>
        </member>
        <member name="T:Hkmp.Animation.AnimationManager">
            <summary>
            Class that manages all forms of animation from clients.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.EffectDistanceThreshold">
            <summary>
            The distance threshold for playing certain effects.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.AllowedLoopAnimations">
            <summary>
            Animations that are allowed to loop, because they need to transmit the effect.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.AnimationControllerClipNames">
            <summary>
            Clip names of animations that are handled by the animation controller.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.CrystalDashChargeCancel">
            <summary>
            The animation effect for cancelling the Crystal Dash Charge. Stored since it needs to be called
            manually sometimes.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.Focus">
            <summary>
            The animation effect for the focus. Stored since it needs to be called manually sometimes.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.FocusBurst">
            <summary>
            The animation effect for the focus burst. Stored since it needs to be called manually sometimes.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.FocusEnd">
            <summary>
            The animation effect for the focus end. Stored since it needs to be called manually sometimes.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.NailArtEnd">
            <summary>
            The animation effect for the nail art charge end. Stored since it needs to be called manually sometimes.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.ClipEnumNames">
            <summary>
            Bi-directional lookup table for linking animation clip names with their respective animation clip enum
            values.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager.AnimationEffects">
            <summary>
            Dictionary mapping animation clip enum values to IAnimationEffect instantiations.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._netClient">
            <summary>
            The net client for sending animation updates.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._playerManager">
            <summary>
            The player manager to get player objects.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._lastAnimationClip">
            <summary>
            The last animation clip sent.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._animationControllerWasLastSent">
            <summary>
            Whether the animation controller was responsible for the last clip that was sent.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._stopSendingAnimationUntilSceneChange">
            <summary>
            Whether we should stop sending animations until the scene has changed.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._dashHasEnded">
            <summary>
            Whether the current dash has ended and we can start a new one.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._hasSentCrystalDashEnd">
            <summary>
            Whether the player has sent that they stopped crystal dashing.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._lastChargeEffectActive">
            <summary>
            Whether the charge effect was last update active.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._lastChargedEffectActive">
            <summary>
            Whether the charged effect was last update active
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._chargedEffectStopwatch">
            <summary>
            Stopwatch to keep track of a delay before being able to send another update for the charged effect.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._chargedEndEffectStopwatch">
            <summary>
            Stopwatch to keep track of a delay before being able to send another update for the charged end effect.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.AnimationManager._lastWallSlideActive">
            <summary>
            Whether the player was wall sliding last update.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.OnPlayerAnimationUpdate(System.UInt16,System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Callback method when a player animation update is received. Will update the player object with the new
            animation.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="clipId">The ID of the animation clip.</param>
            <param name="frame">The frame that the animation should play from.</param>
            <param name="effectInfo">A boolean array containing effect info for the animation.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.UpdatePlayerAnimation(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Update the animation of the player sprite animator.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="clipId">The ID of the animation clip.</param>
            <param name="frame">The frame that the animation should play from.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.OnSceneChange(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
            <summary>
            Callback method when the scene changes.
            </summary>
            <param name="oldScene">The old scene instance.</param>
            <param name="newScene">The name scene instance.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.OnAnimationEvent(tk2dSpriteAnimationClip)">
            <summary>
            Callback method when an animation fires in the sprite animator.
            </summary>
            <param name="clip">The sprite animation clip.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.HeroAnimationControllerOnPlay(On.HeroAnimationController.orig_Play,HeroAnimationController,System.String)">
            <summary>
            Callback method on the HeroAnimationController#Play method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The hero animation controller instance.</param>
            <param name="clipName">The name of the clip to play.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.HeroAnimationControllerOnPlayFromFrame(On.HeroAnimationController.orig_PlayFromFrame,HeroAnimationController,System.String,System.Int32)">
            <summary>
            Callback method on the HeroAnimationController#PlayFromFrame method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The hero animation controller instance.</param>
            <param name="clipName">The name of the clip to play.</param>
            <param name="frame">The frame from which to play the clip.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.OnAnimationControllerPlay(System.String,System.Int32)">
            <summary>
            Callback method when the HeroAnimationController plays an animation.
            </summary>
            <param name="clipName">The name of the clip to play.</param>
            <param name="frame">The frame from which to play the clip.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.HeroControllerOnCancelDash(On.HeroController.orig_CancelDash,HeroController)">
            <summary>
            Callback method on the HeroController#CancelDash method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.OnHeroUpdateHook">
            <summary>
            Callback method for when the hero updates.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.Tk2dSpriteAnimatorOnWarpClipToLocalTime(On.tk2dSpriteAnimator.orig_WarpClipToLocalTime,tk2dSpriteAnimator,tk2dSpriteAnimationClip,System.Single)">
            <summary>
            Callback method on the tk2dSpriteAnimator#WarpClipToLocalTime method. This method executes
            the animation event for clips and we want to know when those clips start playing.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The tk2dSpriteAnimator instance.</param>
            <param name="clip">The tk2dSpriteAnimationClip instance.</param>
            <param name="time">The time to warp to.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.Tk2dSpriteAnimatorOnProcessEvents(On.tk2dSpriteAnimator.orig_ProcessEvents,tk2dSpriteAnimator,System.Int32,System.Int32,System.Int32)">
            <summary>
            Callback method on the tk2dSpriteAnimator#OnProcessEvents method. This method executes
            the animation event for clips and we want to know when those clips start playing.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The tk2dSpriteAnimator instance.</param>
            <param name="start">The start of frames to process.</param>
            <param name="last">The last frame to process.</param>
            <param name="direction">The direction in which to process.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.HeroControllerOnDieFromHazard(On.HeroController.orig_DieFromHazard,HeroController,GlobalEnums.HazardType,System.Single)">
            <summary>
            Callback method on the HeroController#DieFromHazard method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
            <param name="hazardType">The type of hazard.</param>
            <param name="angle">The angle at which the hero entered the hazard.</param>
            <returns>An enumerator for this coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.GameManagerOnHazardRespawn(On.GameManager.orig_HazardRespawn,GameManager)">
            <summary>
            Callback method on the GameManager#HazardRespawn method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The GameManager instance.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.OnPlayerDeath(Hkmp.Networking.Packet.Data.GenericClientData)">
            <summary>
            Callback method for when a player death is received.
            </summary>
            <param name="data">The generic client data for this event.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.OnDeath">
            <summary>
            Callback method for when the local player dies.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.PlayDeathAnimation(System.UInt16)">
            <summary>
            Play the death animation for the player with the given ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.HeroControllerOnStart(On.HeroController.orig_Start,HeroController)">
            <summary>
            Callback method on the HeroController#Start method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.HeroControllerOnRelinquishControl(On.HeroController.orig_RelinquishControl,HeroController)">
            <summary>
            Callback method on the HeroController#RelinquishControl method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.SetDescendingDarkLandEffectDelay">
            <summary>
            Sets the delay for the descending dark land effect to trigger, since if we overwrite the
            AnimationTriggerEvent, it will fallback to 0.75s, which is too long. The event normally triggers
            at frame index 7, which is the 8th frame. The FPS of the animation is 20, which means 8/20 = 0.4s
            after the animation starts is when we need to finish the action in the FSM. If this is confusing
            check the "Spell Control" FSM of the knight and look at the "Q2 Land" state.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.RegisterDefenderCrestEffects">
            <summary>
            Register/insert some method in the FSM for the Defenders Crest charm to send appropriate events
            based on when the charm is equipped/unequipped.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.AnimationManager.GetCurrentAnimationClip">
            <summary>
            Get the AnimationClip enum value for the currently playing animation of the local player.
            </summary>
            <returns>An AnimationClip enum value.</returns>
        </member>
        <member name="T:Hkmp.Animation.DamageAnimationEffect">
            <summary>
            Abstract base class for animation effects that can deal damage to other players.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.DamageAnimationEffect.ShouldDoDamage">
            <summary>
            Whether this effect should deal damage.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.DamageAnimationEffect.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.DamageAnimationEffect.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.DamageAnimationEffect.SetShouldDoDamage(System.Boolean)">
            <summary>
            Sets whether this animation effect should deal damage.
            </summary>
            <param name="shouldDoDamage">The new boolean value.</param>
        </member>
        <member name="T:Hkmp.Animation.Effects.AbyssShriek">
            <summary>
            Animation effect class for the Abyss Shriek ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.AbyssShriek.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.AltSlash">
            <summary>
            Animation effect class for the alternative slash animation (when the knight swings their nail).
            This is the slash effect that occurs the most.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.AltSlash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CrystalDash">
            <summary>
            Animation effect class for the Crystal Dash ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDash.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CrystalDashAirCancel">
            <summary>
            Animation effect class for cancelling the Crystal Dash in mid-air.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashAirCancel.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashAirCancel.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CrystalDashChargeBase">
            <summary>
            Abstract base class for animation effect of charging the Crystal Dash ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashChargeBase.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashChargeBase.Play(UnityEngine.GameObject,System.String,System.Int32)">
            <summary>
            Play the animation effect for the given player object, a given state name in the charge FSM and
            the index of the charge effect.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="chargeStateName">The name of the state in the charge FSM.</param>
            <param name="chargeEffectIndex">The index of the charge effect in the FSM.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashChargeBase.PlayAnimation(UnityEngine.GameObject,System.String,System.Int32)">
            <summary>
            Play the animation effect for the given player object, a given state name in the charge FSM and
            the index of the charge effect.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="chargeStateName">The name of the state in the charge FSM.</param>
            <param name="chargeEffectIndex">The index of the charge effect in the FSM.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashChargeBase.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CrystalDashChargeCancel">
            <summary>
            Animation effect class for cancelling the charge of the Crystal Dash ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashChargeCancel.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashChargeCancel.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CrystalDashGroundCharge">
            <summary>
            Animation effect class for charging the Crystal Dash ability on the ground.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashGroundCharge.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashGroundCharge.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CrystalDashHitWall">
            <summary>
            Animation effect class for when a wall is hit with the Crystal Dash ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashHitWall.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashHitWall.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CrystalDashWallCharge">
            <summary>
            Animation effect class for charging the Crystal Dash ability on the wall.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashWallCharge.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CrystalDashWallCharge.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CycloneSlash">
            <summary>
            Animation effect class for the Cyclone Slash ability.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.CycloneSlash._tinkBlockEffect">
            <summary>
            The GameObject for block effect of 'tinking' nails against each other.
            Used as the effect when players are bouncing on the Cyclone Slash.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CycloneSlash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CycloneSlash.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.CycloneSlashEnd">
            <summary>
            Animation effect class for when the Cyclone Slash ability ends.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.CycloneSlashEnd.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.CycloneSlashEnd.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.Dash">
            <summary>
            Animation effect class for a normal left or right dash.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.Dash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DashBase">
            <summary>
            Abstract base class for the animation effect of dashing.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashBase.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashBase.Play(UnityEngine.GameObject,System.Boolean[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Plays the dash animation for the given player object with the given effect info and booleans
            denoting what kind of dash it is.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="effectInfo">A boolean array containing effect info.</param>
            <param name="shadowDash">Whether this dash is a shadow dash.</param>
            <param name="sharpShadow">Whether this dash is a sharp shadow dash.</param>
            <param name="dashDown">Whether this is a downwards dash.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashBase.PlayRechargeAnimation(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Plays the recharge animation of the dash.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="playerEffects">The GameObject representing the player effect object within the player.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashBase.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DashDown">
            <summary>
            Animation effect class for a downwards dash.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashDown.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DashEnd">
            <summary>
            Animation effect class for when a dash ends.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashEnd.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashEnd.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DashSlash">
            <summary>
            Animation effect class for the Dash Slash ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashSlash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DashSlash.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DescendingDarkDown">
            <summary>
            Animation effect class for the movement of going down from a Descending Dark.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DescendingDarkDown.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DescendingDarkLand">
            <summary>
            Animation effect class for the landing after a Descending Dark.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DescendingDarkLand.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DescendingDarkLand.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DescendingDarkLand.PlayEffectInCoroutine(UnityEngine.GameObject)">
            <summary>
            Plays the animation effect in a coroutine so we can wait during calls.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="T:Hkmp.Animation.Effects.DesolateDiveDown">
            <summary>
            Animation effect class for the movement of going down from a Desolate Dive.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DesolateDiveDown.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DesolateDiveLand">
            <summary>
            Animation effect class for the landing of the Desolate Dive.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DesolateDiveLand.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DesolateDiveLand.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DesolateDiveLand.PlayEffectInCoroutine(UnityEngine.GameObject)">
            <summary>
            Plays the animation effect in a coroutine.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="T:Hkmp.Animation.Effects.DiveAntic">
            <summary>
            Animation effect for both Desolate Dive and Descending Dark abilities.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DiveAntic.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DiveAntic.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DownSlash">
            <summary>
            Animation effect class for downwards nail slashes.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DownSlash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DungTrail">
            <summary>
            Animation effect class for the trail of the Defenders Crest charm.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DungTrail.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DungTrail.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.DungTrailEnd">
            <summary>
            Animation effect class when the trail from the Defenders Crest charm ends.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.DungTrailEnd.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.DungTrailEnd.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.FireballBase">
            <summary>
            Abstract base class for animation effect of fireball-based animations (Vengeful Spirit, Shade Soul
            and variations).
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.FireballBase.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.FireballBase.Play(UnityEngine.GameObject,System.Boolean[],System.String,System.Int32,System.Single,System.Boolean,System.Int32)">
            <summary>
            Play the animation effect of the fireball with all necessary parameters.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="effectInfo">A boolean array containing effect info.</param>
            <param name="fireballParentName">State name of the fireball parent state.</param>
            <param name="blastIndex">Index of the blast action.</param>
            <param name="baseFireballSize">Float for the size of the base fireball.</param>
            <param name="noFireballFlip">Whether to not flip the fireball sprite.</param>
            <param name="damage">The damage this spell should do.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.FireballBase.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.FireballBase.StartFluke(PlayMakerFSM,UnityEngine.GameObject,System.Boolean,System.Int32)">
            <summary>
            Start the animation for the flukes from the fireball cast.
            </summary>
            <param name="fireballCast">The FSM for the fireball cast.</param>
            <param name="playerSpells">The GameObject representing the player spells object within the player.</param>
            <param name="facingRight">Whether the spell is cast facing right.</param>
            <param name="damage">The damage of the spell.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.FireballBase.StartDungFluke(UnityEngine.GameObject)">
            <summary>
            Start the animation for the dung fluke.
            </summary>
            <param name="dungFluke">The dung fluke GameObject.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="T:Hkmp.Animation.Effects.Fireball">
            <summary>
            MonoBehaviour for the fireball effect.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball.FireballSpeed">
            <summary>
            Constant float for the speed of the fireball.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball.xDir">
            <summary>
            The x direction (either 1 or -1) of the fireball.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball.hasShamanStoneCharm">
            <summary>
            Whether the caster has the Shaman Stone charm equipped.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball.baseFireballSize">
            <summary>
            The base size of the fireball.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball.noFireballFlip">
            <summary>
            Whether to not flip the fireball.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball.shouldDoDamage">
            <summary>
            Whether the fireball should do damage.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball.damage">
            <summary>
            The damage of the fireball.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball._anim">
            <summary>
            Cached sprite animator for the fireball.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.Fireball._rb">
            <summary>
            Cached 2D rigid body for the fireball.
            </summary>
        </member>
        <member name="T:Hkmp.Animation.Effects.Focus">
            <summary>
            Animation effect class for the focus ability (healing).
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.Focus.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.Focus.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.FocusBurst">
            <summary>
            Animation effect class for the burst after increasing health from healing.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.FocusBurst.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.FocusBurst.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.FocusEnd">
            <summary>
            Animation effect class for the end of the focus animation (either when fully healed or when cancelled).
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.FocusEnd.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.FocusEnd.Play(UnityEngine.GameObject)">
            <summary>
            Plays the animation effect for the given player object.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.FocusEnd.StopAudio(UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.AudioSource)">
            <summary>
            Stop the audio after the focus delay.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="chargeAudio">The GameObject for the charge audio.</param>
            <param name="audioSource">The audio source for the focus audio.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.FocusEnd.PlayEndAnimation(UnityEngine.GameObject)">
            <summary>
            Plays the focus end animation.
            </summary>
            <param name="playerEffects">The GameObject for the player effects of the player.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.FocusEnd.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.GreatSlash">
            <summary>
            Animation effect class for the Great Slash ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.GreatSlash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.GreatSlash.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.HardLand">
            <summary>
            Animation effect class for a hard landing.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.HardLand.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.HardLand.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.HazardDeath">
            <summary>
            Animation effect class for hazard deaths.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.HazardDeath.FadeOutDuration">
            <summary>
            The fade out duration of the effect.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.HazardDeath.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.HazardDeath.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.HazardDeath.FadeObjectOut(UnityEngine.Renderer,System.Single)">
            <summary>
            Fades out the object with the given renderer over a duration.
            </summary>
            <param name="renderer">The renderer to fade out.</param>
            <param name="duration">The duration that the fade-out should take.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.HazardDeath.WaitRespawnFromHazard(UnityEngine.GameObject)">
            <summary>
            Waits the hazard death time and plays the respawn from hazard animations for the player.
            </summary>
            <param name="playerObject">The player object for which to play the animations.</param>
            <returns></returns>
        </member>
        <member name="T:Hkmp.Animation.Effects.HowlingWraiths">
            <summary>
            Animation effect class for the Howling Wraiths ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.HowlingWraiths.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.MonarchWings">
            <summary>
            Animation effect class for the Monarch Wings ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.MonarchWings.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.MonarchWings.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.NailArtCharge">
            <summary>
            Animation effect class for charging a nail art.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.NailArtCharge.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.NailArtCharge.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.NailArtCharged">
            <summary>
            Animation effect class for a fully charged nail art.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.NailArtCharged.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.NailArtCharged.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.NailArtEnd">
            <summary>
            Animation effect class for when a nail art ends.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.NailArtEnd.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.NailArtEnd.Play(UnityEngine.GameObject)">
            <summary>
            Plays the animation effect for the given player object.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.NailArtEnd.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.QuakeDownBase">
            <summary>
            Abstract base class for animation effect for the movement of going down from a either Desolate Dive or Descending Dark.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.QuakeDownBase.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.QuakeDownBase.Play(UnityEngine.GameObject,System.Boolean[],System.String)">
            <summary>
            Plays the quake down animation for the given player object, effect info and name of the trail prefab.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="effectInfo">A boolean array containing effect info.</param>
            <param name="qTrailPrefabName">The name of the quake trail prefab.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.QuakeDownBase.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.ScreamBase">
            <summary>
            Abstract base class for the animation effect of screams (Howling Wraiths and Abyss Shriek).
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.ScreamBase.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.ScreamBase.Play(UnityEngine.GameObject,System.String,System.String,System.Int32)">
            <summary>
            Plays the animation for the given player object.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="screamClipName">The name of the scream audio clip.</param>
            <param name="screamObjectName">The name of the scream object.</param>
            <param name="damage">The damage it should do.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.ScreamBase.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.ShadeSoul">
            <summary>
            Animation effect class for the Shade Soul ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.ShadeSoul.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.ShadowDash">
            <summary>
            Animation effect class for the Shadow Dash ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.ShadowDash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.ShadowDashDown">
            <summary>
            Animation effect class for the downwards Shadow Dash.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.ShadowDashDown.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.ShadowDashSharp">
            <summary>
            Animation effect class for a Sharp Shadow Dash.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.ShadowDashSharp.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.ShadowDashSharpDown">
            <summary>
            Animation effect class for a downwards Sharp Shadow Dash
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.ShadowDashSharpDown.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.Slash">
            <summary>
            Animation effect class for the normal nail slash.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.Slash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.SlashBase">
            <summary>
            Abstract base class for the animation effect of nail slashes.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.Effects.SlashBase._baseScales">
            <summary>
            Base X and Y scales for the various slash types.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.SlashBase.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.SlashBase.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.SlashBase.Play(UnityEngine.GameObject,System.Boolean[],UnityEngine.GameObject,Hkmp.Animation.Effects.SlashBase.SlashType)">
            <summary>
            Plays the slash animation for the given player.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="effectInfo">A boolean array containing effect info.</param>
            <param name="prefab">The nail slash prefab object.</param>
            <param name="type">The type of nail slash.</param>
        </member>
        <member name="T:Hkmp.Animation.Effects.SlashBase.SlashType">
            <summary>
            Enumeration of nail slash types.
            </summary>
        </member>
        <member name="T:Hkmp.Animation.Effects.Stun">
            <summary>
            Animation effect class for getting hit (which is also getting stunned).
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.RemoveExistingEffects(UnityEngine.GameObject)">
            <summary>
            Remove all existing effect for the given player object.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.CancelFocusEffect(UnityEngine.GameObject)">
            <summary>
            Cancel the focus effect for the given player object if it exists.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.HandleShellAnimation(UnityEngine.GameObject)">
            <summary>
            Handle the Baldur Shell animation in case the player has the charm equipped.
            </summary>
            <param name="playerEffects">The GameObject for the player effects.</param>
            <returns>True if the shell animation was handled, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.PlayDamageEffects(UnityEngine.GameObject)">
            <summary>
            Play damage effects for getting hit.
            </summary>
            <param name="playerEffects">The GameObject for the player effects.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.PlayHitSound(UnityEngine.GameObject)">
            <summary>
            Play the getting hit sound.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.PlayCarefreeEffect(UnityEngine.GameObject)">
            <summary>
            Play the Carefree Melody charm effect if the player has it equipped.
            </summary>
            <param name="playerEffects">The GameObject for the player effects.</param>
        </member>
        <member name="M:Hkmp.Animation.Effects.Stun.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.SurfaceIn">
            <summary>
            Animation effect class for entering water/acid.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.SurfaceIn.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Animation.Effects.SurfaceIn.GetEffectInfo">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Animation.Effects.ThornsOfAgony">
            <summary>
            Animation effect class for the Thorns of Agony charm effect.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.ThornsOfAgony.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.ThornsOfAgony.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.UpSlash">
            <summary>
            Animation effect class for the upwards nail swing.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.UpSlash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.VengefulSpirit">
            <summary>
            Animation effect class for the Vengeful Spirit ability.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.VengefulSpirit.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.WallJump">
            <summary>
            Animation effect class for wall jumps.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.WallJump.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.WallSlash">
            <summary>
            Animation effect class for nail slashes while on a wall.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.WallSlash.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.WallSlide">
            <summary>
            Animation effect class for sliding along a wall.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.WallSlide.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.WallSlide.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.Effects.WallSlideEnd">
            <summary>
            Animation effect class for the end of a wall slide.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.Effects.WallSlideEnd.Play(UnityEngine.GameObject,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Animation.Effects.WallSlideEnd.GetEffectInfo">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Animation.IAnimationEffect">
            <summary>
            Interface containing methods for handling animation effects that complement player animation.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.IAnimationEffect.Play(UnityEngine.GameObject,System.Boolean[])">
            <summary>
            Plays the animation effect for the given player object and with additional boolean data array.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="effectInfo">A boolean array containing effect info.</param>
        </member>
        <member name="M:Hkmp.Animation.IAnimationEffect.GetEffectInfo">
            <summary>
            Get the effect info corresponding to this effect.
            </summary>
            <returns>A boolean array containing effect info.</returns>
        </member>
        <member name="M:Hkmp.Animation.IAnimationEffect.SetServerSettings(Hkmp.Game.Settings.ServerSettings)">
            <summary>
            Set the server settings so we can access it while playing the animation.
            </summary>
            <param name="serverSettings">The <see cref="T:Hkmp.Game.Settings.ServerSettings"/> instance.</param>
        </member>
        <member name="T:Hkmp.Animation.ParryableEffect">
            <summary>
            Represents an animation effect that can be parried, such as nail slashes or nail arts.
            </summary>
        </member>
        <member name="F:Hkmp.Animation.ParryableEffect.NailClashTink">
            <summary>
            The FSM for the nail parry effect.
            </summary>
        </member>
        <member name="M:Hkmp.Animation.ParryableEffect.AddParryFsm(UnityEngine.GameObject)">
            <summary>
            Adds the FSM responsible for parrying to the given game object.
            Does additional modification to the FSM to make it suitable for PvP.
            </summary>
            <param name="target">The GameObject that the FSM should be added to.</param>
        </member>
        <member name="T:Hkmp.Api.Addon.Addon">
            <summary>
            Abstract base class for addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Addon.Addon.MaxNameLength">
            <summary>
            The maximum length of the name string for an addon.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Addon.Addon.MaxVersionLength">
            <summary>
            The maximum length of the version string for an addon.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Addon.Addon.Id">
            <summary>
            The internal ID assigned to this addon.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Addon.Addon.NetworkSender">
            <summary>
            The network sender object if it has been registered.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Addon.Addon.NetworkReceiver">
            <summary>
            The network receiver object if it has been registered.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Addon.AddonLoader">
            <summary>
            Abstract base class for loading addons from file.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Addon.AddonLoader.AssemblyFilePattern">
            <summary>
            The file pattern to look for when obtaining candidate files to load.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Addon.AddonLoader.GetCurrentDirectoryPath">
            <summary>
            The directory in which to look for assembly files.
            </summary>
            <returns>A string denoting the path of the current directory.</returns>
        </member>
        <member name="M:Hkmp.Api.Addon.AddonLoader.GetAssemblyPaths">
            <summary>
            Get the paths for all assembly files in the HKMP directory.
            </summary>
            <returns>A string array containing file paths.</returns>
        </member>
        <member name="M:Hkmp.Api.Addon.AddonLoader.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Get all loadable types from the given assembly.
            </summary>
            <param name="assembly">The assembly instance to get the types from.</param>
            <returns>An enumerator that traverses the loadable types.</returns>
        </member>
        <member name="M:Hkmp.Api.Addon.AddonLoader.LoadAddons``1">
            <summary>
            Load all addons given their type and given an API interface instance.
            </summary>
            <typeparam name="TAddon">The type of the addon.</typeparam>
            <returns>A list of addon instance of type TAddon.</returns>
        </member>
        <member name="T:Hkmp.Api.Client.ClientAddon">
            <summary>
            Abstract base class for a client addon. Inheriting this will allow the addon class to be loaded.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.ClientAddon._clientApi">
            <summary>
            The client API interface.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.ClientAddon.ClientApi">
            <inheritdoc cref="F:Hkmp.Api.Client.ClientAddon._clientApi" />
        </member>
        <member name="P:Hkmp.Api.Client.ClientAddon.Logger">
            <summary>
            The logger for logging information.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.ClientAddon.Name">
            <summary>
            The name (and also identifier) of the addon.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.ClientAddon.Version">
            <summary>
            The version (also identifying) of the addon.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.ClientAddon.NeedsNetwork">
            <summary>
            Whether this addon requires network access.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddon.InternalInitialize(Hkmp.Api.Client.IClientApi)">
            <summary>
            Internal method for initializing the addon with the API.
            </summary>
            <param name="clientApi">The client API instance.</param>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddon.Initialize(Hkmp.Api.Client.IClientApi)">
            <summary>
            Called when the addon is loaded and can be initialized.
            </summary>
            <param name="clientApi">The client API interface.</param>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddon.GetName">
            <summary>
            Internal method for obtaining the length-valid addon name.
            </summary>
            <returns>The name of the addon or a substring of the first valid characters of its name.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddon.GetVersion">
            <summary>
            Internal method for obtaining the length-valid addon version.
            </summary>
            <returns>The version of the addon or a substring of the first valid characters of its version.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddon.RegisterAddon(Hkmp.Api.Client.ClientAddon)">
            <summary>
            Register a client addon to be initialized and managed by HKMP.
            This method can only be called during the initialization of mods.
            After all mods have been initialized, this will throw an exception.
            </summary>
            <param name="clientAddon">The client addon to be registered.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given addon is null.</exception>
        </member>
        <member name="T:Hkmp.Api.Client.ClientAddonLoader">
            <summary>
            Addon loader for the client-side.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonLoader.LoadAddons">
            <summary>
            Loads all client addons.
            </summary>
            <returns>A list of ClientAddon instances.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonLoader.GetCurrentDirectoryPath">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Api.Client.ClientAddonManager">
            <summary>
            Manager class for client addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.ClientAddonManager.RegisteredAddons">
            <summary>
            A list of addons that were registered by an assembly outside of HKMP. These addons still
            need to be initialized with the client API.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.ClientAddonManager._hasLoaded">
            <summary>
            A boolean indicating whether addon loading has already occurred. If so, it is not possible to
            register new addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.ClientAddonManager._clientApi">
            <summary>
            The client API instance to pass to addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.ClientAddonManager._modSettings">
            <summary>
            The mod settings instance for storing disabled addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.ClientAddonManager._addons">
            <summary>
            A list of all loaded addons, the order is important as it is the exact order
            in which we sent it to the server and are expected to act on when receiving a response.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.ClientAddonManager._networkedAddons">
            <summary>
            A dictionary of all networked addons indexed by name and version.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.#cctor">
            <summary>
            Static constructor that initializes the list for addons registered outside of HKMP.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.#ctor(Hkmp.Api.Client.ClientApi,Hkmp.Game.Settings.ModSettings)">
            <summary>
            Construct the addon manager with the client API.
            </summary>
            <param name="clientApi">The client API instance.</param>
            <param name="modSettings">The mod setting instance.</param>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.LoadAddons">
            <summary>
            Start loading addons from assemblies and initialize all known addons (both loaded and registered).
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.TryGetNetworkedAddon(System.String,System.String,Hkmp.Api.Client.ClientAddon@)">
            <summary>
            Try and get the networked client addon with the given name and version.
            </summary>
            <param name="name">The name of the addon.</param>
            <param name="version">The version of the addon.</param>
            <param name="addon">The client addon if it exists, null otherwise.</param>
            <returns>True if the client addon was found, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.GetNetworkedAddonData">
            <summary>
            Get a list of addon data for all networked addons.
            </summary>
            <returns>A list of AddonData instances.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.GetLoadedAddons">
            <summary>
            Get a read-only list of all loaded addons.
            </summary>
            <returns>A read-only list of <see cref="T:Hkmp.Api.Client.ClientAddon"/> instances.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.UpdateNetworkedAddonOrder(System.Byte[])">
            <summary>
            Updates the order of all networked addons according to the given order.
            </summary>
            <param name="addonOrder">A byte array containing the IDs the addons should have.</param>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.ClearNetworkedAddonIds">
            <summary>
            Clears the IDs of all networked addons.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.TryEnableAddon(System.String)">
            <summary>
            Try to enable the addon with the given name.
            </summary>
            <param name="addonName">The name of the addon to enable.</param>
            <returns>True if the addon with the given name was enabled; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.TryDisableAddon(System.String)">
            <summary>
            Try to disable the addon with the given name.
            </summary>
            <param name="addonName">The name of the addon to disable.</param>
            <returns>True if the addon with the given name was disable; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.ClientAddonManager.RegisterAddon(Hkmp.Api.Client.ClientAddon)">
            <summary>
            Register an addon class from outside of HKMP.
            </summary>
            <param name="clientAddon">The client addon instance.</param>
        </member>
        <member name="T:Hkmp.Api.Client.ClientApi">
            <summary>
            Client API interface implementation.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.ClientApi.ClientManager">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Api.Client.ClientApi.CommandManager">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Api.Client.ClientApi.UiManager">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Api.Client.ClientApi.NetClient">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Api.Client.ClientApi.EventAggregator">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Api.Client.IChatBox">
            <summary>
            The message box in the bottom right of the screen that shows information related to HKMP.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IChatBox.AddMessage(System.String)">
            <summary>
            Add a message to the chat box.
            </summary>
            <param name="message">The string containing the message.</param>
        </member>
        <member name="T:Hkmp.Api.Client.IClientApi">
            <summary>
            The client API.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientApi.ClientManager">
            <summary>
            Client manager that handles the local client and related data.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientApi.CommandManager">
            <summary>
            Command manager for registering client-side commands.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientApi.UiManager">
            <summary>
            UI manager that handles all UI related interaction.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientApi.NetClient">
            <summary>
            The net client for all network-related interaction.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientApi.EventAggregator">
            <summary>
            Inter-addon communication event bus.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Client.IClientManager">
            <summary>
            Client manager that handles the local client and related data.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientManager.MapManager">
            <summary>
            Class that manages player locations on the in-game map.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientManager.Username">
            <summary>
            The current username of the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientManager.Team">
            <summary>
            The current team of the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientManager.Players">
            <summary>
            A read-only collection of all connected players.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IClientManager.Disconnect">
            <summary>
            Disconnect the local client from the server.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IClientManager.GetPlayer(System.UInt16)">
            <summary>
            Get a specific player by their ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <returns>The player with the given ID, or null if no such player exists.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.IClientManager.TryGetPlayer(System.UInt16,Hkmp.Api.Client.IClientPlayer@)">
            <summary>
            Try to get a specific player by their ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="player">The parameter that will contain the player if it exists.</param>
            <returns>True if the player was found, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.IClientManager.ChangeTeam(Hkmp.Game.Team)">
            <summary>
            Changes the team of the local player.
            </summary>
            <param name="team">The team value.</param>
        </member>
        <member name="M:Hkmp.Api.Client.IClientManager.ChangeSkin(System.Byte)">
            <summary>
            Changes the skin of the local player.
            </summary>
            <param name="skinId">The ID of the skin.</param>
        </member>
        <member name="E:Hkmp.Api.Client.IClientManager.ConnectEvent">
            <summary>
            Event that is called when the local user connects to a server.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Client.IClientManager.DisconnectEvent">
            <summary>
            Event that is called when the local user disconnects from the server.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Client.IClientManager.PlayerConnectEvent">
            <summary>
            Event that is called when another player connects to the server.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Client.IClientManager.PlayerDisconnectEvent">
            <summary>
            Event that is called when another player disconnects from the server.
            IClientPlayer could possibly be null.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Client.IClientManager.PlayerEnterSceneEvent">
            <summary>
            Event that is called when another player enters the local scene.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Client.IClientManager.PlayerLeaveSceneEvent">
            <summary>
            Event that is called when another player leaves the local scene.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Client.IClientPlayer">
            <summary>
            A class containing all the relevant data managed by the client about a player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientPlayer.Id">
            <summary>
            The ID of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientPlayer.Username">
            <summary>
            The username of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientPlayer.IsInLocalScene">
            <summary>
            Whether the player is in our local scene.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientPlayer.PlayerContainer">
            <summary>
            The Unity game object for the player container. This container contains all player relevant
            game objects, such as the player object, effects, spells, animations etc.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientPlayer.PlayerObject">
            <summary>
            The Unity game object for the player object.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientPlayer.Team">
            <summary>
            The current team of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IClientPlayer.SkinId">
            <summary>
            The ID of the current skin of the player.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Client.IMapManager">
            <summary>
            Map manager that handles data related to local map icons.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IMapManager.TryGetEntry(System.UInt16,Hkmp.Api.Client.IPlayerMapEntry@)">
            <summary>
            Try to get a map entry by a player's ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="playerMapEntry">The parameter that will contain the map entry if it exists.</param>
            <returns>True if the map entry was found, false otherwise.</returns>
        </member>
        <member name="T:Hkmp.Api.Client.IPlayerMapEntry">
            <summary>
            An entry for an icon of a player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IPlayerMapEntry.HasMapIcon">
            <summary>
            Whether the player has an icon.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IPlayerMapEntry.Position">
            <summary>
            The position of the icon.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Client.IUiManager">
            <summary>
            UI manager that handles all UI related interaction.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.IUiManager.ChatBox">
            <summary>
            The message box that shows information related to HKMP.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IUiManager.DisableTeamSelection">
            <summary>
            Disables the ability for the user to select a team.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IUiManager.EnableTeamSelection">
            <summary>
            Enables the ability for the user to select a team if it was disabled.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IUiManager.DisableSkinSelection">
            <summary>
            Disables the ability for the user to select a skin.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.IUiManager.EnableSkinSelection">
            <summary>
            Enables the ability for the user to select a skin if it was disabled.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.AddonNetworkTransmitter">
            <summary>
            Static class for addon network transmitters.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.AddonNetworkTransmitter.ConstructPacketIdLookup``1">
            <summary>
            Construct a packet ID lookup given the generic type.
            </summary>
            <typeparam name="T">The type parameter to construct the lookup with. This should extend the
            enum class</typeparam>
            <returns>A bi-directional lookup from the generic type to a byte value.</returns>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.AddonNetworkTransmitter`1">
            <summary>
            Abstract base class for classes that transmit (send/receive) over the network.
            </summary>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.AddonNetworkTransmitter`1.PacketIdLookup">
            <summary>
            A lookup for packet IDs and corresponding raw byte values.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver">
            <summary>
            Base class for client addon network receivers.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver.ClientAddon">
            <summary>
            The instance of the client addon that this network receiver belongs to.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver.PacketManager">
            <summary>
            The packet manager used to register packet handlers for the addon.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver.PacketHandlers">
            <summary>
            Dictionary containing packet handlers for this addon.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver.PacketInstantiator">
            <summary>
            The packet instantiator for this network receiver.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver.PacketIdSize">
            <summary>
            The size of the packet ID space.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver.CommitPacketHandlers">
            <summary>
            Commit all packet handlers in this class to the packet manager using the (now assigned) client addon ID.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the client addon ID is unassigned.</exception>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver`1">
            <summary>
            Implementation of client-side network receiver for addons.
            </summary>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver`1._packetIdLookup">
            <summary>
            A lookup for packet IDs and corresponding raw byte values.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver`1.RegisterPacketHandler(`0,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver`1.RegisterPacketHandler``1(`0,Hkmp.Networking.Packet.GenericClientPacketHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver`1.DeregisterPacketHandler(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.ClientAddonNetworkReceiver`1.AssignAddonPacketInfo(System.Func{`0,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Assign the addon packet info in the base ClientAddonNetworkReceiver class for later use.
            </summary>
            <param name="packetInstantiator"></param>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1">
            <summary>
            Implementation of client-side network sender for addons.
            </summary>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1.NotConnectedMsg">
            <summary>
            Message for the exception when the client is not connected.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1.InvalidPacketIdMsg">
            <summary>
            Message for the exception when the given packet ID is invalid.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1.NoClientAddonId">
            <summary>
            Message for the exception when the client addon has no ID.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1._netClient">
            <summary>
            The net client used to send data.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1._clientAddon">
            <summary>
            The instance of the client addon that this network sender belongs to.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1._packetIdSize">
            <summary>
            The size of the packet ID space.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1.SendSingleData(`0,Hkmp.Networking.Packet.IPacketData)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.ClientAddonNetworkSender`1.SendCollectionData``1(`0,``0)">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.IClientAddonNetworkReceiver`1">
            <summary>
            Client-side network receiver for addons.
            </summary>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.IClientAddonNetworkReceiver`1.RegisterPacketHandler(`0,System.Action)">
            <summary>
            Registers a data independent handler for a packet with a specific ID.
            The given action will not get the packet data as parameter.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="handler">The action to be used as handler.</param>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.IClientAddonNetworkReceiver`1.RegisterPacketHandler``1(`0,Hkmp.Networking.Packet.GenericClientPacketHandler{``0})">
            <summary>
            Registers a handler for a packet with specific type and ID.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="handler">The delegate instance with packet data parameter to be used as handler.</param>
            <typeparam name="TPacketData">The type of the packet data.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.IClientAddonNetworkReceiver`1.DeregisterPacketHandler(`0)">
            <summary>
            De-registers the handler for the given packet ID.
            </summary>
            <param name="packetId">The packet ID.</param>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.IClientAddonNetworkSender`1">
            <summary>
            Client-side network sender for addons.
            </summary>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.IClientAddonNetworkSender`1.SendSingleData(`0,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Send a single instance of IPacketData over the network with the given packet ID.
            Calling this method again with the same packet ID will overwrite existing data for that packet ID
            if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.IClientAddonNetworkSender`1.SendCollectionData``1(`0,``0)">
            <summary>
            Send an instance of IPacketData in a collection over the network with the given packet ID.
            Calling this method again with the same packet ID will add the instance of IPacketData to the existing
            collection if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
            <typeparam name="TPacketData">The type of the packetData parameter.</typeparam>
        </member>
        <member name="T:Hkmp.Api.Client.Networking.INetClient">
            <summary>
            The net client for all network-related interaction.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.Networking.INetClient.IsConnected">
            <summary>
            Whether the client is currently connected to a server.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.INetClient.GetNetworkSender``1(Hkmp.Api.Client.ClientAddon)">
            <summary>
            Get the network sender interface to send data over the network. Calling this method
            a second time will yield the same network sender instance if provided with the same
            generic parameter. Supplying a different generic parameter on subsequent calls will
            throw an exception as it is not supported.
            </summary>
            <param name="addon">The addon instance for which to get the sender.</param>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
            <returns>The network sender interface.</returns>
        </member>
        <member name="M:Hkmp.Api.Client.Networking.INetClient.GetNetworkReceiver``1(Hkmp.Api.Client.ClientAddon,System.Func{``0,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Get the network receiver interface to register callbacks for receiving data over the network.
            </summary>
            <param name="addon">The addon instance for which to get the receiver.</param>
            <param name="packetInstantiator">A function that instantiates IPacketData instances from a
            packet ID.</param>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
            <returns>The network receiver interface.</returns>
        </member>
        <member name="T:Hkmp.Api.Client.TogglableClientAddon">
            <summary>
            Abstract class for a client addon that can be toggled. Extends <see cref="T:Hkmp.Api.Client.ClientAddon"/>.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Client.TogglableClientAddon._disabled">
            <summary>
            Whether this addon is disabled, meaning network is restricted
            </summary>
        </member>
        <member name="P:Hkmp.Api.Client.TogglableClientAddon.Disabled">
            <inheritdoc cref="F:Hkmp.Api.Client.TogglableClientAddon._disabled" />
        </member>
        <member name="M:Hkmp.Api.Client.TogglableClientAddon.OnEnable">
            <summary>
            Callback method for when this addon gets enabled.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Client.TogglableClientAddon.OnDisable">
            <summary>
            Callback method for when this addon gets disabled.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Command.Client.IClientCommand">
            <summary>
            Interface for client-side commands.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Command.Client.IClientCommand.Execute(System.String[])">
            <summary>
            Executes the command with the given arguments.
            </summary>
            <param name="arguments">A string array containing the arguments for this command. The first argument
            is the command trigger or alias.</param>
        </member>
        <member name="T:Hkmp.Api.Command.Client.IClientCommandManager">
            <summary>
            Interface for managing commands for client-side.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Command.ICommand">
            <summary>
            Interface for client and server-side commands.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Command.ICommand.Trigger">
            <summary>
            The trigger for this command, can include command prefix (such as "/").
            </summary>
        </member>
        <member name="P:Hkmp.Api.Command.ICommand.Aliases">
            <summary>
            Aliases for this command, can include command prefix (such as "/").
            </summary>
        </member>
        <member name="T:Hkmp.Api.Command.ICommandManager`1">
            <summary>
            Interface for managing commands for client and server-side.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Command.ICommandManager`1.RegisterCommand(`0)">
            <summary>
            Register a given command with at least its trigger. Aliases may or may not be registered depending on
            whether they are available.
            </summary>
            <param name="clientCommand">The command implementation.</param>
            <exception cref="T:System.Exception">Thrown if a command with that trigger is already registered.</exception>
        </member>
        <member name="M:Hkmp.Api.Command.ICommandManager`1.DeregisterCommand(`0)">
            <summary>
            Deregister a given command with at least its trigger. Aliases will be de-registered if they were registered
            for this command.
            </summary>
            <param name="clientCommand">The command implementation.</param>
            <exception cref="T:System.Exception">Thrown if the trigger of the command was registered by a different command.</exception>
        </member>
        <member name="T:Hkmp.Api.Command.IPlayerCommandSender">
            <summary>
            Interface for a player that can execute commands.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Command.IPlayerCommandSender.Id">
            <summary>
            The ID of the player.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Command.Server.ICommandSender">
            <summary>
            Interface for an entity that can execute commands.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Command.Server.ICommandSender.IsAuthorized">
            <summary>
            Whether this user is authorized, meaning they have high-level permission.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Command.Server.ICommandSender.Type">
            <summary>
            The type of this command sender.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Command.Server.ICommandSender.SendMessage(System.String)">
            <summary>
            Send a message to this command sender.
            </summary>
            <param name="message">The message in string form.</param>
        </member>
        <member name="T:Hkmp.Api.Command.Server.CommandSenderType">
            <summary>
            Enum containing all possible types of command senders.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Command.Server.CommandSenderType.Player">
            <summary>
            Player as sender of a command.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Command.Server.CommandSenderType.Console">
            <summary>
            Console as sender of a command.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Command.Server.IServerCommand">
            <summary>
            Interface for server-side commands.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Command.Server.IServerCommand.AuthorizedOnly">
            <summary>
            Whether this command can only be executed by an authorized player.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Command.Server.IServerCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <summary>
            Executes the command with the given arguments.
            </summary>
            <param name="commandSender">The command sender that executed this command.</param>
            <param name="arguments">A string array containing the arguments for this command. The first argument
            is the command trigger or alias.</param>
        </member>
        <member name="T:Hkmp.Api.Command.Server.IServerCommandManager">
            <summary>
            Interface for managing commands for server-side.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Eventing.Cancellable">
            <summary>
            Represents an event that can be cancelled.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Eventing.Cancellable.Cancelled">
            <summary>
            The cancellation state of the event. A cancelled event will not execute on the server.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Eventing.IEventAggregator">
            <summary>
            Inter-mod event aggregation service. For sending events between mods on the same system (e.g. from one
            client-side mod to another client-side mod on the same device). This will not send events across the
            network connection.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Eventing.IEventAggregator.GetEvent``1">
            <summary>
            Returns an event of a given type.
            </summary>
            <typeparam name="TEventType">The type of the event to return.</typeparam>
            <returns>An <see cref="T:Hkmp.Api.Eventing.InterEvent"/> instance.</returns>
        </member>
        <member name="T:Hkmp.Api.Eventing.InterEvent">
            <summary>
            Base type for all inter-mod events (e.g. from one client-side mod to another client-side mod on the same device).
            </summary>
        </member>
        <member name="F:Hkmp.Api.Eventing.InterEvent._subscriptions">
            <summary>
            List containing event subscriptions for this event.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Eventing.InterEvent.Unsubscribe(Hkmp.Api.Eventing.SubscriptionToken)">
            <summary>
            Unsubscribes an action from the event by its token.
            </summary>
            <param name="token">The token that denotes the subscription.</param>
        </member>
        <member name="M:Hkmp.Api.Eventing.InterEvent.SubscribeInternal(System.Action{System.Object})">
            <summary>
            Internal implementation of subscribe, with types erased.
            </summary>
            <param name="strategy">The strategy to execute when an event is triggered.</param>
            <returns>A token that represents this subscription and can be used to unsubscribe.</returns>
        </member>
        <member name="M:Hkmp.Api.Eventing.InterEvent.PublishInternal(System.Object)">
            <summary>
            Internal implementation of publish, with types erased.
            </summary>
            <param name="payload">The payload object to publish.</param>
        </member>
        <member name="T:Hkmp.Api.Eventing.PubSubEvent`1">
            <summary>
            A publish-subscribe style event built off <see cref="T:Hkmp.Api.Eventing.InterEvent"/> with a typed payload.
            </summary>
            <typeparam name="TPayload">The type of the payload.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Eventing.PubSubEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Subscribes to the event.
            </summary>
            <param name="action">The action to execute when the event triggers.</param>
            <returns>A token that represents this subscription and can be used to unsubscribe.</returns>
        </member>
        <member name="M:Hkmp.Api.Eventing.PubSubEvent`1.Publish(`0)">
            <summary>
            Publishes a payload to the subscribers of the event type.
            </summary>
            <param name="payload">The payload to publish.</param>
        </member>
        <member name="T:Hkmp.Api.Eventing.ServerEvent">
            <summary>
            Abstract base class for server-side events.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Eventing.ServerEvents.IPlayerChatEvent">
            <summary>
            Event for when a player sends a chat message.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Eventing.ServerEvents.IPlayerChatEvent.Player">
            <summary>
            The player that sent the chat message.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Eventing.ServerEvents.IPlayerChatEvent.Message">
            <summary>
            The message that was sent.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Eventing.SubscriptionToken">
            <summary>
            Subscription token for an event. Allows you to unsubscribe from an event.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Eventing.SubscriptionToken._guid">
            <summary>
            Unique identifier for this token.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Eventing.SubscriptionToken._unsubscribeAction">
            <summary>
            The action that should be executed on unsubscribe.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Eventing.SubscriptionToken.#ctor(System.Action{Hkmp.Api.Eventing.SubscriptionToken})">
            <summary>
            Constructor for the subscription token with a given unsubscribe action.
            </summary>
            <param name="unsubscribeAction">The action that should be executed on unsubscribe.</param>
        </member>
        <member name="M:Hkmp.Api.Eventing.SubscriptionToken.Equals(Hkmp.Api.Eventing.SubscriptionToken)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Api.Eventing.SubscriptionToken.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Api.Eventing.SubscriptionToken.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Api.Eventing.SubscriptionToken.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Api.Server.IServerApi">
            <summary>
            The server API.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerApi.ServerManager">
            <summary>
            The interface for the server manager.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerApi.CommandManager">
            <summary>
            Command manager for registering server-side commands.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerApi.NetServer">
            <summary>
            The net server for all network-related interaction.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerApi.EventAggregator">
            <summary>
            Inter-addon communication event bus.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Server.IServerManager">
            <summary>
            The server manager that handles server state.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerManager.Players">
            <summary>
            A read-only collection of all connected players.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerManager.ServerSettings">
            <summary>
            A read-only <see cref="P:Hkmp.Api.Server.IServerManager.ServerSettings"/> that contains the settings related to gameplay.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.IServerManager.GetPlayer(System.UInt16)">
            <summary>
            Get a specific player by their ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <returns>The player with the given ID, or null if no such player exists.</returns>
        </member>
        <member name="M:Hkmp.Api.Server.IServerManager.TryGetPlayer(System.UInt16,Hkmp.Api.Server.IServerPlayer@)">
            <summary>
            Try to get a specific player by their ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="player">The parameter that will contain the player if it exists.</param>
            <returns>True if the player was found, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Api.Server.IServerManager.SendMessage(System.UInt16,System.String)">
            <summary>
            Send a message to the player with the given ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="message">The message as a string with length &lt; 256.</param>
            <exception cref="T:System.ArgumentException">Thrown if a player with the given ID could not be found,
            the message is null, the length of the message is greater than 255 or the message contains
            invalid characters.</exception>
        </member>
        <member name="M:Hkmp.Api.Server.IServerManager.SendMessage(Hkmp.Api.Server.IServerPlayer,System.String)">
            <summary>
            Send a message to the given player.
            </summary>
            <param name="player">The player to send to.</param>
            <param name="message">The message as a string with length &lt; 256.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given player is null, the message is null, the length
            of the message is greater than 255 or the message contains invalid characters.</exception>
        </member>
        <member name="M:Hkmp.Api.Server.IServerManager.BroadcastMessage(System.String)">
            <summary>
            Broadcast a message to all connected players.
            </summary>
            <param name="message">The message as a string with length &lt; 256.</param>
            <exception cref="T:System.ArgumentException">Thrown if the message is null or the length of the message is
            greater than 255 or the message contains invalid characters.</exception>
        </member>
        <member name="M:Hkmp.Api.Server.IServerManager.DisconnectPlayer(System.UInt16,Hkmp.Networking.Packet.Data.DisconnectReason)">
            <summary>
            Disconnect the player with the given ID for the given reason.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="reason">The reason for the disconnect.</param>
        </member>
        <member name="M:Hkmp.Api.Server.IServerManager.ApplyServerSettings(Hkmp.Game.Settings.ServerSettings)">
            <summary>
            Apply the given <see cref="P:Hkmp.Api.Server.IServerManager.ServerSettings"/> to the game. Will copy all property values to the used
            <see cref="P:Hkmp.Api.Server.IServerManager.ServerSettings"/> instance and network the changes to all players.
            </summary>
            <param name="serverSettings">The <see cref="P:Hkmp.Api.Server.IServerManager.ServerSettings"/> to apply.</param>
        </member>
        <member name="E:Hkmp.Api.Server.IServerManager.PlayerConnectEvent">
            <summary>
            Event that is called when a player connects to the server.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Server.IServerManager.PlayerDisconnectEvent">
            <summary>
            Event that is called when a player disconnects from the server.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Server.IServerManager.PlayerEnterSceneEvent">
            <summary>
            Event that is called when a player enters a scene.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Server.IServerManager.PlayerLeaveSceneEvent">
            <summary>
            Event that is called when a players leaves a scene.
            </summary>
        </member>
        <member name="E:Hkmp.Api.Server.IServerManager.PlayerChatEvent">
            <summary>
            Event that is called when a player sends a chat message.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Server.IServerPlayer">
            <summary>
            A class containing all the relevant data managed by the server about a player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.Id">
            <summary>
            The ID of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.IpAddressString">
            <summary>
            The IP address of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.AuthKey">
            <summary>
            The authentication key of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.IsAuthorized">
            <summary>
            Whether this player is authorized, meaning that they have high-level permission.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.Username">
            <summary>
            The username of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.CurrentScene">
            <summary>
            The name of the scene the player is currently in.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.Position">
            <summary>
            The last known position of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.HasMapIcon">
            <summary>
            Whether the player has an active map icon.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.MapPosition">
            <summary>
            The last known map position of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.Scale">
            <summary>
            The scale of the player as a bool indicating whether they should be flipped.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.AnimationId">
            <summary>
            The ID of the last animation of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.Team">
            <summary>
            The current team of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerPlayer.SkinId">
            <summary>
            The ID of the skin of the player.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Server.IServerSettings">
            <summary>
            Settings related to gameplay that is shared between server and clients.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.IsPvpEnabled">
            <summary>
            Whether player vs. player damage is enabled.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.IsBodyDamageEnabled">
            <summary>
            Whether player object will damage the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.AlwaysShowMapIcons">
            <summary>
            Whether to always show map icons.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.OnlyBroadcastMapIconWithWaywardCompass">
            <summary>
            Whether to only broadcast the map icon of a player if they have wayward compass equipped.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.DisplayNames">
            <summary>
            Whether to display player names above the player objects.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.TeamsEnabled">
            <summary>
            Whether teams are enabled.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.AllowSkins">
            <summary>
            Whether skins are allowed.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.AllowParries">
            <summary>
            Whether other player's attacks can be parried.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.NailDamage">
            <summary>
            The damage that nail swings from other players deal to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.GrubberflyElegyDamage">
            <summary>
            The damage that the beam from Grubberfly's Elegy from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.VengefulSpiritDamage">
            <summary>
            The damage that Vengeful Spirit from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.ShadeSoulDamage">
            <summary>
            The damage that Shade Soul from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.DesolateDiveDamage">
            <summary>
            The damage that Desolate Dive from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.DescendingDarkDamage">
            <summary>
            The damage that Descending Dark from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.HowlingWraithDamage">
            <summary>
            The damage that Howling Wraiths from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.AbyssShriekDamage">
            <summary>
            The damage that Abyss Shriek from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.GreatSlashDamage">
            <summary>
            The damage that Great Slash from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.DashSlashDamage">
            <summary>
            The damage that Dash Slash from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.CycloneSlashDamage">
            <summary>
            The damage that Cyclone Slash from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.SporeShroomDamage">
            <summary>
            The damage that the Spore Shroom cloud from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.SporeDungShroomDamage">
            <summary>
            The damage that the Spore Shroom cloud with Defenders crest from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.ThornOfAgonyDamage">
            <summary>
            The damage that the activation of Thorns of Agony from other players deals to the local player.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.IServerSettings.SharpShadowDamage">
            <summary>
            The damage that a Sharp Shadow dash from others players deals to the local player.
            </summary>
        </member>
        <member name="T:Hkmp.Api.Server.Networking.INetServer">
            <summary>
            The net server for all network-related interaction.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.Networking.INetServer.IsStarted">
            <summary>
            Whether the server is currently started.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.INetServer.GetNetworkSender``1(Hkmp.Api.Server.ServerAddon)">
            <summary>
            Get the network sender interface to send data over the network. Calling this method
            a second time will yield the same network sender instance if provided with the same
            generic parameter. Supplying a different generic parameter on subsequent calls will
            throw an exception as it is not supported.
            </summary>
            <param name="addon">The addon instance for which to get the sender.</param>
            <typeparam name="TPacketId">The network sender interface.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.INetServer.GetNetworkReceiver``1(Hkmp.Api.Server.ServerAddon,System.Func{``0,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Get the network receiver interface to register callbacks for receiving data over the network.
            </summary>
            <param name="addon">The addon instance for which to get the receiver.</param>
            <param name="packetInstantiator">A function that instantiates IPacketData instances from a
            packet ID.</param>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
            <returns>The network receiver interface.</returns>
        </member>
        <member name="T:Hkmp.Api.Server.Networking.IServerAddonNetworkReceiver`1">
            <summary>
            Server-side network receiver for addons.
            </summary>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkReceiver`1.RegisterPacketHandler(`0,System.Action{System.UInt16})">
            <summary>
            Registers a data independent handler for a packet with a specific ID.
            The given action will not get the packet data as parameter, but will get the player ID.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="handler">The action with player ID parameter to be used as handler.</param>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkReceiver`1.RegisterPacketHandler``1(`0,Hkmp.Networking.Packet.GenericServerPacketHandler{``0})">
            <summary>
            Registers a handler for a packet with a specific ID.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="handler">The delegate instance with packet data parameter to be used as handler.</param>
            <typeparam name="TPacketData">The type of the packet data.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkReceiver`1.DeregisterPacketHandler(`0)">
            <summary>
            De-registers the handler for the given packet ID.
            </summary>
            <param name="packetId">The packet ID.</param>
        </member>
        <member name="T:Hkmp.Api.Server.Networking.IServerAddonNetworkSender`1">
            <summary>
            Server-side network sender for addons.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkSender`1.SendSingleData(`0,Hkmp.Networking.Packet.IPacketData,System.UInt16)">
            <summary>
            Send a single instance of IPacketData with the given packet ID over the network to the player
            with the given ID. Calling this method again with the same packet ID will overwrite existing
            data for that packet if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
            <param name="playerId">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkSender`1.SendSingleData(`0,Hkmp.Networking.Packet.IPacketData,System.UInt16[])">
            <summary>
            Send a single instance of IPacketData with the given packet ID over the network to the players
            with the given IDs. Calling this method again with the same packet ID will overwrite existing
            data for that packet if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
            <param name="playerIds">The IDs of the players.</param>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkSender`1.BroadcastSingleData(`0,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Send a single instance of IPacketData with the given packet ID over the network to all connected
            players. Calling this method again with the same packet ID will overwrite existing
            data for that packet if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkSender`1.SendCollectionData``1(`0,``0,System.UInt16)">
            <summary>
            Send an instance of IPacketData in a collection with the given packet ID over the network to the
            player with the given ID. Calling this method again with the same packet ID will add the instance
            of IPacketData to the existing collection if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
            <param name="playerId">The ID of the player.</param>
            <typeparam name="TPacketData">The type of the packetData parameter.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkSender`1.SendCollectionData``1(`0,``0,System.UInt16[])">
            <summary>
            Send an instance of IPacketData in a collection with the given packet ID over the network to the
            players with the given IDs. Calling this method again with the same packet ID will add the instance
            of IPacketData to the existing collection if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
            <param name="playerIds">The IDs of the players.</param>
            <typeparam name="TPacketData">The type of the packetData parameter.</typeparam>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.IServerAddonNetworkSender`1.BroadcastCollectionData``1(`0,``0)">
            <summary>
            Send an instance of IPacketData in a collection with the given packet ID over the network to all
            connected players. Calling this method again with the same packet ID will add the instance
            of IPacketData to the existing collection if the packet has not yet been sent.
            </summary>
            <param name="packetId">The packet ID.</param>
            <param name="packetData">An instance of IPacketData to send.</param>
            <typeparam name="TPacketData">The type of the packetData parameter.</typeparam>
        </member>
        <member name="T:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1">
            <summary>
            Implementation of the server-side network receiver for addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1.InvalidPacketIdMsg">
            <summary>
            Message for the exception when the given packet ID is invalid.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1.NoAddonIdMsg">
            <summary>
            Message for the exception when the server addon has no ID.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1._serverAddon">
            <summary>
            The instance of the server addon that this network receiver belongs to.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1._packetManager">
            <summary>
            The packet manager used to register packet handlers for the addon.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1.RegisterPacketHandler(`0,System.Action{System.UInt16})">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1.RegisterPacketHandler``1(`0,Hkmp.Networking.Packet.GenericServerPacketHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1.DeregisterPacketHandler(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkReceiver`1.TransformPacketInstantiator(System.Func{`0,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Transform a given function that instantiates a IPacketData from a given enum value into a function
            that instead requires a byte as parameter.
            </summary>
            <param name="packetInstantiator">The existing instantiator function that takes an enum value.</param>
            <returns>New instantiator function that takes a byte as parameter.</returns>
        </member>
        <member name="T:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1">
            <summary>
            Implementation of server-side network sender for addons.
            </summary>
            <typeparam name="TPacketId">The type of the packet ID enum.</typeparam>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.ServerNotStartedExceptionMsg">
            <summary>
            The exception message for when data cannot be send because the server is not started.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.PacketIdInvalidExceptionMsg">
            <summary>
            The exception message for when data cannot be send because the given packet ID is invalid.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.NoAddonIdMsg">
            <summary>
            Message for the exception when the server addon has no ID.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1._netServer">
            <summary>
            The net server used to send data.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1._serverAddon">
            <summary>
            The instance of the server addon that this network sender belongs to.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1._packetIdSize">
            <summary>
            The size of the packet ID space.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.SendSingleData(`0,Hkmp.Networking.Packet.IPacketData,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.SendSingleData(`0,Hkmp.Networking.Packet.IPacketData,System.UInt16[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.BroadcastSingleData(`0,Hkmp.Networking.Packet.IPacketData)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.SendCollectionData``1(`0,``0,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.SendCollectionData``1(`0,``0,System.UInt16[])">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Api.Server.Networking.ServerAddonNetworkSender`1.BroadcastCollectionData``1(`0,``0)">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Api.Server.ServerAddon">
            <summary>
            Abstract base class for a server addon. Inheriting this will allow the addon class to be loaded.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.ServerAddon.ServerApi">
            <summary>
            The server API interface.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.ServerAddon.Logger">
            <summary>
            The logger for logger information.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.ServerAddon.Name">
            <summary>
            The name (and also identifier) of the addon.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.ServerAddon.Version">
            <summary>
            The version (also identifying) of the addon.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.ServerAddon.NeedsNetwork">
            <summary>
            Whether this addon requires network access.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddon.InternalInitialize(Hkmp.Api.Server.IServerApi)">
            <summary>
            Internal method for initializing the addon with the API.
            </summary>
            <param name="serverApi">The server API instance.</param>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddon.Initialize(Hkmp.Api.Server.IServerApi)">
            <summary>
            Called when the addon is loaded and can be initialized.
            </summary>
            <param name="serverApi">The server API interface.</param>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddon.GetName">
            <summary>
            Internal method for obtaining the length-valid addon name.
            </summary>
            <returns>The name of the addon or a substring of the first valid characters of its name.</returns>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddon.GetVersion">
            <summary>
            Internal method for obtaining the length-valid addon version.
            </summary>
            <returns>The version of the addon or a substring of the first valid characters of its version.</returns>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddon.RegisterAddon(Hkmp.Api.Server.ServerAddon)">
            <summary>
            Register a server addon to be initialized and managed by HKMP.
            This method can only be called during the initialization of mods.
            After all mods have been initialized, this will throw an exception.
            </summary>
            <param name="serverAddon">The server addon to be registered.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given addon is null.</exception>
        </member>
        <member name="T:Hkmp.Api.Server.ServerAddonLoader">
            <summary>
            Addon loader for the server-side.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonLoader.LoadAddons">
            <summary>
            Loads all server addons.
            </summary>
            <returns>A list of ServerAddon instances.</returns>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonLoader.GetCurrentDirectoryPath">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Api.Server.ServerAddonManager">
            <summary>
            Manager class for server addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.ServerAddonManager.RegisteredAddons">
            <summary>
            A list of addons that were registered by an assembly outside of HKMP. These addons still
            need to be initialized with the server API.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.ServerAddonManager._hasLoaded">
            <summary>
            A boolean indicating whether addon loading already occurred. If so, it is not possible to
            register new addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.ServerAddonManager._serverApi">
            <summary>
            The server API instance to pass to addons.
            </summary>
        </member>
        <member name="F:Hkmp.Api.Server.ServerAddonManager._networkedAddons">
            <summary>
            A dictionary of all networked addons indexed by name and version.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonManager.#cctor">
            <summary>
            Static constructor that initializes the list of addons registered outside of HKMP.
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonManager.#ctor(Hkmp.Api.Server.ServerApi)">
            <summary>
            Construct the addon manager with the server API.
            </summary>
            <param name="serverApi">The server API instance.</param>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonManager.LoadAddons">
            <summary>
            Start loading addons from assemblies and initialize all known addons (both loaded and registered).
            </summary>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonManager.TryGetNetworkedAddon(System.String,System.String,Hkmp.Api.Server.ServerAddon@)">
            <summary>
            Try and get the networked server addon with the given name and version.
            </summary>
            <param name="name">The name of the addon.</param>
            <param name="version">The version of the addon.</param>
            <param name="addon">The server addon if it exists, null otherwise.</param>
            <returns>True if the server addon was found, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonManager.GetNetworkedAddonData">
            <summary>
            Get a list of addon data for all networked addons.
            </summary>
            <returns>A list of AddonData instances.</returns>
        </member>
        <member name="M:Hkmp.Api.Server.ServerAddonManager.RegisterAddon(Hkmp.Api.Server.ServerAddon)">
            <summary>
            Register and addon class from outside of HKMP.
            </summary>
            <param name="serverAddon">The server addon instance.</param>
        </member>
        <member name="T:Hkmp.Api.Server.ServerApi">
            <summary>
            Server API interface implementation.
            </summary>
        </member>
        <member name="P:Hkmp.Api.Server.ServerApi.ServerManager">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Api.Server.ServerApi.CommandManager">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Api.Server.ServerApi.NetServer">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Api.Server.ServerApi.EventAggregator">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Collection.BiLookup`2">
            <summary>
            Bi-directional lookup table.
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
        </member>
        <member name="F:Hkmp.Collection.BiLookup`2._normal">
            <summary>
            Dictionary containing the mapping from first type to second type.
            </summary>
        </member>
        <member name="F:Hkmp.Collection.BiLookup`2._inverse">
            <summary>
            Dictionary containing the mapping from second type to first type.
            </summary>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.#ctor">
            <summary>
            Constructs the bi-directional lookup table.
            </summary>
        </member>
        <member name="P:Hkmp.Collection.BiLookup`2.Count">
            <summary>
            The number of elements in this lookup table.
            </summary>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.Add(`0,`1)">
            <summary>
            Add an entry with the given values to the lookup table.
            </summary>
            <param name="first">The first value of the entry to add.</param>
            <param name="second">The second value of the entry to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the either part of the entry is already present in the
            lookup table.</exception>
        </member>
        <member name="P:Hkmp.Collection.BiLookup`2.Item(`0)">
            <inheritdoc cref="M:Hkmp.Collection.BiLookup`2.GetByFirst(`0)"/>
        </member>
        <member name="P:Hkmp.Collection.BiLookup`2.Item(`1)">
            <inheritdoc cref="M:Hkmp.Collection.BiLookup`2.GetBySecond(`1)"/>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.GetByFirst(`0)">
            <summary>
            Get the associated value with the given index.
            </summary>
            <param name="index">The index with type as the first type of this lookup.</param>
            <returns>The associated value as second type or default for the given type.</returns>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.GetBySecond(`1)">
            <summary>
            Get the associated value with the given index.
            </summary>
            <param name="index">The index with type as the second type of this lookup.</param>
            <returns>The associated value as first type or default for the given type.</returns>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value corresponding to the given index.
            </summary>
            <param name="index">The index to find the value for.</param>
            <param name="value">Will contain the value for the given index if found. Default otherwise.</param>
            <returns>True if the value for the index was found, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.TryGetValue(`1,`0@)">
            <summary>
            Try to get the value corresponding to the given index.
            </summary>
            <param name="index">The index to find the value for.</param>
            <param name="value">Will contain the value for the given index if found. Default otherwise.</param>
            <returns>True if the value for the index was found, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.ContainsFirst(`0)">
            <summary>
            Whether the given value exists in this lookup.
            </summary>
            <param name="index">The index with type as the first type of this lookup.</param>
            <returns>True if the value exists in the lookup, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.ContainsSecond(`1)">
            <summary>
            Whether the given value exists in this lookup.
            </summary>
            <param name="index">The index with type as the second type of this lookup.</param>
            <returns>True if the value exists in the lookup, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Collection.BiLookup`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1">
            <summary>
            Thread-safe implementation of a fixed-size queue.
            </summary>
            <typeparam name="T">The type of the values in the queue.</typeparam>
        </member>
        <member name="F:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1._lock">
            <summary>
            Object for locking asynchronous access.
            </summary>
        </member>
        <member name="F:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1._queue">
            <summary>
            The underlying queue.
            </summary>
        </member>
        <member name="F:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1._size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1.#ctor(System.Int32)">
            <summary>
            Constructs the fixed-size queue with the given size.
            </summary>
            <param name="size">The size of the queue.</param>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the queue. Will dequeue items until the queue is the
            correct size again.
            </summary>
            <param name="value">The object to add to the queue. The value can be <code>null</code> for reference
            types.</param>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the queue.
            </summary>
            <returns>The object that is removed from the beginning of the queue.</returns>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1.Clear">
            <summary>
            Removes all objects from the queue.
            </summary>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentFixedSizeQueue`1.GetCopy">
            <summary>
            Get a copy of the underlying queue for synchronous access.
            </summary>
            <returns>A shallow copy of the queue.</returns>
        </member>
        <member name="T:Hkmp.Concurrency.ConcurrentList`1">
            <summary>
            Thread-safe implementation of a list.
            </summary>
            <typeparam name="T">The type of the values in the list.</typeparam>
        </member>
        <member name="F:Hkmp.Concurrency.ConcurrentList`1._lock">
            <summary>
            Object for locking asynchronous access.
            </summary>
        </member>
        <member name="F:Hkmp.Concurrency.ConcurrentList`1._list">
            <summary>
            The underlying list.
            </summary>
        </member>
        <member name="P:Hkmp.Concurrency.ConcurrentList`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The index of the value to get or set.</param>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentList`1.Add(`0)">
            <summary>
            Add the given item to the list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentList`1.Remove(`0)">
            <summary>
            Removes the given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if the item was removed, false if no such item could be found.
            </returns>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentList`1.GetCopy">
            <summary>
            Get a copy of the underlying list for synchronous access.
            </summary>
            <returns>A shallow copy of the dictionary.</returns>
        </member>
        <member name="T:Hkmp.Concurrency.ConcurrentStopwatch">
            <summary>
            Thread-safe implementation of a stopwatch.
            </summary>
        </member>
        <member name="F:Hkmp.Concurrency.ConcurrentStopwatch._lock">
            <summary>
            Object for locking asynchronous access.
            </summary>
        </member>
        <member name="F:Hkmp.Concurrency.ConcurrentStopwatch._stopwatch">
            <summary>
            The underlying stopwatch.
            </summary>
        </member>
        <member name="P:Hkmp.Concurrency.ConcurrentStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
            <returns>A read-only long integer representing the total number of milliseconds measured by
            the current instance.</returns>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentStopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:Hkmp.Concurrency.ConcurrentStopwatch.Restart">
            <summary>
            Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.
            </summary>
        </member>
        <member name="T:Hkmp.Eventing.EventAggregator">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Eventing.EventAggregator._events">
            <summary>
            Dictionary mapping event types to their <see cref="T:Hkmp.Api.Eventing.InterEvent"/> instances.
            </summary>
        </member>
        <member name="M:Hkmp.Eventing.EventAggregator.GetEvent``1">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Eventing.EventSubscription">
            <summary>
            A handle to an execution strategy combined with its subscription token.
            </summary>
        </member>
        <member name="P:Hkmp.Eventing.EventSubscription.SubscriptionToken">
            <summary>
            The token that represents the subscription and can be used to unsubscribe.
            </summary>
        </member>
        <member name="P:Hkmp.Eventing.EventSubscription.ExecutionStrategy">
            <summary>
            The strategy to execute for this particular subscription.
            </summary>
        </member>
        <member name="T:Hkmp.Eventing.ServerEvents.PlayerChatEvent">
            <inheritdoc cref="T:Hkmp.Api.Eventing.ServerEvents.IPlayerChatEvent" />
        </member>
        <member name="P:Hkmp.Eventing.ServerEvents.PlayerChatEvent.Cancelled">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Eventing.ServerEvents.PlayerChatEvent.Player">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Eventing.ServerEvents.PlayerChatEvent.Message">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Eventing.ServerEvents.PlayerChatEvent.#ctor(Hkmp.Api.Server.IServerPlayer,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Fsm.FadeAudio">
            <summary>
            Class for fading audio from an audio source over time.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.FadeAudio._audioSource">
            <summary>
            The audio source to fade.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.FadeAudio._startVolume">
            <summary>
            The volume the audio source should start at.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.FadeAudio._endVolume">
            <summary>
            The volume the audio source should end at.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.FadeAudio._time">
            <summary>
            The time it should take to fully fade out.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.FadeAudio._timeElapsed">
            <summary>
            Current elapsed time.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.FadeAudio._timeProgress">
            <summary>
            Percentage of time that is elapsed.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.FadeAudio._fadingDown">
            <summary>
            Whether we are fading down or fading up the audio.
            </summary>
        </member>
        <member name="M:Hkmp.Fsm.FadeAudio.Update">
            <summary>
            Updates the audio source based on elapsed time.
            </summary>
        </member>
        <member name="T:Hkmp.Fsm.FollowObject">
            <summary>
            MonoBehaviour that adjusts the position of a GameObject to follow a target GameObject with a certain offset.
            </summary>
        </member>
        <member name="P:Hkmp.Fsm.FollowObject.Target">
            <summary>
            The target GameObject to follow.
            </summary>
        </member>
        <member name="P:Hkmp.Fsm.FollowObject.Offset">
            <summary>
            The offset from the target the GameObject should have.
            </summary>
        </member>
        <member name="T:Hkmp.Fsm.FsmPatcher">
            <summary>
            Class for patching functionality of PlayMaker FSMs.
            </summary>
        </member>
        <member name="M:Hkmp.Fsm.FsmPatcher.RegisterHooks">
            <summary>
            Registers the hooks necessary to patch.
            </summary>
        </member>
        <member name="M:Hkmp.Fsm.FsmPatcher.OnFsmEnable(On.PlayMakerFSM.orig_OnEnable,PlayMakerFSM)">
            <summary>
            Callback method for the PlayMakerFSM#OnEnable hook.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The PlayMakerFSM instance that the hooked method was called on.</param>
        </member>
        <member name="T:Hkmp.Fsm.PositionInterpolation">
            <summary>
            MonoBehaviour for interpolating position between position updates.
            </summary>
        </member>
        <member name="M:Hkmp.Fsm.PositionInterpolation.SetNewPosition(UnityEngine.Vector3)">
            <summary>
            Set the new position to interpolate to.
            </summary>
            <param name="newPosition">The new position as Vector3.</param>
        </member>
        <member name="T:Hkmp.Fsm.Rotate">
            <summary>
            MonoBehaviour for rotating a GameObject.
            </summary>
        </member>
        <member name="P:Hkmp.Fsm.Rotate.X">
            <summary>
            The X coordinate in the euler rotation.
            </summary>
        </member>
        <member name="P:Hkmp.Fsm.Rotate.Y">
            <summary>
            The Y coordinate in the euler rotation.
            </summary>
        </member>
        <member name="P:Hkmp.Fsm.Rotate.Z">
            <summary>
            The Z coordinate in the euler rotation.
            </summary>
        </member>
        <member name="M:Hkmp.Fsm.Rotate.SetAngles(System.Single,System.Single,System.Single)">
            <summary>
            Sets the angles or the euler rotation.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
        </member>
        <member name="T:Hkmp.Fsm.SendDungTrailEvent">
            <summary>
            Class that messages sending the Defenders Crest charm trail as a periodic update.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.SendDungTrailEvent.Frequency">
            <summary>
            The frequency at which to send the update. 
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.SendDungTrailEvent._netClient">
            <summary>
            The net client instance.
            </summary>
        </member>
        <member name="F:Hkmp.Fsm.SendDungTrailEvent._time">
            <summary>
            Current elapsed time since the last update.
            </summary>
        </member>
        <member name="M:Hkmp.Fsm.SendDungTrailEvent.Update">
            <summary>
            Update the time and check whether we need to send another animation.
            </summary>
        </member>
        <member name="M:Hkmp.Fsm.SendDungTrailEvent.Reset">
            <summary>
            Resets the elapsed time to zero.
            </summary>
        </member>
        <member name="T:Hkmp.Game.Client.ClientManager">
            <summary>
            Class that manages the client state (similar to ServerManager).
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._netClient">
            <summary>
            The net client instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._uiManager">
            <summary>
            The UI manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._serverSettings">
            <summary>
            The current server settings.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._modSettings">
            <summary>
            The loaded mod settings.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._playerManager">
            <summary>
            The player manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._animationManager">
            <summary>
            The animation manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._mapManager">
            <summary>
            The map manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._entityManager">
            <summary>
            The entity manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._addonManager">
            <summary>
            The client addon manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._commandManager">
            <summary>
            The client command manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._playerData">
            <summary>
            Dictionary containing a mapping from user IDs to the client player data.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Client.ClientManager.MapManager">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientManager.Username">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientManager.Players">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Client.ClientManager.ConnectEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Client.ClientManager.DisconnectEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Client.ClientManager.PlayerConnectEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Client.ClientManager.PlayerDisconnectEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Client.ClientManager.PlayerEnterSceneEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Client.ClientManager.PlayerLeaveSceneEvent">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientManager.Team">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._username">
            <summary>
            The username that was last used to connect with.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._lastPosition">
            <summary>
            Keeps track of the last updated location of the local player object.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._lastScale">
            <summary>
            Keeps track of the last updated scale of the local player object.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._sceneChanged">
            <summary>
            Whether the scene has just changed and we are in a scene change.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.ClientManager._sceneHostDetermined">
            <summary>
            Whether we have already determined whether we are scene host or not for the entity system.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.RegisterCommands">
            <summary>
            Register the default client commands.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.Connect(System.String,System.Int32,System.String)">
            <summary>
            Connect the client to the server with the given address, port and username.
            </summary>
            <param name="address">The address of the server.</param>
            <param name="port">The port of the server.</param>
            <param name="username">The username of the client.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.InternalDisconnect">
            <summary>
            Internal logic for disconnecting from the server.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnConnectFailed(Hkmp.Networking.Client.ConnectFailedResult)">
            <summary>
            Callback method for when the connection to the server fails with a given result.
            </summary>
            <param name="result">The result of the failed connection.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnChatInput(System.String)">
            <summary>
            Callback method for when chat is input by the local user.
            </summary>
            <param name="message">The message that was submitted by the user.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.InternalChangeTeam(Hkmp.Game.Team)">
            <summary>
            Internal method for changing the local player team.
            </summary>
            <param name="team">The new team.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.InternalChangeSkin(System.Byte)">
            <summary>
            Internal method for changing the local player skin.
            </summary>
            <param name="skinId">The ID of the new skin.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnClientConnect(Hkmp.Networking.Packet.Data.LoginResponse)">
            <summary>
            Callback method for when the net client establishes a connection with a server.
            </summary>
            <param name="loginResponse">The login response received from the server.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnHelloClient(Hkmp.Networking.Packet.Data.HelloClient)">
            <summary>
            Callback method for when we receive the HelloClient data.
            </summary>
            <param name="helloClient">The HelloClient packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnDisconnect(Hkmp.Networking.Packet.Data.ServerClientDisconnect)">
            <summary>
            Callback method for when we receive a server disconnect.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerConnect(Hkmp.Networking.Packet.Data.PlayerConnect)">
            <summary>
            Callback method for when a player connects to the server.
            </summary>
            <param name="playerConnect">The PlayerConnect packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerDisconnect(Hkmp.Networking.Packet.Data.ClientPlayerDisconnect)">
            <summary>
            Callback method for when a player disconnects from the server.
            </summary>
            <param name="playerDisconnect">The ClientPlayerDisconnect packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerAlreadyInScene(Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene)">
            <summary>
            Callback method for when we receive that a player is already in the scene we are entering.
            </summary>
            <param name="alreadyInScene">The ClientPlayerAlreadyInScene packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerEnterScene(Hkmp.Networking.Packet.Data.ClientPlayerEnterScene)">
            <summary>
            Callback method for when another player enters our scene.
            </summary>
            <param name="enterSceneData">The ClientPlayerEnterScene packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerLeaveScene(Hkmp.Networking.Packet.Data.GenericClientData)">
            <summary>
            Callback method for when a player leaves our scene.
            </summary>
            <param name="data">The generic client packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerUpdate(Hkmp.Networking.Packet.Data.PlayerUpdate)">
            <summary>
            Callback method for when a player update is received.
            </summary>
            <param name="playerUpdate">The PlayerUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerMapUpdate(Hkmp.Networking.Packet.Data.PlayerMapUpdate)">
            <summary>
            Callback method for when a player's map icon updates.
            </summary>
            <param name="playerMapUpdate">The PlayerMapUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnEntityUpdate(Hkmp.Networking.Packet.Data.EntityUpdate)">
            <summary>
            Callback method for when an entity update is received.
            </summary>
            <param name="entityUpdate">The EntityUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnServerSettingsUpdated(Hkmp.Networking.Packet.Data.ServerSettingsUpdate)">
            <summary>
            Callback method for when the server settings are updated by the server.
            </summary>
            <param name="update">The <see cref="T:Hkmp.Networking.Packet.Data.ServerSettingsUpdate"/> packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnSceneChange(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
            <summary>
            Callback method for when the Unity scene changes.
            </summary>
            <param name="oldScene">The old scene instance.</param>
            <param name="newScene">The new scene instance.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnPlayerUpdate(On.HeroController.orig_Update,HeroController)">
            <summary>
            Callback method on the HeroController#Update method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnChatMessage(Hkmp.Networking.Packet.Data.ChatMessage)">
            <summary>
            Callback method for when a chat message is received.
            </summary>
            <param name="chatMessage">The ChatMessage packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnTimeout">
            <summary>
            Callback method for when the net client is timed out.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.OnApplicationQuit">
            <summary>
            Callback method for when the local user quits the application.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.GetPlayer(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.TryGetPlayer(System.UInt16,Hkmp.Api.Client.IClientPlayer@)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.ChangeTeam(Hkmp.Game.Team)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Client.ClientManager.ChangeSkin(System.Byte)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Client.ClientPlayerData">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientPlayerData.Id">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientPlayerData.Username">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientPlayerData.IsInLocalScene">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientPlayerData.PlayerContainer">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientPlayerData.PlayerObject">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientPlayerData.Team">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.ClientPlayerData.SkinId">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Client.Entity.Entity.StateUpdateDone">
            Called when the previous state update is done.
            Usually called on specific points in the entity's FSM.
        </member>
        <member name="M:Hkmp.Game.Client.Entity.Entity.StartQueuedUpdate(System.Byte,System.Collections.Generic.List{System.Byte})">
            Start a (previously queued) update with given state index and variable list.
        </member>
        <member name="M:Hkmp.Game.Client.Entity.Entity.IsInterruptingState(System.Byte)">
            Whether the given state index represents a state that should interrupt
            other updating states.
        </member>
        <member name="T:Hkmp.Game.Client.MapManager">
            <summary>
            A class that manages player locations on the in-game map.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.MapManager._netClient">
            <summary>
            The net client instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.MapManager._serverSettings">
            <summary>
            The current server settings.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.MapManager._mapEntries">
            <summary>
            Dictionary containing map icon objects per player ID.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.MapManager._lastPosition">
            <summary>
            The last sent map position.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.MapManager._lastSentMapIcon">
            <summary>
            The value of the last sent whether the map icon was active. If true, we have sent to the server
            that we have a map icon active. Otherwise, we have sent to the server that we don't have a map
            icon active.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.MapManager._displayingIcons">
            <summary>
            Whether we should display the map icons. True if the map is opened, false otherwise.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.HeroControllerOnUpdate(On.HeroController.orig_Update,HeroController)">
            <summary>
            Callback method for the HeroController#Update method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.TryGetMapLocation(UnityEngine.Vector3@)">
            <summary>
            Try to get the current map location of the local player.
            </summary>
            <param name="mapLocation">A Vector3 representing the map location or the zero vector if the map location could not be found.</param>
            <returns>true if the map location could be found; false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.UpdatePlayerHasIcon(System.UInt16,System.Boolean)">
            <summary>
            Update whether the given player has an active map icon.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="hasMapIcon">Whether the player has an active map icon.</param>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.UpdatePlayerIcon(System.UInt16,Hkmp.Math.Vector2)">
            <summary>
            Update the map icon of a given player with the given position.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="position">The new position on the map.</param>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.OnCloseQuickMap(On.GameMap.orig_CloseQuickMap,GameMap)">
            <summary>
            Callback method on the GameMap#CloseQuickMap method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The GameMap instance.</param>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.OnPositionCompass(On.GameMap.orig_PositionCompass,GameMap,System.Boolean)">
            <summary>
            Callback method on the GameMap#PositionCompass method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The GameMap instance.</param>
            <param name="posShade">The boolean value whether to position the shade.</param>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.UpdateMapIconsActive">
            <summary>
            Update all existing map icons based on whether they should be active according to server settings.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.CreatePlayerIcon(System.UInt16,Hkmp.Math.Vector2)">
            <summary>
            Create a map icon for a player and store it in the mapping.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="position">The position of the map icon.</param>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.RemoveEntryForPlayer(System.UInt16)">
            <summary>
            Remove a map entry for a player. For example, if they disconnect from the server.
            </summary>
            <param name="id">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.RemoveAllIcons">
            <summary>
            Remove all map icons.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.OnDisconnect">
            <summary>
            Callback method for when the local user disconnects.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.GetGameMap">
            <summary>
            Get a valid instance of the GameMap class.
            </summary>
            <returns>An instance of GameMap.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.GetAreaObjectByName(GameMap,System.String)">
            <summary>
            Get an area object by its name.
            </summary>
            <param name="gameMap">The GameMap instance.</param>
            <param name="name">The name of the area to retrieve.</param>
            <returns>A GameObject representing the map area.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.MapManager.TryGetEntry(System.UInt16,Hkmp.Api.Client.IPlayerMapEntry@)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Client.MapManager.PlayerMapEntry">
            <summary>
            An entry for an icon of a player.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Client.MapManager.PlayerMapEntry.HasMapIcon">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.MapManager.PlayerMapEntry.Position">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Client.MapManager.PlayerMapEntry.GameObject">
            <summary>
            The game object corresponding to the map icon.
            </summary>
        </member>
        <member name="T:Hkmp.Game.Client.PauseManager">
            <summary>
            Handles pause related things to prevent player being invincible in pause menu while connected to a server.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PauseManager._netClient">
            <summary>
            The net client instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.RegisterHooks">
            <summary>
            Registers the required method hooks.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.UIManagerOnTogglePauseGame(On.UIManager.orig_TogglePauseGame,UIManager)">
            <summary>
            Callback method for the UIManager#TogglePauseGame method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The UIManager instance.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.InputHandlerOnUpdate(On.InputHandler.orig_Update,InputHandler)">
            <summary>
            Callback method for the InputHandler#Update method.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The InputHandler instance.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.OnDeath">
            <summary>
            Callback method for when the player dies.
            If we are paused while the player dies, the game enters a state where the cursor is visible
            while not in the pause menu, but not being able to give any input apart from opening the pause menu.
            Therefore, we unpause immediately before dying to prevent this.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.HeroControllerOnDieFromHazard(On.HeroController.orig_DieFromHazard,HeroController,GlobalEnums.HazardType,System.Single)">
            <summary>
            Callback method for the HeroController#DieFromHazard method.
            If we have a hazard respawn while in the pause menu it soft-locks the menu, so we unpause it first.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
            <param name="hazardType">The type of hazard the player dies from.</param>
            <param name="angle">The angle of entering the hazard.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.TransitionPointOnOnTriggerEnter2D(On.TransitionPoint.orig_OnTriggerEnter2D,TransitionPoint,UnityEngine.Collider2D)">
            <summary>
            Callback method for the TransitionPoint#OnTriggerEnter2D method.
            If we go through a transition while being paused, we can only let the transition occur if we
            unpause first and then let the original method continue.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The TransitionPoint instance.</param>
            <param name="obj">The collider that enters the trigger.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.HeroControllerOnPause(On.HeroController.orig_Pause,HeroController)">
            <summary>
            Callback method for the HeroController#OnPause method.
            If we don't reset the input of the hero when pausing, we might continue sliding across the floor
            due to the timescale not being set to 0.
            </summary>
            <param name="orig">The original method.</param>
            <param name="self">The HeroController instance.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.ImmediateUnpauseIfPaused">
            <summary>
            Unpauses the game immediately if it was paused.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PauseManager.SetTimeScale(System.Single)">
            <summary>
            Sets the time scale similarly to the method GameManager#SetTimeScale.
            </summary>
            <param name="timeScale">The new time scale.</param>
        </member>
        <member name="T:Hkmp.Game.Client.PlayerManager">
            <summary>
            Class that manages player objects, spawning and recycling thereof.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager.PlayerContainerPrefabName">
            <summary>
            The name of the game object for the player container prefab.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager.PlayerObjectPrefabName">
            <summary>
            The name of the game object for the player object prefab.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager.PlayerContainerName">
            <summary>
            The name (and prefix) of the game object for player containers.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager.UsernameObjectName">
            <summary>
            The name of the game object for the username of players.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager.InitialPoolSize">
            <summary>
            The initial size of the pool of player container objects to be pre-instantiated.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager._serverSettings">
            <summary>
            The current server settings.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager._skinManager">
            <summary>
            The skin manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager._playerData">
            <summary>
            Reference to the client player data dictionary (<see cref="F:Hkmp.Game.Client.ClientManager._playerData"/>)
            from <see cref="T:Hkmp.Game.Client.ClientManager"/>.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Client.PlayerManager.LocalPlayerTeam">
            <summary>
            The team that our local player is on.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager._playerContainerPrefab">
            <summary>
            The player container prefab GameObject.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager._inactivePlayers">
            <summary>
            A queue of pre-instantiated players that will be used when spawning a player.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.PlayerManager._activePlayers">
            <summary>
            The collection of active players spawned from and not in the player pool.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.CreatePlayerPool">
            <summary>
            Create the initial pool of player objects.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.CreateNewPlayerContainer">
            <summary>
            Create a new player container object from the <see cref="F:Hkmp.Game.Client.PlayerManager._playerContainerPrefab"/> prefab.
            </summary>
            <returns>A new GameObject representing the player container.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.UpdatePosition(System.UInt16,Hkmp.Math.Vector2)">
            <summary>
            Update the position of a player with the given position.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="position">The new position of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.UpdateScale(System.UInt16,System.Boolean)">
            <summary>
            Update the scale of a player with the given boolean.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="scale">The new scale as a boolean, true indicating a X scale of 1,
            false indicating a X scale of -1.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.SetPlayerObjectBoolScale(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets the scale of a player object from a boolean.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
            <param name="scale">The new scale as a boolean, true indicating a X scale of 1,
            false indicating a X scale of -1.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.GetPlayerObject(System.UInt16)">
            <summary>
            Get the player object given the player ID.
            </summary>
            <param name="id">The player ID.</param>
            <returns>The GameObject for the player.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.OnDisconnect">
            <summary>
            Callback method for when the local user disconnects. Will reset all player related things
            to their default values.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.RecyclePlayer(System.UInt16)">
            <summary>
            Recycle the player container of the player with the given ID back into the queue.
            </summary>
            <param name="id">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.RecyclePlayerByData(Hkmp.Game.Client.ClientPlayerData)">
            <summary>
            Recycle the player container of the player with the given player data.
            </summary>
            <param name="playerData">The player data of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.RecycleAllPlayers">
            <summary>
            Recycle all existing players. <seealso cref="M:Hkmp.Game.Client.PlayerManager.RecyclePlayer(System.UInt16)"/>
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.ResetPlayer(Hkmp.Game.Client.ClientPlayerData)">
            <summary>
            Reset the player with the given player data.
            </summary>
            <param name="playerData">The player data of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.ResetPlayerContainer(UnityEngine.GameObject)">
            <summary>
            Reset the given player container by removing all game objects not inherent to it.
            </summary>
            <param name="playerContainer">The game object representing the player container.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.SpawnPlayer(Hkmp.Game.Client.ClientPlayerData,System.String,Hkmp.Math.Vector2,System.Boolean,Hkmp.Game.Team,System.Byte)">
            <summary>
            Spawn a new player object with the given data.
            </summary>
            <param name="playerData">The client player data for the player.</param>
            <param name="name">The username of the player.</param>
            <param name="position">The Vector2 denoting the position of the player.</param>
            <param name="scale">The boolean representing the scale of the player.</param>
            <param name="team">The team the player is on.</param>
            <param name="skinId">The ID of the skin the player is using.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.MakeUniqueSpriteAnimator(UnityEngine.GameObject)">
            <summary>
            Create a unique copy of a player object's sprite animator so that skins are unique to each player.
            </summary>
            <param name="playerObject">The player object with the sprite animator component.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.AddNameToPlayer(UnityEngine.GameObject,System.String,Hkmp.Game.Team)">
            <summary>
            Add a name to the given player container object.
            </summary>
            <param name="playerContainer">The GameObject for the player container.</param>
            <param name="name">The username that the object should have.</param>
            <param name="team">The team that the player is on.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.OnPlayerTeamUpdate(Hkmp.Networking.Packet.Data.ClientPlayerTeamUpdate)">
            <summary>
            Callback method for when a player team update is received.
            </summary>
            <param name="playerTeamUpdate">The ClientPlayerTeamUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.ResetAllTeams">
            <summary>
            Reset the local player's team to be None and reset all existing player names and hit-boxes.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.UpdatePlayerTeam(System.UInt16,Hkmp.Game.Team)">
            <summary>
            Update the team of a player.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="team">The team that the player should have.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.OnLocalPlayerTeamUpdate(Hkmp.Game.Team)">
            <summary>
            Callback method for when the team of the local player updates.
            </summary>
            <param name="team">The new team of the local player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.GetPlayerTeam(System.UInt16)">
            <summary>
            Get the team of a player.
            </summary>
            <param name="id">The ID of the player.</param>
            <returns>The team of the player.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.UpdateLocalPlayerSkin(System.Byte)">
            <summary>
            Update the skin of the local player.
            </summary>
            <param name="skinId">The ID of the skin to update to.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.OnPlayerSkinUpdate(Hkmp.Networking.Packet.Data.ClientPlayerSkinUpdate)">
            <summary>
            Callback method for when a player updates their skin.
            </summary>
            <param name="playerSkinUpdate">The ClientPlayerSkinUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.ResetAllPlayerSkins">
            <summary>
            Reset the skins of all players.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.ChangeNameColor(TMPro.TextMeshPro,Hkmp.Game.Team)">
            <summary>
            Change the color of a TextMeshPro object according to the team.
            </summary>
            <param name="textMeshObject">The TextMeshPro object representing the name.</param>
            <param name="team">The team that the name should be colored after.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.RemoveNameFromLocalPlayer">
            <summary>
            Remove the name from the local player.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.RemoveNameFromPlayer(UnityEngine.GameObject)">
            <summary>
            Remove the name of a given player container.
            </summary>
            <param name="playerContainer">The GameObject for the player container.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.OnServerSettingsUpdated(System.Boolean,System.Boolean)">
            <summary>
            Callback method for when the server settings are updated.
            </summary>
            <param name="pvpOrBodyDamageChanged">Whether the PvP or body damage settings changed.</param>
            <param name="displayNamesChanged">Whether the display names setting changed.</param>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.CreateUsername(UnityEngine.GameObject)">
            <summary>
            Create a new username object and add it as a child of a player container.
            </summary>
            <param name="playerContainer">The player container to add the username object as a child of.</param>
            <returns>The new GameObject that was created for the username.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.PlayerManager.ToggleBodyDamage(Hkmp.Game.Client.ClientPlayerData,System.Boolean)">
            <summary>
            Toggle the body damage for the given player data.
            </summary>
            <param name="playerData">The client player data.</param>
            <param name="enabled">Whether body damage is enabled.</param>
        </member>
        <member name="T:Hkmp.Game.Client.Skin.PlayerSkin">
            <summary>
            Data class for player skin textures.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Client.Skin.PlayerSkin.HasKnightTexture">
            <summary>
            Whether this skin contains the knight texture.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Client.Skin.PlayerSkin.KnightTexture">
            <summary>
            The knight texture for the skin, or null if it does not have it.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Client.Skin.PlayerSkin.HasSprintTexture">
            <summary>
            Whether this skin contains the sprint texture.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Client.Skin.PlayerSkin.SprintTexture">
            <summary>
            The sprint texture for the skin, or null if it does not have it.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.PlayerSkin.SetKnightTexture(UnityEngine.Texture)">
            <summary>
            Set the knight texture for the skin.
            </summary>
            <param name="knightTexture">The knight texture.</param>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.PlayerSkin.SetSprintTexture(UnityEngine.Texture)">
            <summary>
            Set the sprint texture for the skin.
            </summary>
            <param name="sprintTexture">The sprint texture.</param>
        </member>
        <member name="T:Hkmp.Game.Client.Skin.SkinLoader">
            <summary>
            Class responsible for disk interaction for all skin related operations.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinLoader.ModFolderName">
            <summary>
            The name of the mod folder within the Hollow Knight installation.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinLoader.SkinFolderName">
            <summary>
            The name of the skin folder in the HKMP mod folder.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinLoader.KnightTextureFileName">
            <summary>
            The name of the Knight texture file.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinLoader.SprintTextureFileName">
            <summary>
            The name of the Sprint texture file.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinLoader.IdFileName">
            <summary>
            The name of the file that contains the ID for a skin.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinLoader._skinFolderPath">
            <summary>
            The full path of the skin folder.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinLoader.LoadAllSkins(System.Collections.Generic.Dictionary{System.Byte,Hkmp.Game.Client.Skin.PlayerSkin}@)">
            <summary>
            Load all skins on disk in the given path into the given Dictionary. Assumes that the given
            dictionary is non-null.
            </summary>
            <param name="skins">A non-null dictionary that will contain the loaded skins.</param>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinLoader.LoadTexturesForSkin(System.String,Hkmp.Game.Client.Skin.PlayerSkin@)">
            <summary>
            Try to load the textures for a player skin from disk at the given path. This path should be
            the full path ending in the directory that contains the texture files.
            </summary>
            <param name="path">The full path of a directory containing a player skin.</param>
            <param name="playerSkin">If the method returns, will contain the loaded player skin or a fallback
            empty player skin if no skin could be loaded.</param>
            <returns>true if the skin could be loaded, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinLoader.LoadTexture(System.String,UnityEngine.Texture2D@)">
            <summary>
            Try to load a texture at the given file path.
            </summary>
            <param name="filePath">The full path of the file.</param>
            <param name="texture">If the method returns, will contain the loaded texture or null if no texture
            could be loaded.</param>
            <returns>true if the texture could be loaded, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinLoader.ReadIntFromFile(System.String)">
            <summary>
            Reads an integer from a file at the given path. Returns -1 if the file contents cannot be parsed
            to an int.
            </summary>
            <param name="path">The path of the file to read from.</param>
            <returns><code>-1</code> if the file contents cannot be parsed as an int, otherwise the int
            value.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinLoader.GetModsFolder">
            <summary>
            Get the mods folder based on the underlying operating system.
            </summary>
            <returns>The full path to the mods directory.</returns>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinLoader.CombinePaths(System.String[])">
            <summary>
            Combines the variable number of given existing paths into a complete path. Uses Path.Combine
            for intermediate steps.
            </summary>
            <param name="paths">String array containing the path to combine.</param>
            <returns>The combined path from the given paths.</returns>
        </member>
        <member name="T:Hkmp.Game.Client.Skin.SkinManager">
            <summary>
            Class that manages skins for player objects.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinManager._playerSkins">
            <summary>
            Dictionary mapping skin IDs to PlayerSkin objects that store all relevant textures.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Client.Skin.SkinManager._defaultPlayerSkin">
            <summary>
            The fallback skin to use.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinManager.InitializeSpritesOnLocalPlayer(UnityEngine.GameObject)">
             <summary>
             This method loads the Sprint animation on the local player to ensure that whenever the animation
             library is copied for skin purposes, it doesn't lack the instantiations of that animation.
            
             Note: when expanding the skin system to more sprites, update this method as well.
             </summary>
             <param name="gameObject">The GameObject of the local player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinManager.UpdatePlayerSkin(UnityEngine.GameObject,System.Byte)">
            <summary>
            Update the player skin on the given player object with the given skin ID. An ID of 0 or an ID
            that doesn't have a valid skin loaded, will result in the default skin being loaded.
            </summary>
            <param name="playerObject">The GameObject representing the player to update.</param>
            <param name="skinId">The ID of the skin to apply.</param>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinManager.UpdateLocalPlayerSkin(System.Byte)">
            <summary>
            Updates the local player skin to the skin with the given ID.
            </summary>
            <param name="skinId">The ID of the skin to apply.</param>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinManager.ResetPlayerSkin(UnityEngine.GameObject)">
            <summary>
            Reset the skin of the given player to the default skin.
            </summary>
            <param name="playerObject">The GameObject representing the player.</param>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinManager.ResetLocalPlayerSkin">
            <summary>
            Reset the local player skin to the default skin.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Client.Skin.SkinManager.StoreDefaultPlayerSkin(HeroController)">
            <summary>
            Store the default player skin from the given hero controller.
            </summary>
            <param name="heroController">The HeroController instance.</param>
        </member>
        <member name="T:Hkmp.Game.Command.Client.AddonCommand">
            <summary>
            Command for managing client-side addons, such as enabling and disabling them.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Client.AddonCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Client.AddonCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Client.AddonCommand._addonManager">
            <summary>
            The client addon manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Command.Client.AddonCommand._netClient">
            <summary>
            The net client instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Client.AddonCommand.Execute(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.Client.AddonCommand.SendUsage">
            <summary>
            Sends the command usage to the chat box.
            </summary>
        </member>
        <member name="T:Hkmp.Game.Command.Client.ClientCommandManager">
            <summary>
            Class that manages commands for client-side.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Client.ClientCommandManager.ProcessCommand(System.String)">
            <summary>
            Try to process a command given the message.
            </summary>
            <param name="message">A user-input string message.</param>
            <returns>True if the message was processed as a command, false otherwise.</returns>
        </member>
        <member name="T:Hkmp.Game.Command.Client.ConnectCommand">
            <summary>
            Command for connecting the local user to a server with a given address, port and username.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Client.ConnectCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Client.ConnectCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Client.ConnectCommand._clientManager">
            <summary>
            The client manager instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Client.ConnectCommand.Execute(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.Client.ConnectCommand.SendUsage">
            <summary>
            Sends the command usage to the chat box.
            </summary>
        </member>
        <member name="T:Hkmp.Game.Command.Client.HostCommand">
            <summary>
            Command for controlling local server hosting.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Client.HostCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Client.HostCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Client.HostCommand._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Client.HostCommand.Execute(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.Client.HostCommand.SendUsage">
            <summary>
            Sends the command usage to the chat box.
            </summary>
        </member>
        <member name="T:Hkmp.Game.Command.CommandManager`1">
            <summary>
            Abstract base class for client and server-side command managers.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Command.CommandManager`1.Commands">
            <summary>
            Dictionary mapping command triggers and aliases to their respective commands.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.CommandManager`1.GetArguments(System.String)">
            <summary>
            Get the command arguments from the given message. Each string between spaces will be considered as
            an argument. Arguments with spaces can be denoted by wrapping them in quotation marks (").
            </summary>
            <param name="message">The string message.</param>
            <returns>A string array containing the arguments.</returns>
        </member>
        <member name="M:Hkmp.Game.Command.CommandManager`1.RegisterCommand(`0)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.CommandManager`1.DeregisterCommand(`0)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Command.Server.AnnounceCommand">
            <summary>
            Command for announcing messages to all connected players.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Server.AnnounceCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.AnnounceCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.AnnounceCommand.AuthorizedOnly">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Server.AnnounceCommand._playerData">
            <summary>
            A reference to the server player data dictionary.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Command.Server.AnnounceCommand._netServer">
            <summary>
            The net server instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.AnnounceCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Command.Server.AuthorizeCommand">
            <summary>
            Command for managing authorization of users.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Server.AuthorizeCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.AuthorizeCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.AuthorizeCommand.AuthorizedOnly">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Server.AuthorizeCommand._authorizedList">
            <summary>
            The authorized list instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Command.Server.AuthorizeCommand._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.AuthorizeCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.Server.AuthorizeCommand.SendUsage(Hkmp.Api.Command.Server.ICommandSender)">
            <summary>
            Sends the command usage to the given command sender.
            </summary>
            <param name="commandSender">The command sender to send to.</param>
        </member>
        <member name="T:Hkmp.Game.Command.Server.BanCommand">
            <summary>
            Command for banning users.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Server.BanCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.BanCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.BanCommand.AuthorizedOnly">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Server.BanCommand._banList">
            <summary>
            The ban list instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Command.Server.BanCommand._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.BanCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.Server.BanCommand.DisconnectPlayer(Hkmp.Game.Server.ServerPlayerData)">
            <summary>
            Disconnect the player with the given player data.
            </summary>
            <param name="playerData">The player data for the player to disconnect.</param>
        </member>
        <member name="M:Hkmp.Game.Command.Server.BanCommand.SendUsage(Hkmp.Api.Command.Server.ICommandSender,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sends the command usage to the given command sender.
            </summary>
            <param name="commandSender">The command sender to send to.</param>
            <param name="ipBan">Whether the command was for an IP ban.</param>
            <param name="unban">Whether the command was for an unban.</param>
            <param name="addArgument">Whether the 'add' argument was supplied.</param>
        </member>
        <member name="T:Hkmp.Game.Command.Server.KickCommand">
            <summary>
            Command for kicking users.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Server.KickCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.KickCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.KickCommand.AuthorizedOnly">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Server.KickCommand._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.KickCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.Server.KickCommand.KickPlayer(Hkmp.Api.Server.IServerPlayer)">
            <summary>
            Disconnects the player with the given player data by kicking them.
            </summary>
            <param name="player">The server player data instance for the player.</param>
        </member>
        <member name="T:Hkmp.Game.Command.Server.ListCommand">
            <summary>
            Command for listing all connected players on the server.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Server.ListCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.ListCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.ListCommand.AuthorizedOnly">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Server.ListCommand._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.ListCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Command.Server.ServerCommandManager">
            <summary>
            Class that managed commands for server-side.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.ServerCommandManager.ProcessCommand(Hkmp.Api.Command.Server.ICommandSender,System.String)">
            <summary>
            Try to process a command given the sender and the message.
            </summary>
            <param name="commandSender">The sender of the command.</param>
            <param name="message">A user-input string message.</param>
            <returns>True if the message was processed as a command, false otherwise.</returns>
        </member>
        <member name="T:Hkmp.Game.Command.Server.SettingsCommand">
            <summary>
            Command for managing server settings.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Server.SettingsCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.SettingsCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.SettingsCommand.AuthorizedOnly">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Server.SettingsCommand._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Command.Server.SettingsCommand.ServerSettings">
            <summary>
            The server settings.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.SettingsCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Command.Server.WhiteListCommand">
            <summary>
            Command for managing the white-list.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Command.Server.WhiteListCommand.Trigger">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.WhiteListCommand.Aliases">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Command.Server.WhiteListCommand.AuthorizedOnly">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Command.Server.WhiteListCommand._whiteList">
            <summary>
            The white-list instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Command.Server.WhiteListCommand._serverManager">
            <summary>
            The server manager instance.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Command.Server.WhiteListCommand.Execute(Hkmp.Api.Command.Server.ICommandSender,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Command.Server.WhiteListCommand.SendUsage(Hkmp.Api.Command.Server.ICommandSender)">
            <summary>
            Send the general command usage to the given command sender.
            </summary>
            <param name="commandSender">The command sender to send to.</param>
        </member>
        <member name="T:Hkmp.Game.GameManager">
            <summary>
            Instantiates all necessary classes to start multiplayer activities.
            </summary>
        </member>
        <member name="M:Hkmp.Game.GameManager.#ctor(Hkmp.Game.Settings.ModSettings)">
            <summary>
            Constructs this GameManager instance by instantiating all other necessary classes.
            </summary>
            <param name="modSettings">The loaded ModSettings instance or null if no such instance could be
            loaded.</param>
        </member>
        <member name="T:Hkmp.Game.Server.Auth.AuthKeyList">
            <summary>
            Generic authentication list containing a set of authentication keys.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Server.Auth.AuthKeyList.FileName">
            <summary>
            The name of the file that stores the keys.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.Auth.AuthKeyList._approved">
            <summary>
            Set of approved authentication keys.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.#ctor">
            <summary>
            Construct the auth key list.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.Contains(System.String)">
            <summary>
            Whether a given key is contained in this list.
            </summary>
            <param name="authKey">The authentication key to check.</param>
            <returns>true if the key is contained in this list, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.Add(System.String)">
            <summary>
            Add the given auth key to the list.
            </summary>
            <param name="authKey">The authentication key to add.</param>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.Remove(System.String)">
            <summary>
            Remove the given auth key from the list.
            </summary>
            <param name="authKey">The authentication key to remove.</param>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.Clear">
            <summary>
            Remove all authentication keys from the list.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.WriteToFile">
            <summary>
            Write this authentication key list to a file.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.LoadFromFile(System.String)">
            <summary>
            Load an auth key list form file with the given path. Create a new
            instance if the path does not point to an existing file.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <returns>The loaded or fresh instance of the class.</returns>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.AuthKeyList.LoadFromFile``1(System.Func{``0},System.String)">
            <summary>
            Load a class extending AuthKeyList from file with the given path. Create a new instance
            if the path does not point to an existing file. This will call the given function to
            instantiate it.
            </summary>
            <param name="instantiator">The function instantiating a new instance.</param>
            <param name="fileName">The name of the file to load.</param>
            <typeparam name="T">The type of the auth key list.</typeparam>
            <returns>The loaded or fresh instance of the class.</returns>
        </member>
        <member name="T:Hkmp.Game.Server.Auth.BanList">
            <summary>
            Authentication key list containing keys and IPs for banned users.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.Auth.BanList.BanListFileName">
            <summary>
            The file name of the ban list.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.Auth.BanList._ipAddresses">
            <summary>
            Set of IP addresses of banned users.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.BanList.IsIpBanned(System.String)">
            <summary>
            Whether a given IP address is banned.
            </summary>
            <param name="address">The address to check.</param>
            <returns>true if the address is banned; otherwise false</returns>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.BanList.AddIp(System.String)">
            <summary>
            Add the given address to the ban list.
            </summary>
            <param name="address">The address to add.</param>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.BanList.RemoveIp(System.String)">
            <summary>
            Remove the given address from the ban list.
            </summary>
            <param name="address">The address to remove.</param>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.BanList.ClearIps">
            <summary>
            Removes all addresses from the ban list.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.BanList.LoadFromFile">
            <summary>
            Load the ban list from file.
            </summary>
            <returns>The loaded instance of the ban list or a new instance.</returns>
        </member>
        <member name="T:Hkmp.Game.Server.Auth.WhiteList">
            <summary>
            Authentication key list containing keys for white-listed users.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.Auth.WhiteList.WhiteListFileName">
            <summary>
            The file name of the white-list.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.Auth.WhiteList._isEnabled">
            <summary>
            Whether the white-list is enabled.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Server.Auth.WhiteList.IsEnabled">
            <inheritdoc cref="F:Hkmp.Game.Server.Auth.WhiteList._isEnabled" />
        </member>
        <member name="F:Hkmp.Game.Server.Auth.WhiteList._preListed">
            <summary>
            Set of names of users that are pre-listed, meaning that the auth key will be
            white-listed as soon as a player with that name logs in.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.WhiteList.IsPreListed(System.String)">
            <summary>
            Whether a given name is pre-listed.
            </summary>
            <param name="name">The name to check.</param>
            <returns>true if the name is pre-listed, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.WhiteList.AddPreList(System.String)">
            <summary>
            Add the given name to the pre-list.
            </summary>
            <param name="name">The name to add.</param>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.WhiteList.RemovePreList(System.String)">
            <summary>
            Remove the given name from the pre-list.
            </summary>
            <param name="name">The name to remove.</param>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.WhiteList.ClearPreList">
            <summary>
            Removes all names from the pre-list.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.WhiteList.GetPreListed">
            <summary>
            Get a string containing comma separated names of all pre-listed users.
            </summary>
            <returns>A string containing the pre-listed usernames.</returns>
        </member>
        <member name="M:Hkmp.Game.Server.Auth.WhiteList.LoadFromFile">
            <summary>
            Load the white-list from file.
            </summary>
            <returns>The loaded instance of the white-list or a new instance.</returns>
        </member>
        <member name="T:Hkmp.Game.Server.ModServerManager">
            <summary>
            Specialization of <see cref="T:Hkmp.Game.Server.ServerManager"/> that adds handlers for the mod specific things.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.ModServerManager.RegisterCommands">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Server.PlayerCommandSender">
            <summary>
            Specialization of a command sender that is a connected player.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Server.PlayerCommandSender.IsAuthorized">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.PlayerCommandSender.Type">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.PlayerCommandSender.Id">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Server.PlayerCommandSender._updateManager">
            <summary>
            The update manager corresponding to this player for sending messages.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.PlayerCommandSender.#ctor(System.Boolean,System.UInt16,Hkmp.Networking.Server.ServerUpdateManager)">
            <summary>
            Construct the player command sender.
            </summary>
            <param name="isAuthorized">Whether the player is authorized on the server.</param>
            <param name="id">The ID of the player.</param>
            <param name="updateManager">The update manager for the player.</param>
        </member>
        <member name="M:Hkmp.Game.Server.PlayerCommandSender.SendMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Server.ServerManager">
            <summary>
            Class that manages the server state (similar to ClientManager). For example the current scene of
            each player, to prevent sending redundant traffic.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager.AuthorizedFileName">
            <summary>
            The name of the authorized file.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager._netServer">
            <summary>
            The net server instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager._playerData">
            <summary>
            Dictionary mapping player IDs to their server player data instances.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager._whiteList">
            <summary>
            The white-list for managing player logins.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager._authorizedList">
            <summary>
            Authorized list for managing player permission.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager._banList">
            <summary>
            The list of banned users.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager.InternalServerSettings">
            <summary>
            The server settings.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager.CommandManager">
            <summary>
            The server command manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Server.ServerManager.AddonManager">
            <summary>
            The addon manager instance.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Server.ServerManager.Players">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerManager.ServerSettings">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Server.ServerManager.PlayerConnectEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Server.ServerManager.PlayerDisconnectEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Server.ServerManager.PlayerEnterSceneEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Server.ServerManager.PlayerLeaveSceneEvent">
            <inheritdoc />
        </member>
        <member name="E:Hkmp.Game.Server.ServerManager.PlayerChatEvent">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.#ctor(Hkmp.Networking.Server.NetServer,Hkmp.Game.Settings.ServerSettings,Hkmp.Networking.Packet.PacketManager)">
            <summary>
            Constructs the server manager.
            </summary>
            <param name="netServer">The net server instance.</param>
            <param name="serverSettings">The server settings.</param>
            <param name="packetManager">The packet manager instance.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.Initialize">
            <summary>
            Initializes the server manager.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.RegisterCommands">
            <summary>
            Register the default server commands.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.Start(System.Int32)">
            <summary>
            Starts a server with the given port.
            </summary>
            <param name="port">The port the server should run on.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.Stop">
            <summary>
            Stops the currently running server.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.AuthorizeKey(System.String)">
            <summary>
            Authorizes a given authentication key.
            </summary>
            <param name="authKey">The authentication key to authorize.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnUpdateServerSettings">
            <summary>
            Called when the server settings are updated, and need to be broadcast.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnHelloServer(System.UInt16,Hkmp.Networking.Packet.Data.HelloServer)">
            <summary>
            Callback method for when HelloServer data is received from a client.
            </summary>
            <param name="id">The ID of the client.</param>
            <param name="helloServer">The HelloServer packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnClientEnterScene(System.UInt16,Hkmp.Networking.Packet.Data.ServerPlayerEnterScene)">
            <summary>
            Callback method for when a player enters a scene.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="playerEnterScene">The ServerPlayerEnterScene packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnClientEnterScene(Hkmp.Game.Server.ServerPlayerData)">
            <summary>
            Method that handles a player entering a scene.
            </summary>
            <param name="playerData">The ServerPlayerData corresponding to the player.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnClientLeaveScene(System.UInt16)">
            <summary>
            Callback method for when a player leaves a scene.
            </summary>
            <param name="id">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnPlayerUpdate(System.UInt16,Hkmp.Networking.Packet.Data.PlayerUpdate)">
            <summary>
            Callback method for when a player update is received.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="playerUpdate">The PlayerUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnPlayerMapUpdate(System.UInt16,Hkmp.Networking.Packet.Data.PlayerMapUpdate)">
            <summary>
            Callback method for when a player map update is received from a player.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="playerMapUpdate">The PlayerMapUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnEntityUpdate(System.UInt16,Hkmp.Networking.Packet.Data.EntityUpdate)">
            <summary>
            Callback method for when an entity update is received from a player.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="entityUpdate">The EntityUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnPlayerDisconnect(System.UInt16)">
            <summary>
            Callback method for when a player disconnect is received.
            </summary>
            <param name="id">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.InternalDisconnectPlayer(System.UInt16,Hkmp.Networking.Packet.Data.DisconnectReason)">
            <summary>
            Internal method for disconnecting a player with the given ID for the given reason.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="reason">The reason for the disconnect.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.ProcessPlayerDisconnect(System.UInt16,System.Boolean)">
            <summary>
            Process a disconnect for the player with the given ID.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="timeout">Whether this player timed out or disconnected normally.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnPlayerDeath(System.UInt16)">
            <summary>
            Callback method for when a player dies. 
            </summary>
            <param name="id">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnPlayerTeamUpdate(System.UInt16,Hkmp.Networking.Packet.Data.ServerPlayerTeamUpdate)">
            <summary>
            Callback method for when a player updates their team.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="teamUpdate">The ServerPlayerTeamUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnPlayerSkinUpdate(System.UInt16,Hkmp.Networking.Packet.Data.ServerPlayerSkinUpdate)">
            <summary>
            Callback method for when a player updates their skin.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="skinUpdate">The ServerPlayerSkinUpdate packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnServerShutdown">
            <summary>
            Callback method for when the server is shut down.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.HandleInvalidLoginAddons(Hkmp.Networking.Server.ServerUpdateManager)">
            <summary>
            Handle a login request for a client that has invalid addons.
            </summary>
            <param name="updateManager">The update manager for the client.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnLoginRequest(System.UInt16,System.Net.IPEndPoint,Hkmp.Networking.Packet.Data.LoginRequest,Hkmp.Networking.Server.ServerUpdateManager)">
            <summary>
            Method for handling a login request for a new client.
            </summary>
            <param name="id">The ID of the client.</param>
            <param name="endPoint">The IP endpoint of the client.</param>
            <param name="loginRequest">The LoginRequest packet data.</param>
            <param name="updateManager">The update manager for the client.</param>
            <returns>true if the login request was approved, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnClientTimeout(System.UInt16)">
            <summary>
            Callback method for when a client times out.
            </summary>
            <param name="id">The ID of the client.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.SendDataInSameScene(System.UInt16,System.String,System.Action{System.UInt16})">
            <summary>
            Execute a given action by passing the ID of each player that is in the same scene as the given
            scene name except for the source ID.
            </summary>
            <param name="sourceId">The ID of the source player.</param>
            <param name="sceneName">The name of the scene to send to.</param>
            <param name="dataAction">The action to execute with each ID.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.TryProcessCommand(Hkmp.Api.Command.Server.ICommandSender,System.String)">
            <summary>
            Try and process a given message by a given command sender as a command.
            </summary>
            <param name="commandSender">The command sender that sent the message.</param>
            <param name="message">The message that was sent.</param>
            <returns>true if the message was processed as a command, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.OnChatMessage(System.UInt16,Hkmp.Networking.Packet.Data.ChatMessage)">
            <summary>
            Callback method for when a chat message is received from a player.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="chatMessage">The ChatMessage packet data.</param>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.GetPlayer(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.TryGetPlayer(System.UInt16,Hkmp.Api.Server.IServerPlayer@)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.CheckValidMessage(System.String)">
            <summary>
            Check whether a given string message is valid for sending over the network.
            </summary>
            <param name="message">The string message to check.</param>
            <exception cref="T:System.ArgumentException">Thrown if the message is null, exceeds the max length or contains
            invalid characters.</exception>
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.SendMessage(System.UInt16,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.SendMessage(Hkmp.Api.Server.IServerPlayer,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.BroadcastMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.DisconnectPlayer(System.UInt16,Hkmp.Networking.Packet.Data.DisconnectReason)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Server.ServerManager.ApplyServerSettings(Hkmp.Game.Settings.ServerSettings)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Game.Server.ServerPlayerData">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.Id">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.IpAddressString">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.AuthKey">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.IsAuthorized">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.Username">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.CurrentScene">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.Position">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.Scale">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.HasMapIcon">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.MapPosition">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.AnimationId">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.Team">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Server.ServerPlayerData.SkinId">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Game.Server.ServerPlayerData._authorizedList">
            <summary>
            Reference of the authorized list for checking whether this player is authorized.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Server.ServerPlayerData.#ctor(System.UInt16,System.String,System.String,System.String,Hkmp.Game.Server.Auth.AuthKeyList)">
            <summary>
            Constructs new server player data given ID, name, auth key and reference of authorized list.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="ipAddress">The IP address of the client as a string.</param>
            <param name="username">The username of the player.</param>
            <param name="authKey">The authentication key of the player.</param>
            <param name="authorizedList">A reference to the authorized list of the server.</param>
        </member>
        <member name="T:Hkmp.Game.Settings.ModSettings">
            <summary>
            Settings class that stores user preferences.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.AuthKey">
            <summary>
            The authentication key for the user.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.HideUiKey">
            <summary>
            The key to hide the HKMP UI.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.OpenChatKey">
            <summary>
            The key to open the chat.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.ConnectAddress">
            <summary>
            The last used address to join a server.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.ConnectPort">
            <summary>
            The last used port to join a server.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.Username">
            <summary>
            The last used username to join a server.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.DisplayPing">
            <summary>
            Whether to display a UI element for the ping.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.AutoConnectWhenHosting">
            <summary>
            Whether to automatically connect to the server when starting hosting.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.DisabledAddons">
            <summary>
            Set of addon names for addons that are disabled by the user.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.ModSettings.ServerSettings">
            <summary>
            The last used server settings in a hosted server.
            </summary>
        </member>
        <member name="T:Hkmp.Game.Settings.ServerSettings">
            <inheritdoc cref="T:Hkmp.Api.Server.IServerSettings" />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.IsPvpEnabled">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.IsBodyDamageEnabled">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.AlwaysShowMapIcons">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.OnlyBroadcastMapIconWithWaywardCompass">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.DisplayNames">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.TeamsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.AllowSkins">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.AllowParries">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.NailDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.GrubberflyElegyDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.VengefulSpiritDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.ShadeSoulDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.DesolateDiveDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.DescendingDarkDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.HowlingWraithDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.AbyssShriekDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.GreatSlashDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.DashSlashDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.CycloneSlashDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.SporeShroomDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.SporeDungShroomDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.ThornOfAgonyDamage">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Game.Settings.ServerSettings.SharpShadowDamage">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Settings.ServerSettings.SetAllProperties(Hkmp.Game.Settings.ServerSettings)">
            <summary>
            Set all properties in this <see cref="T:Hkmp.Game.Settings.ServerSettings"/> instance to the values from the given
            <see cref="T:Hkmp.Game.Settings.ServerSettings"/> instance.
            </summary>
            <param name="serverSettings">The instance to copy from.</param>
        </member>
        <member name="M:Hkmp.Game.Settings.ServerSettings.Equals(Hkmp.Game.Settings.ServerSettings)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Settings.ServerSettings.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Settings.ServerSettings.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Game.Settings.ServerSettings.op_Equality(Hkmp.Game.Settings.ServerSettings,Hkmp.Game.Settings.ServerSettings)">
            <summary>
            Indicates whether one <see cref="T:Hkmp.Game.Settings.ServerSettings"/> is equal to another <see cref="T:Hkmp.Game.Settings.ServerSettings"/>.
            </summary>
            <param name="left">The first <see cref="T:Hkmp.Game.Settings.ServerSettings"/> to compare.</param>
            <param name="right">The second <see cref="T:Hkmp.Game.Settings.ServerSettings"/> to compare.</param>
            <returns>true if <paramref name="left"/> is equal to <paramref name="right"/>; false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Game.Settings.ServerSettings.op_Inequality(Hkmp.Game.Settings.ServerSettings,Hkmp.Game.Settings.ServerSettings)">
            <summary>
            Indicates whether one <see cref="T:Hkmp.Game.Settings.ServerSettings"/> is not equal to another <see cref="T:Hkmp.Game.Settings.ServerSettings"/>.
            </summary>
            <param name="left">The first <see cref="T:Hkmp.Game.Settings.ServerSettings"/> to compare.</param>
            <param name="right">The second <see cref="T:Hkmp.Game.Settings.ServerSettings"/> to compare.</param>
            <returns>true if <paramref name="left"/> is not equal to <paramref name="right"/>; false otherwise.</returns>
        </member>
        <member name="T:Hkmp.Game.Settings.SettingAliasAttribute">
            <summary>
            Attribute to define aliases to settings properties/fields.
            </summary>
        </member>
        <member name="P:Hkmp.Game.Settings.SettingAliasAttribute.Aliases">
            <summary>
            The string array containing the aliases.
            </summary>
        </member>
        <member name="M:Hkmp.Game.Settings.SettingAliasAttribute.#ctor(System.String[])">
            <summary>
            Constructs the attribute with the given alias strings.
            </summary>
            <param name="aliases">One or more strings containing aliases.</param>
        </member>
        <member name="T:Hkmp.Game.Team">
            <summary>
            Enumeration class for the possible team values.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Team.None">
            <summary>
            No team.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Team.Moss">
            <summary>
            The green Moss team.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Team.Hive">
            <summary>
            The orange Hive team.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Team.Grimm">
            <summary>
            The red Grimm team.
            </summary>
        </member>
        <member name="F:Hkmp.Game.Team.Lifeblood">
            <summary>
            The blue Lifeblood team.
            </summary>
        </member>
        <member name="T:Hkmp.HkmpMod">
            <summary>
            Mod class for the HKMP mod.
            </summary>
        </member>
        <member name="F:Hkmp.HkmpMod.PreloadedObjects">
            <summary>
            Dictionary containing preloaded objects by scene name and object path.
            </summary>
        </member>
        <member name="F:Hkmp.HkmpMod._modSettings">
            <summary>
            Statically create Settings object, so it can be accessed early.
            </summary>
        </member>
        <member name="M:Hkmp.HkmpMod.#ctor">
            <summary>
            Construct the HKMP mod.
            </summary>
        </member>
        <member name="M:Hkmp.HkmpMod.GetVersion">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.HkmpMod.GetPreloadNames">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.HkmpMod.Initialize(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,UnityEngine.GameObject}})">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.HkmpMod.OnLoadGlobal(Hkmp.Game.Settings.ModSettings)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.HkmpMod.OnSaveGlobal">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Imports.DebugMod">
            <summary>
            A class to call functions from DebugMod using MonoMod.Interop. The functions will only run if DebugMod is loaded.
            </summary>
        </member>
        <member name="T:Hkmp.Imports.DebugMod.DebugImport">
            <summary>
            Static class with members to indicate to MonoMod which methods to get from DebugMod.
            </summary>
        </member>
        <member name="M:Hkmp.Imports.DebugMod.#cctor">
            <summary>
            Static constructor for loading the mod interop. MonoMod will automatically fill in the actions in DebugImport
            the first time they are used.
            </summary>
        </member>
        <member name="M:Hkmp.Imports.DebugMod.SetLockKeyBinds(System.Boolean)">
            <summary>
            Sets whether or not key-binds for DebugMod are locked.
            </summary>
            <param name="value">Whether the key-binds should be locked or not.</param>
        </member>
        <member name="T:Hkmp.Logging.AddonLogger">
            <summary>
            ILogger wrapper that forwards to the static <see cref="T:Hkmp.Logging.Logger"/> methods.
            </summary>
        </member>
        <member name="F:Hkmp.Logging.AddonLogger._instance">
            <summary>
            The static addon logger instance.
            </summary>
        </member>
        <member name="P:Hkmp.Logging.AddonLogger.Instance">
            <summary>
            Static addon logger property that accesses/creates the instance.
            </summary>
        </member>
        <member name="M:Hkmp.Logging.AddonLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.AddonLogger.Fine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.AddonLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.AddonLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.AddonLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Logging.BaseLogger">
            <summary>
            Abstract base class for loggers that prepends messages with their log level and origin class.
            </summary>
        </member>
        <member name="M:Hkmp.Logging.BaseLogger.GetOriginClassName">
            <summary>
            Get the class name of the object that called the log function in which this method is used. Will skip
            classes in the stack frame that are within the "Hkmp.Logging" namespace.
            Note that this method is prone to breaking if namespace changes or stack frame changes for logging occur.
            </summary>
            <returns>The full class name of the origin object or name of the method if no such object exists.</returns>
        </member>
        <member name="M:Hkmp.Logging.BaseLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.BaseLogger.Fine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.BaseLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.BaseLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.BaseLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Logging.ILogger">
            <summary>
            Logger that logs messages to the output.
            </summary>
        </member>
        <member name="M:Hkmp.Logging.ILogger.Info(System.String)">
            <summary>
            Log a message as information.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.ILogger.Fine(System.String)">
            <summary>
            Log a message as fine information.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.ILogger.Debug(System.String)">
            <summary>
            Log a message as debug information.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.ILogger.Warn(System.String)">
            <summary>
            Log a message as a warning.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.ILogger.Error(System.String)">
            <summary>
            Log a message as an error.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="F:Hkmp.Logging.Logger.Loggers">
            <summary>
            A list of logger instances
            </summary>
        </member>
        <member name="M:Hkmp.Logging.Logger.Info(System.String)">
            <summary>
            Log a message as information to all registered loggers.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.Logger.Fine(System.String)">
            <summary>
            Log a message as fine information to all registered loggers.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.Logger.Debug(System.String)">
            <summary>
            Log a message as debug information to all registered loggers.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.Logger.Warn(System.String)">
            <summary>
            Log a message as a warning to all registered loggers.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.Logger.Error(System.String)">
            <summary>
            Log a message as an error to all registered loggers.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="M:Hkmp.Logging.Logger.AddLogger(Hkmp.Logging.ILogger)">
            <summary>
            Add a logger instance to use when logging.
            </summary>
            <param name="logger">The instance of ILogger.</param>
        </member>
        <member name="T:Hkmp.Logging.ModLogger">
            <summary>
            Logger class for logging to the ModLog.txt file.
            </summary>
        </member>
        <member name="M:Hkmp.Logging.ModLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.ModLogger.Fine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.ModLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.ModLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.ModLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Logging.ModLogger.Log(Modding.LogLevel,System.String)">
            <summary>
            Log the given message with the given log level to the ModLog.
            </summary>
            <param name="level">The log level of the message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:Hkmp.Math.Vector2">
            <summary>
            Class for two dimensional vectors.
            </summary>
        </member>
        <member name="F:Hkmp.Math.Vector2.Zero">
            <summary>
            The zero (0, 0) vector.
            </summary>
        </member>
        <member name="P:Hkmp.Math.Vector2.X">
            <summary>
            The X coordinate of this vector.
            </summary>
        </member>
        <member name="P:Hkmp.Math.Vector2.Y">
            <summary>
            The Y coordinate of this vector.
            </summary>
        </member>
        <member name="M:Hkmp.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Construct a vector with the given X and Y values.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:Hkmp.Math.Vector2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Math.Vector2.Equals(Hkmp.Math.Vector2)">
            <summary>
            Determines whether the given vector is equal to the current instance.
            </summary>
            <param name="other">The vector to compare with the current vector.</param>
            <returns>true if the given vector is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Hkmp.Math.Vector2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Math.Vector2.op_Equality(Hkmp.Math.Vector2,Hkmp.Math.Vector2)">
            <summary>
            Determines whether the given vectors are equal.
            </summary>
            <param name="lhs">The left-hand side to compare.</param>
            <param name="rhs">The right-hand side to compare.</param>
            <returns>true if the given vectors are equal; otherwise, false.</returns>
        </member>
        <member name="M:Hkmp.Math.Vector2.op_Inequality(Hkmp.Math.Vector2,Hkmp.Math.Vector2)">
            <summary>
            Determines whether the given vector are not equal.
            </summary>
            <param name="lhs">The left-hand side to compare.</param>
            <param name="rhs">The right-hand side to compare.</param>
            <returns>true if the given vectors are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Hkmp.Math.Vector2.op_Explicit(UnityEngine.Vector2)~Hkmp.Math.Vector2">
            <summary>
            Explicit conversion from a UnityEngine.Vector2 to a Hkmp.Math.Vector2.
            </summary>
            <param name="vector2">The UnityEngine.Vector2 to convert.</param>
            <returns>The converted Hkmp.Math.Vector2.</returns>
        </member>
        <member name="M:Hkmp.Math.Vector2.op_Explicit(Hkmp.Math.Vector2)~UnityEngine.Vector2">
            <summary>
            Explicit conversion from a Hkmp.Math.Vector2 to a UnityEngine.Vector2.
            </summary>
            <param name="vector2">The Hkmp.Math.Vector2 to convert.</param>
            <returns>The converted UnityEngine.Vector2.</returns>
        </member>
        <member name="T:Hkmp.Math.Vector3">
            <summary>
            Class for three dimensional vectors.
            </summary>
        </member>
        <member name="P:Hkmp.Math.Vector3.X">
            <summary>
            The X coordinate of this vector.
            </summary>
        </member>
        <member name="P:Hkmp.Math.Vector3.Y">
            <summary>
            The Y coordinate of this vector.
            </summary>
        </member>
        <member name="P:Hkmp.Math.Vector3.Z">
            <summary>
            The Z coordinate of this vector.
            </summary>
        </member>
        <member name="M:Hkmp.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a vector with the given X, Y and Z values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Hkmp.Math.Vector3.op_Explicit(UnityEngine.Vector3)~Hkmp.Math.Vector3">
            <summary>
            Explicit conversion from a UnityEngine.Vector3 to a Hkmp.Math.Vector3.
            </summary>
            <param name="vector3">The UnityEngine.Vector3 to convert.</param>
            <returns>The converted Hkmp.Math.Vector3.</returns>
        </member>
        <member name="M:Hkmp.Math.Vector3.op_Explicit(Hkmp.Math.Vector3)~UnityEngine.Vector3">
            <summary>
            Explicit conversion from a Hkmp.Math.Vector3 to a UnityEngine.Vector3.
            </summary>
            <param name="vector3">The Hkmp.Math.Vector3 to convert.</param>
            <returns>The converted UnityEngine.Vector3.</returns>
        </member>
        <member name="T:Hkmp.Networking.Client.ClientUpdateManager">
            <summary>
            Specialization of <see cref="T:Hkmp.Networking.UdpUpdateManager`2"/> for client to server packet sending.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Construct the update manager with a UDP net client.
            </summary>
            <param name="udpSocket">The UDP socket for the local client.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SendPacket(Hkmp.Networking.Packet.Packet)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.ResendReliableData(Hkmp.Networking.Packet.ServerUpdatePacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.FindOrCreatePlayerUpdate">
            <summary>
            Find an existing or create a new PlayerUpdate instance in the current update packet.
            </summary>
            <returns>The existing or new PlayerUpdate instance.</returns>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetLoginRequestData(System.String,System.String,System.Collections.Generic.List{Hkmp.Networking.Packet.Data.AddonData})">
            <summary>
            Set the login request data in the current packet.
            </summary>
            <param name="username">The username of the client.</param>
            <param name="authKey">The auth key of the client.</param>
            <param name="addonData">A list of addon data of the client.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdatePlayerPosition(Hkmp.Math.Vector2)">
            <summary>
            Update the player position in the current packet.
            </summary>
            <param name="position">Vector2 representing the new position.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdatePlayerScale(System.Boolean)">
            <summary>
            Update the player scale in the current packet.
            </summary>
            <param name="scale">The boolean scale.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdatePlayerMapPosition(Hkmp.Math.Vector2)">
            <summary>
            Update the player map position in the current packet.
            </summary>
            <param name="mapPosition">Vector2 representing the new map position.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdatePlayerMapIcon(System.Boolean)">
            <summary>
            Update whether the player has a map icon.
            </summary>
            <param name="hasIcon">Whether the player has a map icon.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdatePlayerAnimation(Hkmp.Animation.AnimationClip,System.Int32,System.Boolean[])">
            <summary>
            Update the player animation in the current packet.
            </summary>
            <param name="clip">The animation clip.</param>
            <param name="frame">The frame of the animation.</param>
            <param name="effectInfo">Boolean array of effect info.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.FindOrCreateEntityUpdate(Hkmp.Game.Client.Entity.EntityType,System.Byte)">
            <summary>
            Find an existing or create a new EntityUpdate instance in the current update packet.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="entityId">The ID of the entity.</param>
            <returns>The existing or new EntityUpdate instance.</returns>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdateEntityPosition(Hkmp.Game.Client.Entity.EntityType,System.Byte,Hkmp.Math.Vector2)">
            <summary>
            Update an entity's position in the current packet.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="entityId">The ID of the entity.</param>
            <param name="position">The new position of the entity.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdateEntityState(Hkmp.Game.Client.Entity.EntityType,System.Byte,System.Byte)">
            <summary>
            Update an entity's state in the current packet.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="entityId">The ID of the entity.</param>
            <param name="state">The new state of the entity.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.UpdateEntityStateAndVariables(Hkmp.Game.Client.Entity.EntityType,System.Byte,System.Byte,System.Collections.Generic.List{System.Byte})">
            <summary>
            Update an entity's state and variables in the current packet.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="entityId">The ID of the entity.</param>
            <param name="state">The new state of the entity.</param>
            <param name="fsmVariables">List of entity variables for this update.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetPlayerDisconnect">
            <summary>
            Set that the player has disconnected in the current packet.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetTeamUpdate(Hkmp.Game.Team)">
            <summary>
            Set a team update in the current packet.
            </summary>
            <param name="team">The new team of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetSkinUpdate(System.Byte)">
            <summary>
            Set a skin update in the current packet.
            </summary>
            <param name="skinId">The ID of the skin of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetHelloServerData(System.String,System.String,Hkmp.Math.Vector2,System.Boolean,System.UInt16)">
            <summary>
            Set hello server data in the current packet.
            </summary>
            <param name="username">The username of the player.</param>
            <param name="sceneName">The name of the current scene of the player.</param>
            <param name="position">The position of the player.</param>
            <param name="scale">The scale of the player.</param>
            <param name="animationClipId">The animation clip ID of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetEnterSceneData(System.String,Hkmp.Math.Vector2,System.Boolean,System.UInt16)">
            <summary>
            Set enter scene data in the current packet.
            </summary>
            <param name="sceneName">The name of the entered scene.</param>
            <param name="position">The position of the player.</param>
            <param name="scale">The scale of the player.</param>
            <param name="animationClipId">The animation clip ID of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetLeftScene">
            <summary>
            Set that the player has left the current scene in the current packet.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetDeath">
            <summary>
            Set that the player has died in the current packet.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.ClientUpdateManager.SetChatMessage(System.String)">
            <summary>
            Set a chat message in the current packet.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="T:Hkmp.Networking.Client.OnReceive">
            <summary>
            Delegate for receiving a list of packets.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Client.NetClient">
            <summary>
            The networking client that manages the UDP client for sending and receiving data. This only
            manages client side networking, e.g. sending to and receiving from the server.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.NetClient._packetManager">
            <summary>
            The packet manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.NetClient._udpNetClient">
            <summary>
            The underlying UDP net client for networking.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Client.NetClient.UpdateManager">
            <summary>
            The client update manager for this net client.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.Client.NetClient.ConnectEvent">
            <summary>
            Event that is called when the client connects to a server.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.Client.NetClient.ConnectFailedEvent">
            <summary>
            Event that is called when the client fails to connect to a server.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.Client.NetClient.DisconnectEvent">
            <summary>
            Event that is called when the client disconnects from a server.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.Client.NetClient.TimeoutEvent">
            <summary>
            Event that is called when the client times out from a connection.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Client.NetClient.IsConnected">
            <summary>
            Boolean denoting whether the client is connected to a server.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Client.NetClient.IsConnecting">
            <summary>
            Boolean denoting whether the client is currently attempting connection.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.NetClient._updateTaskTokenSource">
            <summary>
            Cancellation token source for the task for the update manager.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.#ctor(Hkmp.Networking.Packet.PacketManager)">
            <summary>
            Construct the net client with the given packet manager.
            </summary>
            <param name="packetManager">The packet manager instance.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.OnConnect(Hkmp.Networking.Packet.Data.LoginResponse)">
            <summary>
            Callback method for when the client receives a login response from a server connection.
            </summary>
            <param name="loginResponse">The LoginResponse packet data.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.OnConnectTimedOut">
            <summary>
            Callback method for when the client connection times out.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.OnConnectFailed(Hkmp.Networking.Client.ConnectFailedResult)">
            <summary>
            Callback method for when the client connection fails.
            </summary>
            <param name="result">The connection failed result.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.OnReceiveData(System.Collections.Generic.List{Hkmp.Networking.Packet.Packet})">
            <summary>
            Callback method for when the net client receives data.
            </summary>
            <param name="packets">A list of raw received packets.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.Connect(System.String,System.Int32,System.String,System.String,System.Collections.Generic.List{Hkmp.Networking.Packet.Data.AddonData})">
            <summary>
            Starts establishing a connection with the given host on the given port.
            </summary>
            <param name="address">The address of the host to connect to.</param>
            <param name="port">The port of the host to connect to.</param>
            <param name="username">The username of the client.</param>
            <param name="authKey">The auth key of the client.</param>
            <param name="addonData">A list of addon data that the client has.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.Disconnect">
            <summary>
            Disconnect from the current server.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.GetNetworkSender``1(Hkmp.Api.Client.ClientAddon)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Client.NetClient.GetNetworkReceiver``1(Hkmp.Api.Client.ClientAddon,System.Func{``0,Hkmp.Networking.Packet.IPacketData})">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Client.ConnectFailedResult">
            <summary>
            Class that stores the result of a failed connection.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Client.ConnectFailedResult.Type">
            <summary>
            The type of the failed connection.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Client.ConnectFailedResult.AddonData">
            <summary>
            If the type for failing is having invalid addons, this field contains the addon data that we should have.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Client.ConnectFailedResult.FailType">
            <summary>
            Enumeration of fail types.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Client.UdpNetClient">
            <summary>
            NetClient that uses the UDP protocol.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.UdpNetClient.MaxUdpPacketSize">
            <summary>
            Maximum size of a UDP packet in bytes.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.UdpNetClient.UdpSocket">
            <summary>
            The underlying UDP socket.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.UdpNetClient._onReceive">
            <summary>
            Delegate called when packets are received.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.UdpNetClient._leftoverData">
            <summary>
            Byte array containing received data that was not included in a packet object yet.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Client.UdpNetClient._receiveTokenSource">
            <summary>
            Cancellation token source for the thread of receiving network data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Client.UdpNetClient.RegisterOnReceive(Hkmp.Networking.Client.OnReceive)">
            <summary>
            Register a callback for when packets are received.
            </summary>
            <param name="onReceive">The delegate that handles the received packets.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.UdpNetClient.Connect(System.String,System.Int32)">
            <summary>
            Connects the UDP socket to the host at the given address and port.
            </summary>
            <param name="address">The address of the host.</param>
            <param name="port">The port of the host.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.UdpNetClient.ReceiveData(System.Threading.CancellationToken)">
            <summary>
            Continuously receive network UDP data and queue it for processing.
            </summary>
            <param name="token">The cancellation token for checking whether this method is requested to cancel.</param>
        </member>
        <member name="M:Hkmp.Networking.Client.UdpNetClient.Disconnect">
            <summary>
            Disconnect the UDP client and clean it up.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.AddonPacketData">
            <summary>
            Class that holds all packet data for a specific addon.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.AddonPacketData.PacketData">
            <summary>
            Dictionary mapping packet IDs to packet data instances.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.AddonPacketData.PacketIdSize">
            <summary>
            The size of the packet ID space.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.AddonPacketData.PacketIdEnumerator">
            <summary>
            Enumerator to go over each packet ID in the packet ID space of this addon. 
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.AddonPacketData._packetIdArray">
            <summary>
            Byte array containing all raw packet ID bytes.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.AddonPacketData.#ctor(System.Byte)">
            <summary>
            Construct this addon packet data class with the packet ID size.
            </summary>
            <param name="packetIdSize">The size of the packet ID space.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.AddonPacketData.GetEmptyCopy">
            <summary>
            Return an empty copy of this class with the same packet ID size.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hkmp.Networking.Packet.AddonPacketInfo">
            <summary>
            Class that stores information about addons that is needed to read addon data from raw packet instances.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.AddonPacketInfo.PacketDataInstantiator">
            <summary>
            The function that instantiates IPacketData instances from a packet ID as byte.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.AddonPacketInfo.PacketIdSize">
            <summary>
            The size of the packet ID space.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.AddonPacketInfo.#ctor(System.Func{System.Byte,Hkmp.Networking.Packet.IPacketData},System.Byte)">
            <summary>
            Construct the addon info with the given instantiator and packet ID size.
            </summary>
            <param name="packetDataInstantiator">The instantiation function.</param>
            <param name="packetIdSize">The size of the packet ID space.</param>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ChatMessage">
            <summary>
            Packet data for a chat message.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.ChatMessage.MaxMessageLength">
            <summary>
            The maximum length of a chat message.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ChatMessage.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ChatMessage.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ChatMessage.Message">
            <summary>
            The message string.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ChatMessage.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ChatMessage.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ClientPlayerDisconnect">
            <summary>
            Packet data from server to client that another player has disconnected.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerDisconnect.Username">
            <summary>
            The username of the player that disconnected.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerDisconnect.TimedOut">
            <summary>
            Whether the player timed out or disconnected normally.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerDisconnect.#ctor">
            <summary>
            Construct the client player disconnect data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerDisconnect.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerDisconnect.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.EmptyData">
            <summary>
            Packet data for empty data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EmptyData.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EmptyData.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.EmptyData.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.EmptyData.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ReliableEmptyData">
            <summary>
            Packet data for empty data that should be reliable.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ReliableEmptyData.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ReliableEmptyData.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ReliableEmptyData.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ReliableEmptyData.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.EntityUpdate">
            <summary>
            Packet data for an entity update.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.EntityType">
            <summary>
            The type of the entity.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.Id">
            <summary>
            The ID of the entity.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.UpdateTypes">
            <summary>
            A set containing the types of updates contained in this packet.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.Position">
            <summary>
            The position of the entity.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.State">
            <summary>
            The state of the entity.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.EntityUpdate.Variables">
            <summary>
            A list of variables for the entity.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.EntityUpdate.#ctor">
            <summary>
            Construct the entity update data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.EntityUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.EntityUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.EntityUpdateType">
            <summary>
            Enumeration of entity update types.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.GenericClientData">
            <summary>
            Packet data for generic data at least containing a client ID.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.GenericClientData.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.GenericClientData.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.GenericClientData.Id">
            <summary>
            The ID of the client.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.GenericClientData.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.GenericClientData.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.HelloClient">
            <summary>
            Packet data for the hello client data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloClient.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloClient.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloClient.ClientInfo">
            <summary>
            List of ID, username pairs for each connected client.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.HelloClient.#ctor">
            <summary>
            Construct the hello client data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.HelloClient.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.HelloClient.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.HelloServer">
            <summary>
            Packet data for the hello server data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloServer.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloServer.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloServer.Username">
            <summary>
            The username of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloServer.SceneName">
            <summary>
            The name of the current scene of the player. 
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloServer.Position">
            <summary>
            The position of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloServer.Scale">
            <summary>
            The scale of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.HelloServer.AnimationClipId">
            <summary>
            The animation clip ID of the player.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.HelloServer.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.HelloServer.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.LoginRequest">
            <summary>
            Packet data for the login request data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginRequest.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginRequest.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginRequest.Username">
            <summary>
            The username of the client.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginRequest.AuthKey">
            <summary>
            The authentication key of the client.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginRequest.AddonData">
            <summary>
            A list of addon data of the client.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.LoginRequest.#ctor">
            <summary>
            Construct the login request.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.LoginRequest.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.LoginRequest.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.AddonData">
            <summary>
            Addon data class denoting identifying information about an addon.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.AddonData.Identifier">
            <summary>
            The identifier of the addon (aka name).
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.AddonData.Version">
            <summary>
            The version of the addon.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.AddonData.Equals(Hkmp.Networking.Packet.Data.AddonData)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.AddonData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.AddonData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.LoginResponse">
            <summary>
            Packet data for the login response data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginResponse.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginResponse.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginResponse.LoginResponseStatus">
            <summary>
            The login response status.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginResponse.AddonData">
            <summary>
            List of addon data that the server uses.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.LoginResponse.AddonOrder">
            <summary>
            The order in which the addons have been assigned IDs.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.LoginResponse.#ctor">
            <summary>
            Construct the login response data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.LoginResponse.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.LoginResponse.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.LoginResponseStatus">
            <summary>
            Enumeration of login response statuses.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.LoginResponseStatus.Success">
            <summary>
            When the request has been approved and connection is a success.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.LoginResponseStatus.NotWhiteListed">
            <summary>
            When the user is not white-listed.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.LoginResponseStatus.Banned">
            <summary>
            When the user is banned.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.LoginResponseStatus.InvalidAddons">
            <summary>
            When there is a mismatch between the addons of the server and the client.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.LoginResponseStatus.InvalidUsername">
            <summary>
            When the username is already in use.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.PacketDataCollection`1">
            <summary>
            Packet data for a collection of individual packet data instances.
            </summary>
            <typeparam name="T">The type of the underlying packet data instances.</typeparam>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PacketDataCollection`1.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PacketDataCollection`1.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.PlayerConnect">
            <summary>
            Packet data for the player connect data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.PlayerConnect.Username">
            <summary>
            The username of the connecting player.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerConnect.#ctor">
            <summary>
            Construct the player connect data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerConnect.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerConnect.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene">
            <summary>
            Packet data for the client-bound player enter scene data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.Username">
            <summary>
            The username of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.Position">
            <summary>
            The position of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.Scale">
            <summary>
            The scale of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.Team">
            <summary>
            The team of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.SkinId">
            <summary>
            The ID of the skin of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.AnimationClipId">
            <summary>
            The ID of the animation clip of the player.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.#ctor">
            <summary>
            Construct the client player enter scene data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerEnterScene.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene">
            <summary>
            Packet data for the client player already in scene data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene.PlayerEnterSceneList">
            <summary>
            List of client player enter scene data instances.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene.SceneHost">
            <summary>
            Whether the receiving player is scene host.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene.#ctor">
            <summary>
            Construct the client player already in scene data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerAlreadyInScene.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene">
            <summary>
            Packet data for the server-bound player enter scene data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.NewSceneName">
            <summary>
            The new scene name that the player entered.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.Position">
            <summary>
            The position of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.Scale">
            <summary>
            The scale of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.AnimationClipId">
            <summary>
            The ID of the animation clip of the player.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerPlayerEnterScene.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.PlayerMapUpdate">
            <summary>
            Packet data for the player map update.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.PlayerMapUpdate.HasIcon">
            <summary>
            Whether the player has an active icon. If false, then there is no map position
            transmit anymore.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerMapUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerMapUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ClientPlayerSkinUpdate">
            <summary>
            Packet data for client-bound player skin update.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerSkinUpdate.SkinId">
            <summary>
            The ID of the skin.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerSkinUpdate.#ctor">
            <summary>
            Construct the player skin update data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerSkinUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerSkinUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ServerPlayerSkinUpdate">
            <summary>
            Packet data for the server-bound player skin update.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerSkinUpdate.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerSkinUpdate.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerSkinUpdate.SkinId">
            <summary>
            The ID of the skin.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerPlayerSkinUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerPlayerSkinUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ClientPlayerTeamUpdate">
            <summary>
            Packet data of the client-bound player team update.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerTeamUpdate.Username">
            <summary>
            The username of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ClientPlayerTeamUpdate.Team">
            <summary>
            The team of the player.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerTeamUpdate.#ctor">
            <summary>
            Construct the player team update data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerTeamUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ClientPlayerTeamUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ServerPlayerTeamUpdate">
            <summary>
            Packet data for the server-bound player team update.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerTeamUpdate.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerTeamUpdate.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerPlayerTeamUpdate.Team">
            <summary>
            The team of the player.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerPlayerTeamUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerPlayerTeamUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.PlayerUpdate">
            <summary>
            Packet data for the player update data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.PlayerUpdate.UpdateTypes">
            <summary>
            Set containing the update types that this packet contains.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.PlayerUpdate.Position">
            <summary>
            The position of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.PlayerUpdate.Scale">
            <summary>
            The scale of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.PlayerUpdate.MapPosition">
            <summary>
            The map position of the player.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.PlayerUpdate.AnimationInfos">
            <summary>
            List of animation info instances.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerUpdate.#ctor">
            <summary>
            Construct the player update data.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.PlayerUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.PlayerUpdateType">
            <summary>
            Enumeration of player update types.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.AnimationInfo">
            <summary>
            Data class for animation related info.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.AnimationInfo.ClipId">
            <summary>
            The ID of the animation clip.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.AnimationInfo.Frame">
            <summary>
            The frame of the animation to start at.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.AnimationInfo.EffectInfo">
            <summary>
            Boolean array containing additional effect info.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.RawPacketDataCollection">
            <summary>
            Non-generic version of packet data collection.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.RawPacketDataCollection.IsReliable">
            <summary>
            Whether this collection should be treated as reliable.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.RawPacketDataCollection.DropReliableDataIfNewerExists">
            <summary>
            Whether the data in this collection should be dropped if newer data is already received.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.RawPacketDataCollection.DataInstances">
            <summary>
            A list of packet data instances in this collection.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.RawPacketDataCollection.#ctor">
            <summary>
            Construct the data collection.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ServerClientDisconnect">
            <summary>
            Packet data from server to client to tell the client that they are disconnected (kicked, banned,
            server shutdown, etc).
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerClientDisconnect.IsReliable">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerClientDisconnect.DropReliableDataIfNewerExists">
            <inheritdoc/>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerClientDisconnect.Reason">
            <summary>
            The reason for the disconnect.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerClientDisconnect.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc/>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerClientDisconnect.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc/>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.DisconnectReason">
            <summary>
            The reason for the disconnect from the server.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.DisconnectReason.Shutdown">
            <summary>
            When the server is shut down and clients need to properly disconnected.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.DisconnectReason.Kicked">
            <summary>
            When the client is kicked from the server.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Data.DisconnectReason.Banned">
            <summary>
            When the client is banned from the server.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.Data.ServerSettingsUpdate">
            <summary>
            Packet data for a server settings update.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerSettingsUpdate.IsReliable">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerSettingsUpdate.DropReliableDataIfNewerExists">
            <inheritdoc />
        </member>
        <member name="P:Hkmp.Networking.Packet.Data.ServerSettingsUpdate.ServerSettings">
            <summary>
            The server settings instance.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerSettingsUpdate.WriteData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Data.ServerSettingsUpdate.ReadData(Hkmp.Networking.Packet.IPacket)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.IPacket">
            <summary>
            Packet for reading and writing raw values.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.Byte)">
            <summary>
            Write one (unsigned) byte to the packet.
            </summary>
            <param name="value">The byte value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.UInt16)">
            <summary>
            Write an unsigned short (2 bytes) to the packet.
            </summary>
            <param name="value">The unsigned short value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.UInt32)">
            <summary>
            Write an unsigned integer (4 bytes) to the packet.
            </summary>
            <param name="value">The unsigned integer value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.UInt64)">
            <summary>
            Write an unsigned long (8 bytes) to the packet.
            </summary>
            <param name="value">The unsigned long value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.SByte)">
            <summary>
            Write a signed byte to the packet.
            </summary>
            <param name="value">The signed byte value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.Int16)">
            <summary>
            Write a signed short (2 bytes) to the packet.
            </summary>
            <param name="value">The signed short value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.Int32)">
            <summary>
            Write a signed integer (4 bytes) to the packet.
            </summary>
            <param name="value">The signed integer value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.Int64)">
            <summary>
            Write a signed long (8 bytes) to the packet.
            </summary>
            <param name="value">The signed long value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.Single)">
            <summary>
            Write a float (4 bytes) to the packet.
            </summary>
            <param name="value">The floating point value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.Double)">
            <summary>
            Write a double (8 bytes) to the packet.
            </summary>
            <param name="value">The double precision floating point value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.Boolean)">
            <summary>
            Write a boolean (1 byte) to the packet.
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(System.String)">
            <summary>
            Write a string value to the packet. The maximum length of a string that can be written is 65,535
            (the max value of a ushort). Will throw an exception when used with larger strings.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.Exception">Thrown when the length of the given string is larger than 65535.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.Write(Hkmp.Math.Vector2)">
            <summary>
            Write a Vector2 (8 bytes) to the packet. Simply a wrapper for writing the X and Y floats to the packet.
            </summary>
            <param name="value">The Vector2 value.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadByte">
            <summary>
            Read one (unsigned) byte from the packet.
            </summary>
            <returns>The unsigned byte value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadUShort">
            <summary>
            Read an unsigned short (2 bytes) from the packet.
            </summary>
            <returns>The unsigned short value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadUInt">
            <summary>
            Read an unsigned integer (4 bytes) from the packet.
            </summary>
            <returns>The unsigned integer value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadULong">
            <summary>
            Read an unsigned long (8 bytes) from the packet.
            </summary>
            <returns>The unsigned long value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadSByte">
            <summary>
            Read a signed byte from the packet.
            </summary>
            <returns>The signed byte value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadShort">
            <summary>
            Read a signed short (2 bytes) from the packet.
            </summary>
            <returns>The signed short value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadInt">
            <summary>
            Read a signed integer (4 bytes) from the packet.
            </summary>
            <returns>The signed integer value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadLong">
            <summary>
            Read a signed long (8 bytes) from the packet.
            </summary>
            <returns>The signed long value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadFloat">
            <summary>
            Read a float (4 bytes) from the packet.
            </summary>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadDouble">
            <summary>
            Read a double (8 bytes) from the packet.
            </summary>
            <returns>The double precision floating point value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadBool">
            <summary>
            Read a boolean (1 byte) from the packet.
            </summary>
            <returns>The boolean value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadString">
            <summary>
            Read a string value from the packet.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacket.ReadVector2">
            <summary>
            Read a Vector2 (8 bytes) from the packet. Simply a wrapper for reading the X and Y floats from the packet.
            </summary>
            <returns>The Vector2 value.</returns>
        </member>
        <member name="T:Hkmp.Networking.Packet.IPacketData">
            <summary>
            An instance of data in a packet.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.IPacketData.IsReliable">
            <summary>
            Whether the data contained in this class is considered reliable and requires resending if lost.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.IPacketData.DropReliableDataIfNewerExists">
            <summary>
            Whether lost reliable data in this class should be dropped if a newer version has already been
            received by the endpoint.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacketData.WriteData(Hkmp.Networking.Packet.IPacket)">
            <summary>
            Write the data in from the class into the given Packet instance.
            </summary>
            <param name="packet">The raw packet to write into.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.IPacketData.ReadData(Hkmp.Networking.Packet.IPacket)">
            <summary>
            Read the data from the given Packet into the class.
            </summary>
            <param name="packet">The raw packet to read from.</param>
        </member>
        <member name="T:Hkmp.Networking.Packet.Packet">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Networking.Packet.Packet._buffer">
            <summary>
            A list of bytes that are contained in this packet.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Packet._readableBuffer">
            <summary>
            Byte array used as a readable buffer.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.Packet._readPos">
            <summary>
            The current position in the buffer to read.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.Packet.Length">
            <summary>
            The length of the packet content.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.#ctor(System.Byte[])">
            <summary>
            Creates a packet with the given byte array of data. Used when receiving packets to read data from.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.#ctor">
            <summary>
            Simply creates an empty packet to write data into.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.SetBytes(System.Byte[])">
            <summary>
            Sets the content of the packet to the given byte array of data.
            </summary>
            <param name="data">The byte to set this packet to.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.WriteLength">
            <summary>
            Inserts the length of the packet's content at the start of the buffer.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ToArray">
            <summary>
            Gets the packet's content in array form.
            </summary>
            <returns>A byte array representing the packet content.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Byte[])">
            <summary>
            Write an array of bytes to the packet.
            </summary>
            <param name="values">A byte array of values to write.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadBytes(System.Int32)">
            <summary>
            Read an array of bytes of the given length from the packet.
            </summary>
            <param name="length">The length to read.</param>
            <returns>A byte array of the given length containing the content at the current position in the
            packet.</returns>
            <exception cref="T:System.Exception">Thrown if there are not enough bytes of content left to read.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.Write(Hkmp.Math.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadUShort">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadUInt">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadULong">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadSByte">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadShort">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadInt">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadLong">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadFloat">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadDouble">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadBool">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadString">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Packet.Packet.ReadVector2">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.ClientPacketId">
            <summary>
            Enumeration of packet IDs for server to client communication.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.LoginResponse">
            <summary>
            A response to the login request to indicate whether the client is allowed to connect.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.HelloClient">
            <summary>
            A response to the HelloServer after a succeeding login.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerConnect">
            <summary>
            Indicating that a client has connected.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerDisconnect">
            <summary>
            Indicating that a client is disconnecting.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.ServerClientDisconnect">
            <summary>
            Indicating the client is (forcefully) disconnected from the server.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerEnterScene">
            <summary>
            Notify that a player has entered the current scene.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerAlreadyInScene">
            <summary>
            Notify that a player is already in the scene we just entered.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerLeaveScene">
            <summary>
            Notify that a player has left the current scene.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerUpdate">
            <summary>
            Update of realtime player values.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerMapUpdate">
            <summary>
            Update of player map position.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.EntityUpdate">
            <summary>
            Update of realtime entity values.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerDeath">
            <summary>
            Notify that a player has died.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerTeamUpdate">
            <summary>
            Notify that a player has changed teams.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.PlayerSkinUpdate">
            <summary>
            Notify that a player has changed skins.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.ServerSettingsUpdated">
            <summary>
            Notify that the gameplay settings have updated.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ClientPacketId.ChatMessage">
            <summary>
            Player sent chat message.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.ServerPacketId">
            <summary>
            Enumeration of packet IDs for client to server communication.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.LoginRequest">
            <summary>
            Login packet that indicates that a new client wants to connect.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.HelloServer">
            <summary>
            Initial hello, sent when login succeeds.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerDisconnect">
            <summary>
            Indicating that a client is disconnecting.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerUpdate">
            <summary>
            Update of realtime player values.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerMapUpdate">
            <summary>
            Update of player map position.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.EntityUpdate">
            <summary>
            Update of realtime entity values.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerEnterScene">
            <summary>
            Notify that the player has entered a new scene.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerLeaveScene">
            <summary>
            Notify that the player has left their current scene.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerDeath">
            <summary>
            Notify that a player has died.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerTeamUpdate">
            <summary>
            Notify that a player has changed teams.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.PlayerSkinUpdate">
            <summary>
            Notify that a player has changed skins.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.ServerPacketId.ChatMessage">
            <summary>
            Player sent chat message.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.ClientPacketHandler">
            <summary>
            Delegate for client packet handlers.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.GenericClientPacketHandler`1">
            <summary>
            Generic client packet handler delegate that has a IPacketData implementation as parameter.
            </summary>
            <typeparam name="TPacketData">The type of the packet data that is passed as parameter.</typeparam>
        </member>
        <member name="T:Hkmp.Networking.Packet.EmptyServerPacketHandler">
            <summary>
            Packet handler that only has the client ID as parameter and does not use the packet data.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.ServerPacketHandler">
            <summary>
            Packet handler for the server that has the client ID and packet data as parameters.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Packet.GenericServerPacketHandler`1">
            <summary>
            Generic server packet handler delegate that has a IPacketData implementation and client ID as parameter.
            </summary>
            <typeparam name="TPacketData">The type of the packet data that is passed as parameter.</typeparam>
        </member>
        <member name="T:Hkmp.Networking.Packet.PacketManager">
            <summary>
            Manages packets that are received by the given NetClient.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.PacketManager._clientPacketHandlers">
            <summary>
            Handlers that deal with data from the server intended for the client.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.PacketManager._serverPacketHandlers">
            <summary>
            Handlers that deal with data from the client intended for the server.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.PacketManager._clientAddonPacketHandlers">
            <summary>
            Handlers that deal with client addon data from the server intended for the client.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.PacketManager._serverAddonPacketHandlers">
            <summary>
            Handlers that deal with server addon data from a client intended for the server.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.HandleClientPacket(Hkmp.Networking.Packet.ClientUpdatePacket)">
            <summary>
            Handle data received by a client.
            </summary>
            <param name="packet">The client update packet to handle.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.ExecuteClientPacketHandler(Hkmp.Networking.Packet.ClientPacketId,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Executes the correct packet handler corresponding to this packet data.
            </summary>
            <param name="packetId">The client packet ID for this data.</param>
            <param name="packetData">The packet data instance.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterClientPacketHandler(Hkmp.Networking.Packet.ClientPacketId,Hkmp.Networking.Packet.ClientPacketHandler)">
            <summary>
            Register a packet handler for the given ID.
            </summary>
            <param name="packetId">The client packet ID.</param>
            <param name="handler">The handler for the data.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterClientPacketHandler(Hkmp.Networking.Packet.ClientPacketId,System.Action)">
            <summary>
            Register a data-independent packet handler for the given ID.
            </summary>
            <param name="packetId">The client packet ID.</param>
            <param name="handler">The handler for the data.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterClientPacketHandler``1(Hkmp.Networking.Packet.ClientPacketId,Hkmp.Networking.Packet.GenericClientPacketHandler{``0})">
            <summary>
            Register a packet handler for the given ID.
            </summary>
            <param name="packetId">The client packet ID.</param>
            <param name="handler">The handler for the data.</param>
            <typeparam name="T">The type of the packet data passed as parameter to the handler.</typeparam>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.DeregisterClientPacketHandler(Hkmp.Networking.Packet.ClientPacketId)">
            <summary>
            De-register a packet handler for the given ID.
            </summary>
            <param name="packetId">The client packet ID.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.HandleServerPacket(System.UInt16,Hkmp.Networking.Packet.ServerUpdatePacket)">
            <summary>
            Handle data received by the server.
            </summary>
            <param name="id">The ID of the client that sent the packet.</param>
            <param name="packet">The server update packet.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.ExecuteServerPacketHandler(System.UInt16,Hkmp.Networking.Packet.ServerPacketId,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Executes the correct packet handler corresponding to this packet data.
            </summary>
            <param name="id">The ID of the client that sent the data.</param>
            <param name="packetId">The server packet ID.</param>
            <param name="packetData">The packet data instance.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterServerPacketHandler(Hkmp.Networking.Packet.ServerPacketId,Hkmp.Networking.Packet.ServerPacketHandler)">
            <summary>
            Register a packet handler for the given ID.
            </summary>
            <param name="packetId">The server packet ID.</param>
            <param name="handler">The handler for the data.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterServerPacketHandler(Hkmp.Networking.Packet.ServerPacketId,Hkmp.Networking.Packet.EmptyServerPacketHandler)">
            <summary>
            Register a data-independent packet handler for the given ID.
            </summary>
            <param name="packetId">The server packet ID.</param>
            <param name="handler">The handler for the data.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterServerPacketHandler``1(Hkmp.Networking.Packet.ServerPacketId,Hkmp.Networking.Packet.GenericServerPacketHandler{``0})">
            <summary>
            Register a packet for the given ID.
            </summary>
            <param name="packetId">The server packet ID.</param>
            <param name="handler">The handler for the data.</param>
            <typeparam name="T">The type of the packet data passed as parameter to the handler.</typeparam>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.DeregisterServerPacketHandler(Hkmp.Networking.Packet.ServerPacketId)">
            <summary>
            De-register a packet handler for the given ID.
            </summary>
            <param name="packetId">The server packet ID.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.ExecuteClientAddonPacketHandler(System.Byte,System.Byte,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Execute the packet handler for the client addon data.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data for the addon.</param>
            <param name="packetData">The packet data instance.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterClientAddonPacketHandler(System.Byte,System.Byte,Hkmp.Networking.Packet.ClientPacketHandler)">
            <summary>
            Register a packet handler for client addon data.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data for the addon.</param>
            <param name="handler">The handler for the data.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is already a handler registered for the
            given ID.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.DeregisterClientAddonPacketHandler(System.Byte,System.Byte)">
            <summary>
            De-register a packet handler for client addon data.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data for the addon.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no handler registered for the
            given ID.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.ClearClientAddonPacketHandlers">
            <summary>
            Clear all registered client addon packet handlers.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.ExecuteServerAddonPacketHandler(System.UInt16,System.Byte,System.Byte,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Execute the packet handler for the server addon data from a client.
            </summary>
            <param name="id">The ID of the client.</param>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data for the addon.</param>
            <param name="packetData">The packet data instance.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.RegisterServerAddonPacketHandler(System.Byte,System.Byte,Hkmp.Networking.Packet.ServerPacketHandler)">
            <summary>
            Register a packet handler for server addon data.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data for the addon.</param>
            <param name="handler">The handler for the data.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is already a handler registered for the
            given ID.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.DeregisterServerAddonPacketHandler(System.Byte,System.Byte)">
            <summary>
            De-register a packet handler for server addon data.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data for the addon.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no handler register for the
            given ID.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.UnpackPacketDataDict``1(System.Collections.Generic.Dictionary{``0,Hkmp.Networking.Packet.IPacketData},System.Action{``0,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Iterates over the given dictionary and executes the handler for each IPacketData instance inside.
            This method will unpack packet data collections and execute the handler for each instance in its
            collection.
            </summary>
            <param name="packetDataDict">The dictionary mapping packet IDs to packet data instances.</param>
            <param name="handler">The handler to execute for each packet data instance.</param>
            <typeparam name="T">The type of the packet ID.</typeparam>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.HandleReceivedData(System.Byte[],System.Byte[]@)">
            <summary>
            Handle received data and leftover data and store subsequent leftover data again.
            </summary>
            <param name="receivedData">Byte array of received data.</param>
            <param name="leftoverData">Reference byte array that should be filled with leftover data.</param>
            <returns>A list of packets that were constructed from the received data.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.PacketManager.ByteArrayToPackets(System.Byte[],System.Byte[]@)">
            <summary>
            Construct packets from the given array of bytes and store excess data in the given leftover array.
            </summary>
            <param name="data">Byte array of data to construct packets from.</param>
            <param name="leftover">The array that should be filled with leftover data.</param>
            <returns>A list of packets constructed from this data.</returns>
        </member>
        <member name="T:Hkmp.Networking.Packet.UpdatePacket`1">
            <summary>
            Abstract base class for the update packet.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Hkmp.Networking.Packet.UpdatePacket`1.AddonPacketInfoDict">
            <summary>
            A dictionary containing addon packet info per addon ID in order to read and convert raw addon
            packet data into IPacketData instances.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._packet">
            <summary>
            The underlying raw packet instance, only used for reading data out of.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.UpdatePacket`1.Sequence">
            <summary>
            The sequence number of this packet.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.UpdatePacket`1.Ack">
            <summary>
            The acknowledgement number of this packet.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Packet.UpdatePacket`1.AckField">
            <summary>
            An array containing booleans that indicate whether sequence number (Ack - x) is also acknowledged
            for the x-th value in the array.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._normalPacketData">
            <summary>
            Normal non-resend packet data.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._resendPacketData">
            <summary>
            Resend packet data indexed by sequence number it originates from.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._addonPacketData">
            <summary>
            Packet data from addons indexed by their ID.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._resendAddonPacketData">
            <summary>
            Resend addon packet data indexed by sequence number it originates from.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._cachedAllPacketData">
            <summary>
            The combination of normal and resent packet data cached in case it needs to be queried multiple times.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._cachedAllAddonData">
            <summary>
            The combination of addon and resent addon data cached in case it needs to be queried multiple times.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._isAllPacketDataCached">
            <summary>
            Whether the dictionary containing all packet data is cached already or needs to be calculated first.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Packet.UpdatePacket`1._containsReliableData">
            <summary>
            Whether this packet contains data that needs to be reliable.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.#ctor(Hkmp.Networking.Packet.Packet)">
            <summary>
            Construct the update packet with the given raw packet instance to read from.
            </summary>
            <param name="packet">The raw packet instance.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.WriteHeaders(Hkmp.Networking.Packet.Packet)">
            <summary>
            Write header info into the given packet (sequence number, acknowledgement number and ack field).
            </summary>
            <param name="packet">The packet to write the header info into.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.ReadHeaders(Hkmp.Networking.Packet.Packet)">
            <summary>
            Read header info from the given packet (sequence number, acknowledgement number and ack field).
            </summary>
            <param name="packet">The packet to read header info from.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.WritePacketData(Hkmp.Networking.Packet.Packet,System.Collections.Generic.Dictionary{`0,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Write the given dictionary of normal or resent packet data into the given raw packet instance.
            </summary>
            <param name="packet">The packet to write into.</param>
            <param name="packetData">Dictionary of packet data to write.</param>
            <returns>true if any of the data written was reliable; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.WriteAddonPacketData(Hkmp.Networking.Packet.Packet,Hkmp.Networking.Packet.AddonPacketData)">
            <summary>
            Write the data in the given instance of AddonPacketData into the given raw packet instance.
            </summary>
            <param name="packet">The packet to write into.</param>
            <param name="addonPacketData">AddonPacketData instance from which to data should be written.</param>
            <returns>true if any of the data written was reliable; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.WritePacketData``1(Hkmp.Networking.Packet.Packet,System.Collections.Generic.Dictionary{``0,Hkmp.Networking.Packet.IPacketData},System.Collections.Generic.IEnumerator{``0},System.Byte)">
            <summary>
            Write the given dictionary of packet data into the given raw packet instance.
            </summary>
            <param name="packet">The packet to write into.</param>
            <param name="packetData">The dictionary containing packet data to write in the packet.</param>
            <param name="keyEnumerator">An enumerator that enumerates over all possible keys in the dictionary.</param>
            <param name="keySpaceSize">The exact size of the key space.</param>
            <typeparam name="TKey">Dictionary key parameter and enumerator parameter.</typeparam>
            <returns>true if any of the data written was reliable; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.WriteAddonDataDict(Hkmp.Networking.Packet.Packet,System.Collections.Generic.Dictionary{System.Byte,Hkmp.Networking.Packet.AddonPacketData})">
            <summary>
            Write the given dictionary containing addon data for all addons in the given packet.
            </summary>
            <param name="packet">The raw packet instance to write into.</param>
            <param name="addonDataDict">The dictionary containing all addon data to write.</param>
            <returns>true if any of the data written was reliable; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.ReadPacketData(Hkmp.Networking.Packet.Packet,System.Collections.Generic.Dictionary{`0,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Read raw data from the given packet into the given packet data dictionary.
            This method is only for normal and resent packet data, not for addon packet data.
            </summary>
            <param name="packet">The raw packet instance to read from.</param>
            <param name="packetData">The dictionary of packet data to write the read data into.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.ReadAddonPacketData(Hkmp.Networking.Packet.Packet,System.Byte,System.Func{System.Byte,Hkmp.Networking.Packet.IPacketData},System.Collections.Generic.Dictionary{System.Byte,Hkmp.Networking.Packet.IPacketData})">
            <summary>
            Read raw addon data from the given packet into the given addon data dictionary.
            </summary>
            <param name="packet">The raw packet instance to read from.</param>
            <param name="packetIdSize">The size of the packet ID space.</param>
            <param name="packetDataInstantiator">A function that instantiate IPacketData implementations given a
            packet ID in byte form.</param>
            <param name="packetData">The dictionary of addon data to write the read data into.</param>
            <exception cref="T:System.Exception">Thrown if the given instantiation function returns null.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.ReadAddonDataDict(Hkmp.Networking.Packet.Packet,System.Collections.Generic.Dictionary{System.Byte,Hkmp.Networking.Packet.AddonPacketData})">
            <summary>
            Read all raw addon data from the given packet into the given dictionary containing entries for all addons.
            </summary>
            <param name="packet">The raw packet instance to read from.</param>
            <param name="addonDataDict">The dictionary for all addon data to write the read data into.</param>
            <exception cref="T:System.Exception">Thrown if the any part of reading the data throws.</exception>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.CreatePacket">
            <summary>
            Create a raw packet out of the data contained in this class.
            </summary>
            <returns>A new packet instance containing all data.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.ReadPacket">
            <summary>
            Read the raw packet contents into easy to access dictionaries.
            </summary>
            <returns>false if the packet cannot be successfully read due to malformed data; otherwise true.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.ContainsReliableData">
            <summary>
            Whether this packet contains data that needs to be reliable.
            </summary>
            <returns>true if the packet contains reliable data; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.SetLostReliableData(Hkmp.Networking.Packet.UpdatePacket{`0})">
            <summary>
            Set the reliable packet data contained in the lost packet as resend data in this one.
            </summary>
            <param name="lostPacket">The update packet instance that was lost.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.CopyReliableDataDict``1(System.Collections.Generic.Dictionary{``0,Hkmp.Networking.Packet.IPacketData},System.Func{``0,System.Boolean})">
            <summary>
            Copy all reliable data in the given dictionary of lost packet data into a new dictionary.
            </summary>
            <param name="lostPacketData">The dictionary containing all packet data from a lost packet.</param>
            <param name="reliabilityCheck">Function that checks whether for a given key there is newer data
            available. If it returns true, lost data will be dropped.</param>
            <typeparam name="TKey">The key parameter of the dictionaries to copy.</typeparam>
            <returns>A new dictionary containing only the reliable data.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.TryGetSendingPacketData(`0,Hkmp.Networking.Packet.IPacketData@)">
            <summary>
            Tries to get packet data that is going to be sent with the given packet ID.
            </summary>
            <param name="packetId">The packet ID to try and get.</param>
            <param name="packetData">Variable to store the retrieved data in. Null if this method returns false.</param>
            <returns>true if the packet data exists and will be stored in the packetData variable; otherwise
            false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.TryGetSendingAddonPacketData(System.Byte,Hkmp.Networking.Packet.AddonPacketData@)">
            <summary>
            Tries to get addon packet data for the addon with the given ID.
            </summary>
            <param name="addonId">The ID of the addon to get the data for.</param>
            <param name="addonPacketData">An instance of AddonPacketData corresponding to the given ID.
            Null if this method returns false.</param>
            <returns>true if the addon packet data exists and will be stored in the addonPacketData variable;
            otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.SetSendingPacketData(`0,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Sets the given packetData with the given packet ID for sending.
            </summary>
            <param name="packetId">The packet ID to set data for.</param>
            <param name="packetData">The packet data to set.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.SetSendingAddonPacketData(System.Byte,Hkmp.Networking.Packet.AddonPacketData)">
            <summary>
            Sets the given addonPacketData with the given addon ID for sending.
            </summary>
            <param name="addonId">The addon ID to set data for.</param>
            <param name="packetData">Instance of AddonPacketData to set.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.GetPacketData">
            <summary>
            Get all the packet data contained in this packet, normal and resent data (but not addon data).
            </summary>
            <returns>A dictionary containing packet IDs mapped to packet data.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.GetAddonPacketData">
            <summary>
            Get the addon packet data in this packet, normal addon and resent data.
            </summary>
            <returns>A dictionary containing addon IDs mapped to addon packet data.</returns>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.CacheAllPacketData">
            <summary>
            Computes all packet data (normal, resent, addon and addon resent data), caches it and sets a boolean
            indicating that this cache is now available.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.DropDuplicateResendData(System.Collections.Generic.Queue{System.UInt16})">
            <summary>
            Drops resend data that is duplicate, i.e. that we already received in an earlier packet.
            </summary>
            <param name="receivedSequenceNumbers">A queue containing sequence numbers that were already
            received.</param>
        </member>
        <member name="M:Hkmp.Networking.Packet.UpdatePacket`1.InstantiatePacketDataFromId(`0)">
            <summary>
            Get an instantiation of IPacketData for the given packet ID.
            </summary>
            <param name="packetId">The packet ID to get an instance for.</param>
            <returns>A new instance of IPacketData.</returns>
        </member>
        <member name="T:Hkmp.Networking.Packet.ServerUpdatePacket">
            <summary>
            Specialization of the update packet for client to server communication.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.ServerUpdatePacket.InstantiatePacketDataFromId(Hkmp.Networking.Packet.ServerPacketId)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Packet.ClientUpdatePacket">
            <summary>
            Specialization of the update packet for server to client communication.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Packet.ClientUpdatePacket.InstantiatePacketDataFromId(Hkmp.Networking.Packet.ClientPacketId)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Server.LoginRequestHandler">
            <summary>
            Delegate for handling login requests.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Server.NetServer">
            <summary>
            Server that manages connection with clients.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer.MaxUdpPacketSize">
            <inheritdoc cref="F:Hkmp.Networking.Client.UdpNetClient.MaxUdpPacketSize"/>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer.ThrottleTime">
            <summary>
            The time to throttle a client after they were rejected connection in milliseconds.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._packetManager">
            <summary>
            The packet manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._clientLock">
            <summary>
            Object to lock asynchronous access when dealing with clients.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._registeredClients">
            <summary>
            Dictionary mapping client IDs to net server clients.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._clients">
            <summary>
            Dictionary mapping IP end-points to net server clients for all clients.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._throttledClients">
            <summary>
            Dictionary for the IP addresses of clients that have their connection throttled mapped to a stopwatch
            that keeps track of their last connection attempt. The client may use different local ports to establish
            connection so we only register the address and not the port as with established clients.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._udpSocket">
            <summary>
            The underlying UDP socket.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._leftoverData">
            <summary>
            Byte array containing leftover data that was not processed as a packet yet.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._taskTokenSource">
            <summary>
            Cancellation token source for all threads of the server.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServer._processingWaitHandle">
            <summary>
            Wait handle for inter-thread signalling when new data is ready to be processed.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.Server.NetServer.ClientTimeoutEvent">
            <summary>
            Event that is called when a client times out.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.Server.NetServer.ShutdownEvent">
            <summary>
            Event that is called when the server shuts down.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.Server.NetServer.LoginRequestEvent">
            <summary>
            Event that is called when a new client wants to login.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Server.NetServer.IsStarted">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.Start(System.Int32)">
            <summary>
            Starts the server on the given port.
            </summary>
            <param name="port">The networking port.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.ReceiveData(System.Threading.CancellationToken)">
            <summary>
            Continuously receive network UDP data and queue it for processing.
            </summary>
            <param name="token">The cancellation token for checking whether this method is requested to cancel.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.StartProcessing(System.Threading.CancellationToken)">
            <summary>
            Starts processing queued network data.
            </summary>
            <param name="token">The cancellation token for checking whether this task is requested to cancel.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.CreateNewClient(System.Net.IPEndPoint)">
            <summary>
            Create a new client and start sending UDP updates and registering the timeout event.
            </summary>
            <param name="endPoint">The endpoint of the new client.</param>
            <returns>A new net server client instance.</returns>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.StartClientUpdates(System.Threading.CancellationToken)">
            <summary>
            Start updating clients with packets.
            </summary>
            <param name="token">The cancellation token for checking whether this task is requested to cancel.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.HandleClientTimeout(Hkmp.Networking.Server.NetServerClient)">
            <summary>
            Handles the event when a client times out. Disconnects the UDP client and cleans up any references
            to the client.
            </summary>
            <param name="client">The client that timed out.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.HandlePacketsRegisteredClient(Hkmp.Networking.Server.NetServerClient,System.Collections.Generic.List{Hkmp.Networking.Packet.Packet})">
            <summary>
            Handle a list of packets from a registered client.
            </summary>
            <param name="client">The registered client.</param>
            <param name="packets">The list of packets to handle.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.HandlePacketsUnregisteredClient(Hkmp.Networking.Server.NetServerClient,System.Collections.Generic.List{Hkmp.Networking.Packet.Packet})">
            <summary>
            Handle a list of packets from an unregistered client.
            </summary>
            <param name="client">The unregistered client.</param>
            <param name="packets">The list of packets to handle.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.Stop">
            <summary>
            Stops the server and cleans up everything.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.OnClientDisconnect(System.UInt16)">
            <summary>
            Callback method for when a client disconnects from the server.
            </summary>
            <param name="id">The ID of the client.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.GetUpdateManagerForClient(System.UInt16)">
            <summary>
            Get the update manager for the client with the given ID.
            </summary>
            <param name="id">The ID of the client.</param>
            <returns>The update manager for the client, or null if there does not exist a client with the
            given ID.</returns>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.SetDataForAllClients(System.Action{Hkmp.Networking.Server.ServerUpdateManager})">
            <summary>
            Execute a given action for the update manager of all connected clients.
            </summary>
            <param name="dataAction">The action to execute with each update manager.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.GetNetworkSender``1(Hkmp.Api.Server.ServerAddon)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Server.NetServer.GetNetworkReceiver``1(Hkmp.Api.Server.ServerAddon,System.Func{``0,Hkmp.Networking.Packet.IPacketData})">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Networking.Server.ReceivedData">
            <summary>
            Data class for storing received data from a given IP end-point.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Server.ReceivedData.Data">
            <summary>
            Byte array of received data.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Server.ReceivedData.EndPoint">
            <summary>
            The IP end-point of the client from which we received the data.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.Server.NetServerClient">
            <summary>
            A client managed by the server. This is only used for communication from server to client.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServerClient.UsedIds">
            <summary>
            Concurrent dictionary for the set of IDs that are used. We use a dictionary because there is no
            standard implementation for a concurrent set.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServerClient._lastId">
            <summary>
            The last ID that was assigned.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Server.NetServerClient.Id">
            <summary>
            The ID of this client.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Server.NetServerClient.IsRegistered">
            <summary>
            Whether the client is registered.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.Server.NetServerClient.UpdateManager">
            <summary>
            The update manager for the client.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.NetServerClient.EndPoint">
            <summary>
            The endpoint of the client.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServerClient.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Construct the client with the given UDP socket and endpoint.
            </summary>
            <param name="udpSocket">The underlying UDP socket.</param>
            <param name="endPoint">The endpoint.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServerClient.HasAddress(System.Net.IPEndPoint)">
            <summary>
            Whether this client resides at the given endpoint.
            </summary>
            <param name="endPoint">The endpoint to test for.</param>
            <returns>true if the address and port of the endpoint match the endpoint of the client; otherwise
            false.</returns>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServerClient.Disconnect">
            <summary>
            Disconnect the client from the server.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Server.NetServerClient.GetId">
            <summary>
            Get a new ID that is not in use by another client.
            </summary>
            <returns>An unused ID.</returns>
        </member>
        <member name="T:Hkmp.Networking.Server.ServerUpdateManager">
            <summary>
            Specialization of <see cref="T:Hkmp.Networking.UdpUpdateManager`2"/> for server to client packet sending.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.Server.ServerUpdateManager._endPoint">
            <summary>
            The endpoint of the client.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Construct the update manager with the given details.
            </summary>
            <param name="udpSocket">The underlying UDP socket for this client.</param>
            <param name="endPoint">The endpoint of the client.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.SendPacket(Hkmp.Networking.Packet.Packet)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.ResendReliableData(Hkmp.Networking.Packet.ClientUpdatePacket)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.FindOrCreatePacketData``1(System.UInt16,Hkmp.Networking.Packet.ClientPacketId)">
            <summary>
            Find or create a packet data instance in the current packet that matches the given ID of a client.
            </summary>
            <param name="id">The ID of the client in the generic client data.</param>
            <param name="packetId">The ID of the packet data.</param>
            <typeparam name="T">The type of the generic client packet data.</typeparam>
            <returns>An instance of the packet data in the packet.</returns>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.SetLoginResponse(Hkmp.Networking.Packet.Data.LoginResponse)">
            <summary>
            Set login response data in the current packet.
            </summary>
            <param name="loginResponse">The login response data.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.SetHelloClientData(System.Collections.Generic.List{System.ValueTuple{System.UInt16,System.String}})">
            <summary>
            Set hello client data in the current packet.
            </summary>
            <param name="clientInfo">The list of pairs of client IDs and usernames.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerConnectData(System.UInt16,System.String)">
            <summary>
            Add player connect data to the current packet.
            </summary>
            <param name="id">The ID of the player connecting.</param>
            <param name="username">The username of the player connecting.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerDisconnectData(System.UInt16,System.String,System.Boolean)">
            <summary>
            Add player disconnect data to the current packet.
            </summary>
            <param name="id">The ID of the player disconnecting.</param>
            <param name="username">The username of the player disconnecting.</param>
            <param name="timedOut">Whether the player timed out or disconnected normally.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerEnterSceneData(System.UInt16,System.String,Hkmp.Math.Vector2,System.Boolean,Hkmp.Game.Team,System.Byte,System.UInt16)">
            <summary>
            Add player enter scene data to the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="username">The username of the player.</param>
            <param name="position">The position of the player.</param>
            <param name="scale">The scale of the player.</param>
            <param name="team">The team of the player.</param>
            <param name="skinId">The ID of the skin of the player.</param>
            <param name="animationClipId">The ID of the animation clip of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerAlreadyInSceneData(System.Collections.Generic.IEnumerable{Hkmp.Networking.Packet.Data.ClientPlayerEnterScene},System.Boolean)">
            <summary>
            Add player already in scene data to the current packet.
            </summary>
            <param name="playerEnterSceneList">An enumerable of ClientPlayerEnterScene instances to add.</param>
            <param name="sceneHost">Whether the player is the scene host.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerLeaveSceneData(System.UInt16)">
            <summary>
            Add player leave scene data to the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdatePlayerPosition(System.UInt16,Hkmp.Math.Vector2)">
            <summary>
            Update a player's position in the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="position">The position of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdatePlayerScale(System.UInt16,System.Boolean)">
            <summary>
            Update a player's scale in the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="scale">The scale of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdatePlayerMapPosition(System.UInt16,Hkmp.Math.Vector2)">
            <summary>
            Update a player's map position in the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="mapPosition">The map position of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdatePlayerMapIcon(System.UInt16,System.Boolean)">
            <summary>
            Update whether the player has a map icon.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="hasIcon">Whether the player has a map icon.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdatePlayerAnimation(System.UInt16,System.UInt16,System.Byte,System.Boolean[])">
            <summary>
            Update a player's animation in the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="clipId">The ID of the animation clip.</param>
            <param name="frame">The frame of the animation.</param>
            <param name="effectInfo">Boolean array containing effect info.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.FindOrCreateEntityUpdate(System.Byte,System.Byte)">
            <summary>
            Find or create an entity update instance in the current packet.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="entityId">The ID of the entity.</param>
            <returns>An instance of the entity update in the packet.</returns>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdateEntityPosition(System.Byte,System.Byte,Hkmp.Math.Vector2)">
            <summary>
            Update an entity's position in the packet.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="entityId">The ID of the entity.</param>
            <param name="position">The position of the entity.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdateEntityState(System.Byte,System.Byte,System.Byte)">
            <summary>
            Update an entity's state in the packet.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="entityId">The ID of the entity.</param>
            <param name="stateIndex">The state index of the entity.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdateEntityVariables(System.Byte,System.Byte,System.Collections.Generic.List{System.Byte})">
            <summary>
            Update an entity's variables in the packet.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="entityId">The ID of the entity.</param>
            <param name="fsmVariables">The variables of the entity.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerDeathData(System.UInt16)">
            <summary>
            Add player death data to the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerTeamUpdateData(System.UInt16,System.String,Hkmp.Game.Team)">
            <summary>
            Add a player team update to the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="username">The username of the player.</param>
            <param name="team">The team of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddPlayerSkinUpdateData(System.UInt16,System.Byte)">
            <summary>
            Add a player skin update to the current packet.
            </summary>
            <param name="id">The ID of the player.</param>
            <param name="skinId">The ID of the skin of the player.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.UpdateServerSettings(Hkmp.Game.Settings.ServerSettings)">
            <summary>
            Update the server settings in the current packet.
            </summary>
            <param name="serverSettings">The ServerSettings instance.</param>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.SetDisconnect(Hkmp.Networking.Packet.Data.DisconnectReason)">
            <summary>
            Set that the client is disconnected from the server with the given reason.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.Server.ServerUpdateManager.AddChatMessage(System.String)">
            <summary>
            Add a chat message to the current packet.
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="T:Hkmp.Networking.UdpCongestionManager`2">
            <summary>
            UDP congestion manager to avoid flooding the network channel.
            </summary>
            <typeparam name="TOutgoing">The type of the outgoing packet.</typeparam>
            <typeparam name="TPacketId">The type of the packet ID.</typeparam>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2.HighSendRate">
            <summary>
            Number of milliseconds between sending packets if the channel is clear.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2.LowSendRate">
            <summary>
            Number of milliseconds between sending packet if the channel is congested.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2.CongestionThreshold">
            <summary>
            The round trip time threshold after which we switch to the low send rate.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2.MaximumSwitchThreshold">
            <summary>
            The maximum time threshold (in milliseconds) in which we need to have a good RTT before switching
            send rates.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2.MinimumSwitchThreshold">
            <summary>
            The minimum time threshold (in milliseconds) in which we need to have a good RTT before switching
            send rates.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2.TimeSpentCongestionThreshold">
            <summary>
            If we switch from High to Low send rates, without even spending this amount of time, we increase
            the switch threshold.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2.MaximumExpectedRttDuringConnection">
            <summary>
            The maximum expected round-trip time during connection. This is to ensure that we do not mark
            packets as lost while we are still connecting.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._udpUpdateManager">
            <summary>
            The corresponding update manager from which we receive the packets that we calculate the RTT from.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._sentQueue">
            <summary>
            Dictionary containing for each sequence number the corresponding packet and stopwatch. We use this
            to check the RTT of sent packets and to resend packets that contain reliable data if they time out.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._firstPacketReceived">
            <summary>
            Whether we have received our first packet from the server.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.UdpCongestionManager`2.AverageRtt">
            <summary>
            The current average round trip time.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.UdpCongestionManager`2.MaximumExpectedRtt">
            <summary>
            The maximum expected round trip time of a packet after which it is considered lost.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._isChannelCongested">
            <summary>
            Whether the channel is currently congested.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._currentSwitchTimeThreshold">
            <summary>
            The current time for which we need to have a good RTT before switching send rates.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._spentTimeThreshold">
            <summary>
            Whether we have spent the threshold in a high send rate. If so, we don't increase the
            switchTimeThreshold if we switch again.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._belowThresholdStopwatch">
            <summary>
            The stopwatch keeping track of time spent below the threshold with the average RTT.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpCongestionManager`2._currentCongestionStopwatch">
            <summary>
            The stopwatch keeping track of time spent in either congested or non-congested mode.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.UdpCongestionManager`2.#ctor(Hkmp.Networking.UdpUpdateManager{`0,`1})">
            <summary>
            Construct the congestion manager with the given update manager.
            </summary>
            <param name="udpUpdateManager">The UDP update manager.</param>
        </member>
        <member name="M:Hkmp.Networking.UdpCongestionManager`2.OnReceivePackets``2(``0)">
            <summary>
            Callback method for when we receive a packet.
            </summary>
            <param name="packet">The incoming packet.</param>
            <typeparam name="TIncoming">The type of the incoming packet.</typeparam>
            <typeparam name="TOtherPacketId">The type of the outgoing packet ID.</typeparam>
        </member>
        <member name="M:Hkmp.Networking.UdpCongestionManager`2.CheckCongestion(System.UInt16)">
            <summary>
            Check the congestion after receiving the given sequence number that was acknowledged. We also
            switch send rates in this method if the average RTT is consistently high/low.
            </summary>
            <param name="sequence">The acknowledged sequence number.</param>
        </member>
        <member name="M:Hkmp.Networking.UdpCongestionManager`2.OnSendPacket(System.UInt16,`0)">
            <summary>
            Callback method for when we send an update packet with the given sequence number.
            </summary>
            <param name="sequence">The sequence number of the sent packet.</param>
            <param name="updatePacket">The update packet.</param>
        </member>
        <member name="T:Hkmp.Networking.SentPacket`2">
            <summary>
            Data class for a packet that was sent.
            </summary>
            <typeparam name="TPacket">The type of the sent packet.</typeparam>
            <typeparam name="TPacketId">The type of the packet ID for the sent packet.</typeparam>
        </member>
        <member name="P:Hkmp.Networking.SentPacket`2.Packet">
            <summary>
            The packet that was sent.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.SentPacket`2.Stopwatch">
            <summary>
            The stopwatch keeping track of the time it takes for the packet to get acknowledged.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.SentPacket`2.Lost">
            <summary>
            Whether the sent packet was marked as lost because it took too long to get an acknowledgement.
            </summary>
        </member>
        <member name="T:Hkmp.Networking.UdpUpdateManager">
            <summary>
            Class that manages sending the update packet. Has a simple congestion avoidance system to
            avoid flooding the channel.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager.AckSize">
            <summary>
            The number of ack numbers from previous packets to store in the packet. 
            </summary>
        </member>
        <member name="T:Hkmp.Networking.UdpUpdateManager`2">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2.ConnectionTimeout">
            <summary>
            The time in milliseconds to disconnect after not receiving any updates.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2.ReceiveQueueSize">
            <summary>
            The number of sequence numbers to store in the received queue to construct ack fields with and
            to check against resent data.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2.UdpSocket">
            <summary>
            The Socket instance to use to send packets.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2._udpCongestionManager">
            <summary>
            The UDP congestion manager instance.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2._canSendPackets">
            <summary>
            Boolean indicating whether we are allowed to send packets.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2._localSequence">
            <summary>
            The last sent sequence number.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2._remoteSequence">
            <summary>
            The last received sequence number.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2._receivedQueue">
            <summary>
            Fixed-size queue containing sequence numbers that have been received.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2.Lock">
            <summary>
            Object to lock asynchronous accesses.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2.CurrentUpdatePacket">
            <summary>
            The current instance of the update packet.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2._sendStopwatch">
            <summary>
            Stopwatch to keep track of when to send a new update.
            </summary>
        </member>
        <member name="F:Hkmp.Networking.UdpUpdateManager`2._heartBeatStopwatch">
            <summary>
            Stopwatch to keep track of the heart beat to know when the client times out.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.UdpUpdateManager`2.CurrentSendRate">
            <summary>
            The current send rate in milliseconds between sending packets.
            </summary>
        </member>
        <member name="P:Hkmp.Networking.UdpUpdateManager`2.AverageRtt">
            <summary>
            Moving average of round trip time (RTT) between sending and receiving a packet.
            </summary>
        </member>
        <member name="E:Hkmp.Networking.UdpUpdateManager`2.OnTimeout">
            <summary>
            Event that is called when the client times out.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Construct the update manager with a UDP socket.
            </summary>
            <param name="udpSocket">The UDP socket instance.</param>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.StartUpdates">
            <summary>
            Start the update manager and allow sending updates.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.ProcessUpdate">
            <summary>
            Process an update for this update manager.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.StopUpdates">
            <summary>
            Stop sending the periodic UDP update packets after sending the current one.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.OnReceivePacket``2(``0)">
            <summary>
            Callback method for when a packet is received.
            </summary>
            <param name="packet"></param>
            <typeparam name="TIncoming"></typeparam>
            <typeparam name="TOtherPacketId"></typeparam>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.CreateAndSendUpdatePacket">
            <summary>
            Create and send the current update packet.
            </summary>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.IsSequenceGreaterThan(System.UInt16,System.UInt16)">
            <summary>
            Check whether the first given sequence number is greater than the second given sequence number.
            Accounts for sequence number wrap-around, by inverse comparison if differences are larger than half
            of the sequence number space.
            </summary>
            <param name="sequence1">The first sequence number to compare.</param>
            <param name="sequence2">The second sequence number to compare.</param>
            <returns>True if the first sequence number is greater than the second sequence number.</returns>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.ResendReliableData(`0)">
            <summary>
            Resend the given packet that was (supposedly) lost by adding data that needs to be reliable to the
            current update packet.
            </summary>
            <param name="lostPacket">The packet instance that was lost.</param>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.SendPacket(Hkmp.Networking.Packet.Packet)">
            <summary>
            Send the given packet over the corresponding medium.
            </summary>
            <param name="packet">The raw packet instance.</param>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.GetOrCreateAddonPacketData(System.Byte,System.Byte)">
            <summary>
            Either get or create an AddonPacketData instance for the given addon.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetIdSize">The size of the packet ID size.</param>
            <returns>The instance of AddonPacketData already in the packet or a new one if no such instance
            exists</returns>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.SetAddonData(System.Byte,System.Byte,System.Byte,Hkmp.Networking.Packet.IPacketData)">
            <summary>
            Set (non-collection) addon data to be networked for the addon with the given ID.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data.</param>
            <param name="packetIdSize">The size of the packet ID space.</param>
            <param name="packetData">The packet data to send.</param>
        </member>
        <member name="M:Hkmp.Networking.UdpUpdateManager`2.SetAddonDataAsCollection``1(System.Byte,System.Byte,System.Byte,``0)">
            <summary>
            Set addon data as a collection to be networked for the addon with the given ID.
            </summary>
            <param name="addonId">The ID of the addon.</param>
            <param name="packetId">The ID of the packet data.</param>
            <param name="packetIdSize">The size of the packet ID space.</param>
            <param name="packetData">The packet data to send.</param>
            <typeparam name="TPacketData">The type of the packet data in the collection.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown if the packet data could not be added.</exception>
        </member>
        <member name="T:Hkmp.Ui.Chat.ChatBox">
            <summary>
            The message box in the bottom left of the screen that shows information related to HKMP.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.MaxMessages">
            <summary>
            The maximum number of messages shown when chat is closed.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.MaxShownMessages">
            <summary>
            The maximum number of messages shown when chat is opened.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.ChatWidth">
            <summary>
            The maximum width of the chat input and chat box.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.TextMargin">
            <summary>
            Margin for text to make sure it fits within the box and doesn't get cut off by Unity.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.MessageHeight">
            <summary>
            The height of messages.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.BoxInputMargin">
            <summary>
            The margin of the chat box with the bottom of the screen.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.InputHeight">
            <summary>
            The height of the chat input.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.InputMarginBottom">
            <summary>
            The margin of the chat input with the bottom of the screen.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.MarginLeft">
            <summary>
            The margin of the chat with the left side of the screen.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox.MessageSize">
            <summary>
            The size of new message added to the chat box.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox._textGenSettings">
            <summary>
            Text generation settings used to figure out the width of to-be created text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox._chatBoxGroup">
            <summary>
            The component group of this chat box and all messages in it.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox._textGenerator">
            <summary>
            Text generator used to figure out the width of to-be created text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox._messages">
            <summary>
            Array containing the latest messages.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox._chatInput">
            <summary>
            The chat input component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatBox._isOpen">
            <summary>
            Whether the chat is currently open.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.Chat.ChatBox.ChatInputEvent">
            <summary>
            Event that is called when the user submits a message in the chat input.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.#ctor(Hkmp.Ui.ComponentGroup,Hkmp.Game.Settings.ModSettings)">
            <summary>
            Construct the chat box in the given group and with the given mod settings.
            </summary>
            <param name="chatBoxGroup">The component group it should be in.</param>
            <param name="modSettings">The current mod settings.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.CheckKeyBinds(Hkmp.Game.Settings.ModSettings)">
            <summary>
            Check whether key-binds for the chat box are pressed.
            </summary>
            <param name="modSettings">The mod settings instance.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.HideChatInput">
            <summary>
            Hide the chat input component.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.AddMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.AddTrimmedMessage(System.String)">
            <summary>
            Add a message to the chat box that is trimmed to the length that fits on a single line.
            </summary>
            <param name="messageText">The trimmed message string.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.SetEnabledHeroActions(System.Boolean)">
            <summary>
            Set whether the hero actions for input are enabled.
            </summary>
            <param name="enabled">The new boolean value for enabled.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.IsInventoryOpen">
            <summary>
            Checks whether the inventory is open.
            </summary>
            <returns>true if the inventory is open; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatBox.IsGodHomeMenuOpen">
            <summary>
            Checks whether either a pantheon challenge UI or a boss challenge UI from Godhome is open. 
            </summary>
            <returns>true if either challenge UI from pantheons or bosses is open; otherwise false.</returns>
        </member>
        <member name="T:Hkmp.Ui.Chat.ChatMessage">
            <summary>
            Class that manages a single message in chat.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatMessage.MessageStayTime">
            <summary>
            The time a message stays after appearing in seconds.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatMessage.MessageFadeTime">
            <summary>
            The time a message takes to fade out in seconds.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatMessage._textComponent">
            <summary>
            The text component belonging to this chat message.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatMessage._fadeCoroutine">
            <summary>
            The current coroutine responsible for fading out the message after a delay.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatMessage._alpha">
            <summary>
            The current alpha of the message.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatMessage._isFadedOut">
            <summary>
            Whether this message is already completely faded out.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Chat.ChatMessage._chatOpen">
            <summary>
            Whether the chat is currently open.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.#ctor(Hkmp.Ui.ComponentGroup,UnityEngine.Vector2,System.String)">
            <summary>
            Constructs the chat message in the given group at the given position and with the given text.
            </summary>
            <param name="componentGroup">The component group it should be in.</param>
            <param name="position">The position of the message.</param>
            <param name="text">The string text.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.Display(System.Boolean)">
            <summary>
            Displays the chat message and notes whether the chat is open or not.
            </summary>
            <param name="chatOpen">Whether the chat is open or not.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.Hide">
            <summary>
            Hides the chat message because it surpassed the maximum number of shown messages.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.OnChatToggle(System.Boolean)">
            <summary>
            Indicates that the chat is opened or closed and will show/hide this chat message accordingly.
            </summary>
            <param name="chatOpen">Whether the chat is open or closed.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.Move(UnityEngine.Vector2)">
            <summary>
            Move this chat message by the given position. This will add the given position to the current position
            and set the new position of the chat message as the result.
            </summary>
            <param name="position">Vector2 of the position it should be moved by.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.Destroy">
            <summary>
            Destroy the text component of this chat message.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.SetAlpha(System.Single)">
            <summary>
            Set the alpha of the text component.
            </summary>
            <param name="alpha">Float representing the new alpha value. Ranging from 0 to 1.</param>
        </member>
        <member name="M:Hkmp.Ui.Chat.ChatMessage.FadeRoutine">
            <summary>
            Wait for a certain amount of time and then fade out the message by reducing the alpha gradually.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.ClientSettingsInterface">
            <summary>
            Class for creating and managing the client settings interface.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.ClientSettingsInterface.OnTeamRadioButtonChange">
            <summary>
            Event that is called when the team is changed through the radio buttons.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.ClientSettingsInterface.OnSkinIdChange">
            <summary>
            Event that is called when the skin ID is changed.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ClientSettingsInterface._clientServerSettings">
            <summary>
            The client <see cref="T:Hkmp.Game.Settings.ServerSettings"/> instance.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ClientSettingsInterface._teamCondition">
            <summary>
            Compound condition for whether the team setting should be enabled.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ClientSettingsInterface._skinCondition">
            <summary>
            Compound condition for whether the skin setting should be enabled.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ClientSettingsInterface.OnSuccessfulConnect">
            <summary>
            Callback method for when the client successfully connects.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ClientSettingsInterface.OnDisconnect">
            <summary>
            Callback method for when the client disconnects.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ClientSettingsInterface.OnTeamSettingChange">
            <summary>
            Callback method for when the team setting in <see cref="T:Hkmp.Game.Settings.ServerSettings"/> is changed.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ClientSettingsInterface.OnAddonSetTeamSelection(System.Boolean)">
            <summary>
            Callback method for when an addon sets the availability of team selection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Hkmp.Ui.ClientSettingsInterface.OnAddonSetSkinSelection(System.Boolean)">
            <summary>
            Callback method for when an sets the availability of skin selection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Hkmp.Ui.Component.ButtonComponent">
            <inheritdoc cref="T:Hkmp.Ui.Component.IButtonComponent" />
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent.DefaultWidth">
            <summary>
            The default width of a button.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent.DefaultHeight">
            <summary>
            The default height of a button.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent._bgSprite">
            <summary>
            The background sprites.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent._text">
            <summary>
            The Unity Text component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent._image">
            <summary>
            The Unity Image component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent._onPress">
            <summary>
            The action that is executed when the button is pressed.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent._interactable">
            <summary>
            Whether the button is interactable (i.e. can be pressed).
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent._isHover">
            <summary>
            Whether the user is hovering over the button.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ButtonComponent._isMouseDown">
            <summary>
            Whether the user has their mouse down on the button.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.ButtonComponent.SetText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.ButtonComponent.SetOnPress(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.ButtonComponent.SetInteractable(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.ButtonComponent.EvaluateState">
            <summary>
            Evaluates the state of the button to make sure the background sprite is correct.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.ButtonComponent.SetGroupActive(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.ButtonComponent.SetActive(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Ui.Component.ChatInputComponent">
            <summary>
            An input component specifically for the chat.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.ChatInputComponent.DisallowedChars">
            <summary>
            List of characters that are disallowed to be input.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.Component.ChatInputComponent.OnSubmit">
            <summary>
            Action that is executed when the user submits the input field.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.ChatInputComponent.Focus">
            <summary>
            Focus the input field.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Component.CheckboxComponent">
            <inheritdoc cref="T:Hkmp.Ui.Component.ICheckboxComponent" />
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._checkmarkObject">
            <summary>
            The GameObject for the checkmark.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._bgImage">
            <summary>
            The Unity Image component for the background image.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._checkmarkImage">
            <summary>
            The Unity Image component for the checkmark image.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._bgSprite">
            <summary>
            The background sprites.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._canToggleOff">
            <summary>
            Whether this checkbox can be toggled off.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._onToggle">
            <summary>
            The delegate that is executed when the checkbox is toggled. 
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._interactable">
            <summary>
            Whether this checkbox is interactable.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.CheckboxComponent._isToggled">
            <summary>
            Whether the checkbox is toggled on.
            </summary>
        </member>
        <member name="P:Hkmp.Ui.Component.CheckboxComponent.IsToggled">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.CheckboxComponent.OnToggle">
            <summary>
            Callback method for when the user clicks the checkbox.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.CheckboxComponent.SetOnToggle(Hkmp.Ui.Component.OnToggle)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.CheckboxComponent.SetToggled(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.CheckboxComponent.SetInteractable(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Ui.Component.Component">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Ui.Component.Component.NotInteractableOpacity">
            <summary>
            The opacity of non-interactable components.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.Component.GameObject">
            <summary>
            The underlying GameObject of the component. 
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.Component._transform">
            <summary>
            The Unity RectTransform instance.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.Component._activeSelf">
            <summary>
            Whether this component is active.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.Component._componentGroup">
            <summary>
            The component group this component belongs to.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.Component.SetGroupActive(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.Component.SetActive(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.Component.GetPosition">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.Component.SetPosition(UnityEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.Component.GetSize">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.Component.Destroy">
            <summary>
            Destroys the component.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.Component.AddEventTrigger(UnityEngine.EventSystems.EventTrigger,UnityEngine.EventSystems.EventTriggerType,System.Action{UnityEngine.EventSystems.BaseEventData})">
            <summary>
            Add an event trigger to this component object.
            </summary>
            <param name="eventTrigger">The event trigger.</param>
            <param name="type">The type of the event trigger.</param>
            <param name="action">The action that is executed on the event.</param>
        </member>
        <member name="T:Hkmp.Ui.Component.HiddenInputComponent">
            <summary>
            An input component that is hidden until the user clicks on it.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.HiddenInputComponent.HiddenText">
            <summary>
            The text that appears when the input is hidden.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.HiddenInputComponent._currentInput">
            <summary>
            String that stores the current input if it is not displayed.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.HiddenInputComponent._isHidden">
            <summary>
            Whether the input is hidden.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.HiddenInputComponent.SetInput(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.HiddenInputComponent.GetInput">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Ui.Component.IButtonComponent">
            <summary>
            A UI component for a button.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.IButtonComponent.SetText(System.String)">
            <summary>
            Set the text on the button.
            </summary>
            <param name="text">The string text.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IButtonComponent.SetOnPress(System.Action)">
            <summary>
            Set the action that is executed when pressed.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IButtonComponent.SetInteractable(System.Boolean)">
            <summary>
            Set whether the button is interactable.
            </summary>
            <param name="interactable">Whether the button is interactable.</param>
        </member>
        <member name="T:Hkmp.Ui.Component.OnToggle">
            <summary>
            Delegate for when a checkbox is toggled.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Component.ICheckboxComponent">
            <summary>
            A checkbox component that can be toggled on and off.
            </summary>
        </member>
        <member name="P:Hkmp.Ui.Component.ICheckboxComponent.IsToggled">
            <summary>
            Whether the checkbox is toggled on or off.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.ICheckboxComponent.SetOnToggle(Hkmp.Ui.Component.OnToggle)">
            <summary>
            Set the action that is executed when toggled.
            </summary>
            <param name="onToggle">The action to execute.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.ICheckboxComponent.SetToggled(System.Boolean)">
            <summary>
            Set whether this checkbox is toggled.
            </summary>
            <param name="newValue">The toggle value.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.ICheckboxComponent.SetInteractable(System.Boolean)">
            <summary>
            Set whether the checkbox is interactable.
            </summary>
            <param name="interactable">Whether the checkbox is interactable.</param>
        </member>
        <member name="T:Hkmp.Ui.Component.IComponent">
            <summary>
            Base class for UI components.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.IComponent.SetGroupActive(System.Boolean)">
            <summary>
            Set whether the group of this component is active.
            </summary>
            <param name="groupActive">Whether the group is active.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IComponent.SetActive(System.Boolean)">
            <summary>
            Set whether this component is active.
            </summary>
            <param name="active">Whether this component is active.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IComponent.GetPosition">
            <summary>
            Get the position of the component.
            </summary>
            <returns>A Vector2 representing the position.</returns>
        </member>
        <member name="M:Hkmp.Ui.Component.IComponent.SetPosition(UnityEngine.Vector2)">
            <summary>
            Set the position of this component.
            </summary>
            <param name="position">Vector2 representing the position.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IComponent.GetSize">
            <summary>
            Get the size of this component.
            </summary>
            <returns>Vector2 representing the size.</returns>
        </member>
        <member name="T:Hkmp.Ui.Component.IInputComponent">
            <summary>
            An component that handles user text input.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.IInputComponent.SetInput(System.String)">
            <summary>
            Set the input of the component.
            </summary>
            <param name="input">The string input.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IInputComponent.GetInput">
            <summary>
            Get the currently input text.
            </summary>
            <returns>The string input.</returns>
        </member>
        <member name="M:Hkmp.Ui.Component.IInputComponent.SetInteractable(System.Boolean)">
            <summary>
            Set whether this component is interactable.
            </summary>
            <param name="interactable">Whether the component is interactable.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IInputComponent.SetOnChange(System.Action{System.String})">
            <summary>
            Set an action that is executed when the input field changes.
            </summary>
            <param name="onChange">The action to execute.</param>
        </member>
        <member name="T:Hkmp.Ui.Component.ImageComponent">
            <summary>
            Simple component that displays an image.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Component.InputComponent">
            <inheritdoc cref="T:Hkmp.Ui.Component.IInputComponent" />
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent.DefaultWidth">
            <summary>
            The default width of the component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent.DefaultHeight">
            <summary>
            The default height of the component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent.TextMargin">
            <summary>
            The margin of the text with the borders of the component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent._bgSprite">
            <summary>
            The background sprites.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent.InputField">
            <summary>
            The Unity InputField component. 
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent.Text">
            <summary>
            The Unity Text component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent.Image">
            <summary>
            The Unity Image component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent.Interactable">
            <summary>
            Whether this input field is interactable.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.InputComponent._onChange">
            <summary>
            The action to execute when the input changes.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.InputComponent.SetTextAlpha(System.Single)">
            <summary>
            Sets the alpha value of the text.
            </summary>
            <param name="alpha">The float alpha.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.InputComponent.SetInteractable(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.InputComponent.SetInput(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.InputComponent.GetInput">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.InputComponent.SetOnChange(System.Action{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Ui.Component.IpInputComponent">
            <summary>
            Input component specifically for the IP input.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.IpInputComponent.BlacklistedChars">
            <summary>
            List of characters that cannot be input in this field.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Component.OnValueChange">
            <summary>
            Delegate for when the value of the radio buttons changes.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Component.IRadioButtonBoxComponent">
            <summary>
            A radio button box component.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.IRadioButtonBoxComponent.SetOnChange(Hkmp.Ui.Component.OnValueChange)">
            <summary>
            Set a callback method for when the active button changes.
            </summary>
            <param name="onValueChange">The callback method.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IRadioButtonBoxComponent.GetActiveIndex">
            <summary>
            Get the index of the currently active radio button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hkmp.Ui.Component.IRadioButtonBoxComponent.SetInteractable(System.Boolean)">
            <summary>
            Set whether this component is interactable.
            </summary>
            <param name="interactable">Whether the component is interactable.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.IRadioButtonBoxComponent.Reset(System.Boolean)">
            <summary>
            Resets the radio box to be the default value.
            </summary>
            <param name="invokeCallback">Whether to invoke the callback that the value changed.</param>
        </member>
        <member name="T:Hkmp.Ui.Component.ITextComponent">
            <summary>
            A component displaying text.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.ITextComponent.SetText(System.String)">
            <summary>
            Set the displayed text.
            </summary>
            <param name="text">The string text.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.ITextComponent.SetColor(UnityEngine.Color)">
            <summary>
            Set the color of the text.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="T:Hkmp.Ui.Component.PortInputComponent">
            <summary>
            Input component specifically for the port input.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.PortInputComponent.AllowedChars">
            <summary>
            List of characters that are allowed to be input.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Component.RadioButtonBoxComponent">
            <inheritdoc cref="T:Hkmp.Ui.Component.IRadioButtonBoxComponent" />
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent.BoxWidth">
            <summary>
            The default width of the entire box.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent.HeaderHeight">
            <summary>
            The height of the header text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent.HeaderButtonMargin">
            <summary>
            The margin of the header with the buttons.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent.ButtonSize">
            <summary>
            The size of the buttons.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent.ButtonTextMargin">
            <summary>
            The margin of the buttons with the text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent._defaultValue">
            <summary>
            The index of the default box.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent._headerTextComponent">
            <summary>
            The text component for the header text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent._checkboxes">
            <summary>
            An array of checkbox component that serve as radio buttons.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent._textComponents">
            <summary>
            An array of text component as the text next to the radio buttons.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent._activeIndex">
            <summary>
            The index of the currently active radio button.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.RadioButtonBoxComponent._onValueChange">
            <summary>
            Delegate that is executed when the value changes.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.RadioButtonBoxComponent.OnClicked(System.Int32)">
            <summary>
            Callback method for when a radio button is clicked.
            </summary>
            <param name="index">The index of the clicked radio button.</param>
        </member>
        <member name="M:Hkmp.Ui.Component.RadioButtonBoxComponent.SetOnChange(Hkmp.Ui.Component.OnValueChange)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.RadioButtonBoxComponent.GetActiveIndex">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.RadioButtonBoxComponent.SetInteractable(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.RadioButtonBoxComponent.Reset(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Ui.Component.TextComponent">
            <inheritdoc cref="T:Hkmp.Ui.Component.ITextComponent" />
        </member>
        <member name="F:Hkmp.Ui.Component.TextComponent._textObject">
            <summary>
            The Unity Text component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Component.TextComponent._text">
            <summary>
            The text that is displayed.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Component.TextComponent.SetText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.TextComponent.SetColor(UnityEngine.Color)">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.Component.TextComponent.GetColor">
            <summary>
            Get the current color of the text.
            </summary>
            <returns>The color of the text.</returns>
        </member>
        <member name="M:Hkmp.Ui.Component.TextComponent.GetPreferredWidth">
            <summary>
            Get the preferred width of the text.
            </summary>
            <returns>The preferred width as float.</returns>
        </member>
        <member name="T:Hkmp.Ui.ComponentGroup">
            <summary>
            A group of components that can be enabled/disabled to manage hierarchies.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ComponentGroup._children">
            <summary>
            List of component groups as children.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ComponentGroup._components">
            <summary>
            List of components as children.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ComponentGroup._parent">
            <summary>
            The parent of this group.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ComponentGroup._activeSelf">
            <summary>
            Whether this group is active.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ComponentGroup.IsHierarchyActive">
            <summary>
            Returns whether the parent hierarchy is active.
            </summary>
            <returns>true if the parent hierarchy is active; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Ui.ComponentGroup.OnParentUpdate(System.Boolean)">
            <summary>
            Callback method for when the parent or its hierarchy changes.
            </summary>
            <param name="hierarchyActive">Whether the hierarchy is now active or not.</param>
        </member>
        <member name="M:Hkmp.Ui.ComponentGroup.SetComponentsActive(System.Boolean)">
            <summary>
            Set whether the children component should be active.
            </summary>
            <param name="active">Whether the children should be active.</param>
        </member>
        <member name="M:Hkmp.Ui.ComponentGroup.SetParent(Hkmp.Ui.ComponentGroup)">
            <summary>
            Set the parent of this component group.
            </summary>
            <param name="parent">The new parent of this group.</param>
        </member>
        <member name="M:Hkmp.Ui.ComponentGroup.AddComponent(Hkmp.Ui.Component.IComponent)">
            <summary>
            Adds a component to the group.
            </summary>
            <param name="component">The component to add.</param>
        </member>
        <member name="M:Hkmp.Ui.ComponentGroup.SetActive(System.Boolean)">
            <summary>
            Set whether this component group is active.
            </summary>
            <param name="active">Whether the group is active.</param>
        </member>
        <member name="M:Hkmp.Ui.ComponentGroup.IsActive">
            <summary>
            Whether the group is active.
            </summary>
            <returns>true if the parent hierarchy is active and the group itself is active; otherwise false.</returns>
        </member>
        <member name="T:Hkmp.Ui.ConnectInterface">
            <summary>
            Class for creating and managing the connect interface.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.LocalhostAddress">
            <summary>
            The address to connect to the local device.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.TextIndentWidth">
            <summary>
            The indent of some text elements.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.ConnectText">
            <summary>
            The text of the connection button if not connected.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.ConnectingText">
            <summary>
            The text of the connection button while connecting.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.DisconnectText">
            <summary>
            The text of the connection button while connected.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.StartHostingText">
            <summary>
            The text of the host button while not hosting.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.StopHostingText">
            <summary>
            The text of the host button while hosting.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface.FeedbackTextHideTime">
            <summary>
            The time in seconds to hide the feedback text after it appeared.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._modSettings">
            <summary>
            The mod settings.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._connectGroup">
            <summary>
            The component group of the connect UI.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._settingsGroup">
            <summary>
            The component group of the client settings UI.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._usernameInput">
            <summary>
            The username input component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._addressInput">
            <summary>
            The address input component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._portInput">
            <summary>
            The port input component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._connectionButton">
            <summary>
            The connection (connect or disconnect) button component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._serverButton">
            <summary>
            The server host button component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._feedbackText">
            <summary>
            The feedback text component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.ConnectInterface._feedbackHideCoroutine">
            <summary>
            The coroutine that hides the feedback text after a delay.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.ConnectInterface.ConnectButtonPressed">
            <summary>
            Event that is executed when the connect button is pressed.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.ConnectInterface.DisconnectButtonPressed">
            <summary>
            Event that is executed when the disconnect button is pressed.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.ConnectInterface.StartHostButtonPressed">
            <summary>
            Event that is executed when the start hosting button is pressed.
            </summary>
        </member>
        <member name="E:Hkmp.Ui.ConnectInterface.StopHostButtonPressed">
            <summary>
            The event that is executed when the stop hosting button is pressed.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.OnClientDisconnect">
            <summary>
            Callback method for when the client disconnects.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.OnSuccessfulConnect">
            <summary>
            Callback method for when the client successfully connects.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.OnFailedConnect(Hkmp.Networking.Client.ConnectFailedResult)">
            <summary>
            Callback method for when the client fails to connect.
            </summary>
            <param name="result">The result of the failed connection.</param>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.CreateConnectUi">
            <summary>
            Create the connection UI.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.OnConnectButtonPressed">
            <summary>
            Callback method for when the connect button is pressed.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.OnDisconnectButtonPressed">
            <summary>
            Callback method for when the disconnect button is pressed.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.OnStartButtonPressed">
            <summary>
            Callback method for when the start hosting button is pressed.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.OnStopButtonPressed">
            <summary>
            Callback method for when the stop hosting button is pressed.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.SetFeedbackText(UnityEngine.Color,System.String)">
            <summary>
            Set the feedback text with the given color and content.
            </summary>
            <param name="color">The color of the text.</param>
            <param name="text">The content of the text.</param>
        </member>
        <member name="M:Hkmp.Ui.ConnectInterface.WaitHideFeedbackText">
            <summary>
            Coroutine for hiding the feedback text after a delay.
            </summary>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="T:Hkmp.Ui.PingInterface">
            <summary>
            Class for creating and managing the ping interface.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface.ScreenBorderMargin">
            <summary>
            The margin between the image and text, and the borders of the screen.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface.IconTextMargin">
            <summary>
            The margin between the icon and the text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface.TextWidth">
            <summary>
            The maximum width of the text component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface.TextHeight">
            <summary>
            The maximum height of the text component.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface.IconSize">
            <summary>
            The size (width and height) of the icon displayed in front of the text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface._pingComponentGroup">
            <summary>
            The component group for the ping display.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface._modSettings">
            <summary>
            The mod settings.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.PingInterface._netClient">
            <summary>
            The net client instance for retrieving the current ping.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.PingInterface.SetEnabled(System.Boolean)">
            <summary>
            Set whether the display is enabled or not.
            </summary>
            <param name="enabled">Whether the display should be enabled.</param>
        </member>
        <member name="T:Hkmp.Ui.Resources.FontManager">
            <summary>
            The font manager that stores fonts that are used in-game.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.FontManager.UIFontRegular">
            <summary>
            The font used for UI.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.FontManager.InGameNameFont">
            <summary>
            The font used for usernames above player objects.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Resources.FontManager.LoadFonts">
            <summary>
            Load the fonts by trying to find them in the game through Unity.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Resources.MultiStateSprite">
            <summary>
            Struct for multi-state UI sprites.
            </summary>
        </member>
        <member name="P:Hkmp.Ui.Resources.MultiStateSprite.Neutral">
            <summary>
            The neutral sprite (non-hover, non-click, enabled).
            </summary>
        </member>
        <member name="P:Hkmp.Ui.Resources.MultiStateSprite.Hover">
            <summary>
            The hover sprite (hover, non-click, enabled).
            </summary>
        </member>
        <member name="P:Hkmp.Ui.Resources.MultiStateSprite.Active">
            <summary>
            The active sprite (clicked, enabled).
            </summary>
        </member>
        <member name="P:Hkmp.Ui.Resources.MultiStateSprite.Disabled">
            <summary>
            The disabled sprite.
            </summary>
        </member>
        <member name="T:Hkmp.Ui.Resources.TextureManager">
            <summary>
            The texture manager for storing sprites of UI elements.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.ImagePathPrefix">
            <summary>
            The path prefix of embedded resources in the assembly.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.ImageSuffix">
            <summary>
            The suffix of image resources.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.TextureDataSuffix">
            <summary>
            The suffix of image data resources.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.ButtonBg">
            <summary>
            The button background sprites.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.InputFieldBg">
            <summary>
            The input field background sprites.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.RadioButtonBg">
            <summary>
            The radio button background sprites.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.CloseButtonBg">
            <summary>
            The close button background sprites.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.RadioButtonToggle">
            <summary>
            The radio button toggle sprite.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.CheckBoxToggle">
            <summary>
            The checkbox toggle sprite.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.HkmpLogo">
            <summary>
            The HKMP logo sprite.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.Resources.TextureManager.NetworkIcon">
            <summary>
            The network icon sprite.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Resources.TextureManager.LoadTextures">
            <summary>
            Load texture by searching for the embedded resources in the assembly.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.Resources.TextureManager.GetTextureBorderDataFromStream(System.IO.Stream)">
            <summary>
            Get a Vector4 containing border data for a given stream.
            </summary>
            <param name="textureDataStream">The texture data stream.</param>
            <returns>A Vector4 containing border data.</returns>
        </member>
        <member name="M:Hkmp.Ui.Resources.TextureManager.GetTextureFromManifestResource(System.String)">
            <summary>
            Get a texture from a manifest resource name.
            </summary>
            <param name="manifestResourceName">The name of the manifest resource.</param>
            <returns>The Texture2D instance if it could be loaded; otherwise null.</returns>
        </member>
        <member name="M:Hkmp.Ui.Resources.TextureManager.SetSpriteVariableByName(System.String,UnityEngine.Sprite)">
            <summary>
            Sets the static variable in this class to the sprite based on the texture name.
            </summary>
            <param name="textureName">The name of the texture.</param>
            <param name="sprite">The sprite to set.</param>
        </member>
        <member name="M:Hkmp.Ui.Resources.TextureManager.CreateSlicedSpriteFromTexture(UnityEngine.Texture2D,UnityEngine.Vector4)">
            <summary>
            Create a spliced sprite given a texture a border data.
            </summary>
            <param name="texture">The Texture2D.</param>
            <param name="border">The Vector4 containing border data.</param>
            <returns>The sliced sprite.</returns>
        </member>
        <member name="M:Hkmp.Ui.Resources.TextureManager.CreateSpriteFromTexture(UnityEngine.Texture2D)">
            <summary>
            Create a sprite given a texture.
            </summary>
            <param name="texture">The Texture2D.</param>
            <returns>The sprite.</returns>
        </member>
        <member name="T:Hkmp.Ui.SettingsEntryInterface">
            <summary>
            Class for a settings entry in the UI.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface.EntryWidth">
            <summary>
            The width of the entire entry.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface.InputWidth">
            <summary>
            The width of input components.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface.InputHeight">
            <summary>
            The height of input components.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface.CheckboxSize">
            <summary>
            The size of checkboxes.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface._text">
            <summary>
            The text component for the name of the entry.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface._input">
            <summary>
            The input component if it is an input entry.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface._checkbox">
            <summary>
            The checkbox component if it is an checkbox entry.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface._type">
            <summary>
            The type of the settings entry.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface._defaultValue">
            <summary>
            The default value of the entry.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface._applySetting">
            <summary>
            The action that is executed when the setting is applied.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.SettingsEntryInterface._currentInputWaitApplyRoutine">
            <summary>
            The coroutine that delays applying the setting if the entry is volatile.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.SettingsEntryInterface.InputWaitApply">
            <summary>
            Coroutine for waiting before apply the setting.
            </summary>
            <returns>The enumerator for this coroutine.</returns>
        </member>
        <member name="M:Hkmp.Ui.SettingsEntryInterface.ApplySetting">
            <summary>
            Apply the setting and execute the callback.
            </summary>
            <exception cref="T:System.Exception">Thrown if the value of the entry could not be retrieved.</exception>
        </member>
        <member name="M:Hkmp.Ui.SettingsEntryInterface.SetInteractable(System.Boolean)">
            <summary>
            Set whether this settings entry is interactable.
            </summary>
            <param name="interactable">Whether the entry is interactable.</param>
        </member>
        <member name="T:Hkmp.Ui.UiManager">
            <inheritdoc />
        </member>
        <member name="F:Hkmp.Ui.UiManager.HeaderFontSize">
            <summary>
            The font size of header text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager.NormalFontSize">
            <summary>
            The font size of normal text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager.ChatFontSize">
            <summary>
            The font size of the chat text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager.SubTextFontSize">
            <summary>
            The font size of sub text.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager.UiGameObject">
            <summary>
            The global GameObject in which all UI is created.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager.InternalChatBox">
            <summary>
            The chat box instance.
            </summary>
        </member>
        <member name="P:Hkmp.Ui.UiManager.ConnectInterface">
            <summary>
            The connect interface.
            </summary>
        </member>
        <member name="P:Hkmp.Ui.UiManager.SettingsInterface">
            <summary>
            The client settings interface.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager._modSettings">
            <summary>
            The mod settings.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager._pingInterface">
            <summary>
            The ping interface.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager._isUiHiddenByKeyBind">
            <summary>
            Whether the UI is hidden by the key-bind.
            </summary>
        </member>
        <member name="F:Hkmp.Ui.UiManager._canShowPauseUi">
            <summary>
            Whether the game is in a state where we normally show the pause menu UI for example in a gameplay
            scene in the HK pause menu.
            </summary>
        </member>
        <member name="P:Hkmp.Ui.UiManager.ChatBox">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.UiManager.OnSuccessfulConnect">
            <summary>
            Callback method for when the client successfully connects.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.UiManager.OnFailedConnect(Hkmp.Networking.Client.ConnectFailedResult)">
            <summary>
            Callback method for when the client fails to connect.
            </summary>
            <param name="result">The result of the failed connection.</param>
        </member>
        <member name="M:Hkmp.Ui.UiManager.OnClientDisconnect">
            <summary>
            Callback method for when the client disconnects.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.UiManager.OnTeamSettingChange">
            <summary>
            Callback method for when the team setting in the <see cref="T:Hkmp.Game.Settings.ServerSettings"/> changes.
            </summary>
        </member>
        <member name="M:Hkmp.Ui.UiManager.CheckKeyBinds(Hkmp.Ui.ComponentGroup)">
            <summary>
            Check key-binds to show/hide the UI.
            </summary>
            <param name="uiGroup">The component group for the entire UI.</param>
        </member>
        <member name="M:Hkmp.Ui.UiManager.DisableTeamSelection">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.UiManager.EnableTeamSelection">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.UiManager.DisableSkinSelection">
            <inheritdoc />
        </member>
        <member name="M:Hkmp.Ui.UiManager.EnableSkinSelection">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Util.AudioUtil">
            <summary>
            Static class proving utilities regarding audio.
            </summary>
        </member>
        <member name="M:Hkmp.Util.AudioUtil.GetAudioSourceObject(UnityEngine.GameObject)">
            <summary>
            Get an audio source relative to the given GameObject.
            </summary>
            <param name="gameObject">The GameObject to get an audio source relative to.</param>
            <returns>A GameObject with an audio source component.</returns>
        </member>
        <member name="T:Hkmp.Util.AuthUtil">
            <summary>
            Utility class for authentication related methods. 
            </summary>
        </member>
        <member name="F:Hkmp.Util.AuthUtil.AuthKeyLength">
            <summary>
            The length of the authentication key.
            </summary>
        </member>
        <member name="F:Hkmp.Util.AuthUtil.RandomNumberGenerator">
            <summary>
            Cryptographically secure random number generator for generating authentication keys.
            </summary>
        </member>
        <member name="F:Hkmp.Util.AuthUtil.AuthKeyLookup">
            <summary>
            Lookup for authentication key characters to their byte value.
            </summary>
        </member>
        <member name="M:Hkmp.Util.AuthUtil.#cctor">
            <summary>
            Static constructor that initializes the bi-directional lookup.
            </summary>
        </member>
        <member name="M:Hkmp.Util.AuthUtil.IsValidAuthKey(System.String)">
            <summary>
            Checks whether a given authentication key is valid or not.
            </summary>
            <param name="authKey">The authentication key in string form to check.</param>
            <returns>True if the given authentication key is valid, false otherwise.</returns>
        </member>
        <member name="M:Hkmp.Util.AuthUtil.GenerateAuthKey">
            <summary>
            Generates a new authentication key.
            </summary>
            <returns>The authentication key as string.</returns>
        </member>
        <member name="M:Hkmp.Util.AuthUtil.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            Get a random integer between <paramref name="minValue"/> (inclusive) and <paramref name="maxValue"/>
            (exclusive).
            </summary>
            <param name="minValue">The minimum value of the integer (inclusive).</param>
            <param name="maxValue">The maximum value of the integer (exclusive).</param>
            <returns>A random signed integer value.</returns>
        </member>
        <member name="M:Hkmp.Util.AuthUtil.GetRandomUInt">
            <summary>
            Get a random unsigned integer.
            </summary>
            <returns>A random unsigned integer.</returns>
        </member>
        <member name="M:Hkmp.Util.AuthUtil.GenerateRandomBytes(System.Int32)">
            <summary>
            Generate an array of random bytes with the given length.
            </summary>
            <param name="numBytes">The number of bytes to generate.</param>
            <returns>A byte array of length <paramref name="numBytes"/></returns>
        </member>
        <member name="T:Hkmp.Util.CommandUtil">
            <summary>
            Class for utilities regarding player commands.
            </summary>
        </member>
        <member name="M:Hkmp.Util.CommandUtil.TryGetPlayerByName(System.Collections.Generic.IEnumerable{Hkmp.Api.Server.IServerPlayer},System.String,Hkmp.Api.Server.IServerPlayer@)">
            <summary>
            Try and get a player by name from the given enumerable.
            </summary>
            <param name="players">The enumerable of players.</param>
            <param name="username">The username to search for.</param>
            <param name="player">If the method returns will contain the player with the username if found;
            otherwise will contain null.</param>
            <returns>true if the player was found; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Util.CommandUtil.TryGetPlayerByAuthKey(System.Collections.Generic.IEnumerable{Hkmp.Game.Server.ServerPlayerData},System.String,Hkmp.Game.Server.ServerPlayerData@)">
            <summary>
            Try and get a player by auth key from the given enumerable.
            </summary>
            <param name="players">The enumerable of players.</param>
            <param name="authKey">The auth key to search for.</param>
            <param name="player">If the method returns will contain the player with the auth key if found;
            otherwise will contain null.</param>
            <returns>true if the player was found; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Util.CommandUtil.TryGetPlayerByIpAddress(System.Collections.Generic.IEnumerable{Hkmp.Game.Server.ServerPlayerData},System.String,Hkmp.Game.Server.ServerPlayerData@)">
            <summary>
            Try and get a player by IP address from the given enumerable.
            </summary>
            <param name="players">The enumerable of players.</param>
            <param name="ipAddress">The IP address to search for.</param>
            <param name="player">If the method returns will contain the player with the IP address if found;
            otherwise will contain null.</param>
            <returns>true if the player was found; otherwise false.</returns>
        </member>
        <member name="T:Hkmp.Util.CompoundCondition">
            <summary>
            A compound condition consisting of multiple booleans that influence whether something compound is true or not.
            </summary>
        </member>
        <member name="F:Hkmp.Util.CompoundCondition._enableAction">
            <summary>
            The action to execute when the compound condition becomes true.
            </summary>
        </member>
        <member name="F:Hkmp.Util.CompoundCondition._disableAction">
            <summary>
            The action to execute when the compound condition becomes false.
            </summary>
        </member>
        <member name="F:Hkmp.Util.CompoundCondition._conditions">
            <summary>
            The array of booleans that this compound condition consists of.
            </summary>
        </member>
        <member name="M:Hkmp.Util.CompoundCondition.#ctor(System.Action,System.Action,System.Int32)">
            <summary>
            Constructs the condition with the enable action, disable action and the specified number of conditions.
            </summary>
            <param name="enableAction">The enable action.</param>
            <param name="disableAction">The disable action.</param>
            <param name="numConditions">The number of conditions initialized with default values.</param>
        </member>
        <member name="M:Hkmp.Util.CompoundCondition.#ctor(System.Action,System.Action,System.Boolean[])">
            <summary>
            Constructs the condition with the enable action, disable action and the given array of initial conditions.
            </summary>
            <param name="enableAction">The enable action.</param>
            <param name="disableAction">The disable action.</param>
            <param name="initialConditions">Boolean array containing initial conditions.</param>
        </member>
        <member name="M:Hkmp.Util.CompoundCondition.SetCondition(System.Int32,System.Boolean)">
            <summary>
            Set the condition of an individual boolean at the given index. Will execute the enable or disable
            action if the compound condition becomes true or false respectively due to this change.
            </summary>
            <param name="conditionIndex">The index of the boolean condition.</param>
            <param name="value">The new boolean value of the condition.</param>
        </member>
        <member name="T:Hkmp.Util.CopyUtil">
            <summary>
            Class for utilities on copying specific classes.
            </summary>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopySpriteAnimation(tk2dSpriteAnimation,UnityEngine.GameObject)">
            <summary>
            Make a copy of a tk2dSpriteAnimation instance, which will preserve internal references in the object.
            The targetObject parameter given is used to initialize Unity related components in.
            </summary>
            <param name="original">The original tk2dSpriteAnimation instance.</param>
            <param name="targetObject">The target object to initialize Unity components in.</param>
            <returns>A copied tk2dSpriteAnimation instance.</returns>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopySpriteAnimationClip(tk2dSpriteAnimationClip,UnityEngine.GameObject,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Make a copy of a tk2dSpriteAnimationClip instance, which will preserve internal references in the object.
            The targetObject parameter given is used to initialize Unity related components in.
            </summary>
            <param name="original">The original tk2dSpriteAnimationClip instance.</param>
            <param name="targetObject">The target object to initialize Unity components in.</param>
            <param name="objectDict">Dictionary containing references between objects in the original instance and
            the copied instance.</param>
            <returns>A copied tk2dSpriteAnimationClip instance.</returns>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopySpriteAnimationFrame(tk2dSpriteAnimationFrame,UnityEngine.GameObject,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Make a copy of a tk2dSpriteAnimationFrame instance, which will preserve internal references in the object.
            The targetObject parameter given is used to initialize Unity related components in.
            </summary>
            <param name="original">The original tk2dSpriteAnimationFrame instance.</param>
            <param name="targetObject">The target object to initialize Unity components in.</param>
            <param name="objectDict">Dictionary containing references between objects in the original instance and
            the copied instance.</param>
            <returns>A copied tk2dSpriteAnimationFrame instance.</returns>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopySpriteCollectionData(tk2dSpriteCollectionData,UnityEngine.GameObject,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Make a copy of a tk2dSpriteCollectionData instance, which will preserve internal references in the object.
            The targetObject parameter given is used to initialize Unity related components in.
            </summary>
            <param name="original">The original tk2dSpriteCollectionData instance.</param>
            <param name="targetObject">The target object to initialize Unity components in.</param>
            <param name="objectDict">Dictionary containing references between objects in the original instance and
            the copied instance.</param>
            <returns>A copied tk2dSpriteCollectionData instance.</returns>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopySpriteDefinition(tk2dSpriteDefinition,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Make a copy of a tk2dSpriteDefinition instance, which will preserve internal references in the object.
            </summary>
            <param name="original">The original tk2dSpriteDefinition instance.</param>
            <param name="objectDict">Dictionary containing references between objects in the original instance and
            the copied instance.</param>
            <returns>A copied tk2dSpriteDefinition instance.</returns>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopyMaterial(UnityEngine.Material,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Make a copy of a Material instance, which will preserve internal references in the object.
            </summary>
            <param name="original">The original Material instance.</param>
            <param name="objectDict">Dictionary containing references between objects in the original instance and
            the copied instance.</param>
            <returns>A copied Material instance.</returns>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopyMaterialArray(UnityEngine.Material[],System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Make a copy of an array of Material instances, which will preserve internal references in the object.
            </summary>
            <param name="original">The original array of Material instances.</param>
            <param name="objectDict">Dictionary containing references between objects in the original instance and
            the copied instance.</param>
            <returns>A copied array of Material instances.</returns>
        </member>
        <member name="M:Hkmp.Util.CopyUtil.SmartCopyArray``1(``0[],System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Make a copy of an array, which will preserve internal references in the objects.
            </summary>
            <param name="original">The original array.</param>
            <param name="objectDict">Dictionary containing references between objects in the original instance and
            the copied instance.</param>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <returns>A copied array.</returns>
        </member>
        <member name="T:Hkmp.Util.CoroutineCancelComponent">
            <summary>
            Component that track active coroutine on a GameObject so they can be cancelled on demand.
            </summary>
        </member>
        <member name="F:Hkmp.Util.CoroutineCancelComponent._activeCoroutines">
            <summary>
            Dictionary mapping string IDs to coroutines.
            </summary>
        </member>
        <member name="M:Hkmp.Util.CoroutineCancelComponent.AddCoroutine(System.String,UnityEngine.Coroutine)">
            <summary>
            Add a coroutine with the given ID.
            </summary>
            <param name="id">The ID of the coroutine.</param>
            <param name="coroutine">The coroutine instance.</param>
        </member>
        <member name="M:Hkmp.Util.CoroutineCancelComponent.CancelCoroutine(System.String)">
            <summary>
            Cancel the coroutine with the given ID.
            </summary>
            <param name="id">The ID of the coroutine to cancel.</param>
        </member>
        <member name="T:Hkmp.Util.FileUtil">
            <summary>
            Class for utilities regarding file interaction.
            </summary>
        </member>
        <member name="M:Hkmp.Util.FileUtil.LoadObjectFromJsonFile``1(System.String)">
            <summary>
            Load an object from a JSON file at the given path.
            </summary>
            <param name="filePath">The path of the file.</param>
            <typeparam name="T">The type of the object to load.</typeparam>
            <returns>An instance of the loaded object, or the default value if it could not be loaded.</returns>
        </member>
        <member name="M:Hkmp.Util.FileUtil.WriteObjectToJsonFile``1(``0,System.String)">
            <summary>
            Write an object to a JSON file at the given path.
            </summary>
            <param name="obj">The object the write.</param>
            <param name="filePath">The path of the file.</param>
            <typeparam name="T">The type of the object to write.</typeparam>
        </member>
        <member name="M:Hkmp.Util.FileUtil.LoadObjectFromResourcePath``1(System.String)">
            <summary>
            Load an object from a JSON file at the given resource path.
            </summary>
            <param name="resourcePath">The path of the embedded resource.</param>
            <typeparam name="T">The type of the object to load.</typeparam>
            <returns>An instance of the loaded object, or the default value if it could not be loaded.</returns>
        </member>
        <member name="M:Hkmp.Util.FileUtil.GetCurrentPath">
            <summary>
            Get the path of where the program is executing.
            </summary>
            <returns>The current path of the executing assembly.</returns>
            <exception cref="T:System.Exception">Thrown if the assembly can not be found or the directory of the assembly
            can not be found.</exception>
        </member>
        <member name="T:Hkmp.Util.FsmUtilExt">
            <summary>
            Class for FSM extensions.
            </summary>
        </member>
        <member name="M:Hkmp.Util.FsmUtilExt.GetAction(PlayMakerFSM,System.String,System.Int32)">
            <summary>
            Get a FSM action by state name and index.
            </summary>
            <param name="fsm">The FSM instance.</param>
            <param name="stateName">The name of the state.</param>
            <param name="index">The index of the action within that state.</param>
            <returns>The FsmStateAction from the FSM or null if the action could not be found.</returns>
        </member>
        <member name="M:Hkmp.Util.FsmUtilExt.GetAction``1(PlayMakerFSM,System.String,System.Int32)">
            <summary>
            Get a FSM action by state name and index.
            </summary>
            <param name="fsm">The FSM instance.</param>
            <param name="stateName">The name of the state.</param>
            <param name="index">The index of the action within that state.</param>
            <typeparam name="T">The type of the action that extends FsmStateAction.</typeparam>
            <returns>The action from the FSM or null if the action could not be found.</returns>
        </member>
        <member name="M:Hkmp.Util.FsmUtilExt.GetFirstAction``1(PlayMakerFSM,System.String)">
            <summary>
            Get the first FSM action by state name and type.
            </summary>
            <param name="fsm">The FSM instance.</param>
            <param name="stateName">The name of the state.</param>
            <typeparam name="T">The type of the action that extends FsmStateAction.</typeparam>
            <returns>The action from the FSM or null if the action could not be found.</returns>
        </member>
        <member name="M:Hkmp.Util.FsmUtilExt.GetState(PlayMakerFSM,System.String)">
            <summary>
            Get a FSM state by its name.
            </summary>
            <param name="fsm">The FSM instance.</param>
            <param name="stateName">The name of the state.</param>
            <returns>The state from the FSM or null, if no such state exists.</returns>
        </member>
        <member name="M:Hkmp.Util.FsmUtilExt.InsertAction(PlayMakerFSM,System.String,HutongGames.PlayMaker.FsmStateAction,System.Int32)">
            <summary>
            Insert a FSM action in a state at a specific index.
            </summary>
            <param name="fsm">The FSM instance.</param>
            <param name="stateName">The name of the state.</param>
            <param name="action">The FSM action to insert.</param>
            <param name="index">The index at which to insert the action.</param>
        </member>
        <member name="M:Hkmp.Util.FsmUtilExt.InsertMethod(PlayMakerFSM,System.String,System.Int32,System.Action)">
            <summary>
            Insert a method in a state at a specific index.
            </summary>
            <param name="fsm">The FSM instance.</param>
            <param name="stateName">The name of the state.</param>
            <param name="index">The index at which to insert the method.</param>
            <param name="method">The method to insert.</param>
        </member>
        <member name="M:Hkmp.Util.FsmUtilExt.RemoveAction(PlayMakerFSM,System.String,System.Int32)">
            <summary>
            Removes an action from a specific state in a FSM.
            </summary>
            <param name="fsm">The FSM.</param>
            <param name="stateName">The name of the state with the action to remove.</param>
            <param name="index">The index of the action within the state.</param>
        </member>
        <member name="T:Hkmp.Util.InvokeMethod">
            <summary>
            FSM action that simply invokes a method.
            </summary>
        </member>
        <member name="F:Hkmp.Util.InvokeMethod._action">
            <summary>
            The action to execute.
            </summary>
        </member>
        <member name="M:Hkmp.Util.InvokeMethod.#ctor(System.Action)">
            <summary>
            Construct the FSM action with the given action.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Hkmp.Util.InvokeMethod.OnEnter">
            <inheritdoc />
        </member>
        <member name="T:Hkmp.Util.GameObjectExtensions">
            <summary>
            Class for GameObject extensions.
            </summary>
        </member>
        <member name="M:Hkmp.Util.GameObjectExtensions.FindGameObjectInChildren(UnityEngine.GameObject,System.String)">
            <summary>
            Find a GameObject with the given name in the children of the given GameObject.
            </summary>
            <param name="gameObject">The GameObject to search in.</param>
            <param name="name">The name of the GameObject to search for.</param>
            <returns>The GameObject if found, null otherwise.</returns>
        </member>
        <member name="T:Hkmp.Util.MonoBehaviourUtil">
            <summary>
            MonoBehaviour that offers static utilities methods.
            </summary>
        </member>
        <member name="F:Hkmp.Util.MonoBehaviourUtil.Instance">
            <summary>
            The instance of this class.
            </summary>
        </member>
        <member name="E:Hkmp.Util.MonoBehaviourUtil.OnUpdateEvent">
            <summary>
            Event that is execute each Unity update tick.
            </summary>
        </member>
        <member name="M:Hkmp.Util.MonoBehaviourUtil.DestroyAllChildren(UnityEngine.GameObject)">
            <summary>
            Destroys all children of a given GameObject.
            </summary>
            <param name="gameObject">The GameObject to destroy all children of.</param>
        </member>
        <member name="M:Hkmp.Util.MonoBehaviourUtil.DestroyAllChildren(UnityEngine.GameObject,System.Collections.Generic.List{System.String})">
            <summary>
            Destroys all children of the given GameObject, excluding game objects that match the names in the
            given list.
            </summary>
            <param name="gameObject">The GameObject to destroy all children of.</param>
            <param name="exclude">The list of names to exclude.</param>
        </member>
        <member name="T:Hkmp.Util.SceneUtil">
            <summary>
            Class for utilities regarding scenes and scene names.
            </summary>
        </member>
        <member name="F:Hkmp.Util.SceneUtil.NonGameplayScenes">
            <summary>
            List of scene names that are considered to be non-gameplay.
            </summary>
        </member>
        <member name="M:Hkmp.Util.SceneUtil.IsNonGameplayScene(System.String)">
            <summary>
            Check whether the scene with the given name is non-gameplay.
            </summary>
            <param name="sceneName">The name of the scene.</param>
            <returns>true if the scene is non-gameplay; otherwise false.</returns>
        </member>
        <member name="M:Hkmp.Util.SceneUtil.GetCurrentSceneName">
            <summary>
            Get the name of the currently active scene.
            </summary>
            <returns>The name of the active scene.</returns>
        </member>
        <member name="T:Hkmp.Util.ThreadUtil">
            <summary>
            Class for utilities regarding threading.
            </summary>
        </member>
        <member name="F:Hkmp.Util.ThreadUtil.Lock">
            <summary>
            Object to lock asynchronous access.
            </summary>
        </member>
        <member name="F:Hkmp.Util.ThreadUtil.ActionsToRun">
            <summary>
            List of actions that need to be run on the Unity main thread.
            </summary>
        </member>
        <member name="M:Hkmp.Util.ThreadUtil.Instantiate">
            <summary>
            Instantiate this static class.
            </summary>
        </member>
        <member name="M:Hkmp.Util.ThreadUtil.RunActionOnMainThread(System.Action)">
            <summary>
            Runs the given action on the main thread of Unity.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="T:Hkmp.Version">
            <summary>
            Static class that stores the version.
            </summary>
        </member>
        <member name="F:Hkmp.Version.String">
            <summary>
            The version as a string.
            </summary>
        </member>
    </members>
</doc>
